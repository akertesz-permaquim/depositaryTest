@page "/DispositivoModeloCrud"
@using Permaquim.Depositary.Web.Administration.Controllers
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
 
@if(dataFuncionesMenues != null)
{
@if (SeguridadController.VerificarRolFuncion("DispositivoModelo",dataFuncionesMenues,"PuedeVisualizar"))
{
 @if (Modelo_entities == null)
 {
     <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
 }
 else
 {
     switch (crudMode)
     {
         case CrudMode.Add:
             <RadzenBadge  BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_TITLE",dataLenguaje) </h4>
                 </ChildContent>
             </RadzenBadge>
             break;
         case CrudMode.Delete:
             <RadzenBadge BadgeStyle="BadgeStyle.Warning" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_TITLE",dataLenguaje) </h4>
                 </ChildContent>
             </RadzenBadge>
             break;
             case CrudMode.Edit:
             <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_TITLE",dataLenguaje) </h4>
                 </ChildContent>
             </RadzenBadge>
             break;         
             case CrudMode.List:
             <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                     <div>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_TITLE",dataLenguaje) </h4>
                     </div>
                 </ChildContent>
             </RadzenBadge>
             break;  
     }
     <hr>
     if (crudMode == CrudMode.List)
     {
         <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
         Data="@Modelo_entities" TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
         <EmptyTemplate>
             <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
         </EmptyTemplate>        
         <Columns>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px" >
                 <HeaderTemplate>
                     <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarRolFuncion("DispositivoModelo",dataFuncionesMenues,"PuedeAgregar") Text =@MultilenguajeController.ObtenerTextoPorClave("NEW_BUTTON",dataLenguaje) Click="Add">
                     </RadzenButton>
                     </HeaderTemplate>
                     <Template Context="element">
                     <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarRolFuncion("DispositivoModelo",dataFuncionesMenues,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                     </RadzenButton>
                     <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarRolFuncion("DispositivoModelo",dataFuncionesMenues,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                     </RadzenButton>
                 </Template>
                 </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Title=@MultilenguajeController.ObtenerTextoPorClave("MARCAID",dataLenguaje) Property="MarcaId" Width="100px" >
                 <Template>
                     @if(Marca_MarcaId_entities.FirstOrDefault( c => c.Id == @context.MarcaId) != null){
                         <RadzenLabel Text="@Marca_MarcaId_entities.FirstOrDefault( c => c.Id == @context.MarcaId).Nombre" Component="MarcaId" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                         <RadzenLabel Text="No data available" Component="MarcaId" style="width: 100%">
                             </RadzenLabel>                        
                         }
                 </Template>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="Nombre" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="Descripcion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="Habilitado" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
             <Template Context="data">
                 <RadzenCheckBox TValue ="bool" Value=@data.Habilitado Disabled="true">
                 </RadzenCheckBox>
             </Template>
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px" >
                 <Template>
                     @if(Usuario_UsuarioCreacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioCreacion) != null){
                         <RadzenLabel Text="@Usuario_UsuarioCreacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioCreacion).NickName" Component="UsuarioCreacion" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                         <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                             </RadzenLabel>                        
                         }
                 </Template>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px" >
                 <Template>
                     @if(Usuario_UsuarioModificacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioModificacion) != null){
                         <RadzenLabel Text="@Usuario_UsuarioModificacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioModificacion).NickName" Component="UsuarioModificacion" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                         <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                             </RadzenLabel>                        
                         }
                 </Template>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Property="FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
         </Columns>
         </RadzenDataGrid>
     <hr>
     }
 
     if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
     {
             <RadzenTemplateForm TItem="DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo" Data="@Modelo_entity"  @bind-Value="Modelo_entity" Submit ="Save" Visible ="@(Modelo_entity != null)">
             <ChildContent>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-9">
                         <RadzenNumeric  TValue="long" style="display: block; width: 100%" @bind-Value="@(Modelo_entity.Id)" Name="Id" Disabled="true" >
                     </RadzenNumeric>
                     </div>
                 </div>
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("MARCAID",dataLenguaje) Component ="MarcaId" style="width: 100%">
                 </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     @if((@Marca_MarcaId_entities.Count > 0 && @Marca_MarcaId_entities.FirstOrDefault( c => c.Id == @Modelo_entity.MarcaId) != null) || crudMode != CrudMode.Delete)
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(Modelo_entity.MarcaId)"
                                     Data=@Marca_MarcaId_entities TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectMarca_MarcaIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                     }
                     else
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" 
                                     Data=@Marca_MarcaId_entities TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectMarca_MarcaIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                    }
                </div>
              </div>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-9">
                         <RadzenTextBox  style="display: block" @bind-Value="@(Modelo_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                         </RadzenTextBox>
                         @if(@crudMode!=CrudMode.Delete)
                         {
                             <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                             </RadzenRequiredValidator>
                         }
                     </div>
                 </div>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Component="Descripcion" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-9">
                         <RadzenTextBox  style="display: block" @bind-Value="@(Modelo_entity.Descripcion)" Name="Descripcion" Disabled="@(crudMode==CrudMode.Delete)">
                         </RadzenTextBox>
                         @if(@crudMode!=CrudMode.Delete)
                         {
                             <RadzenRequiredValidator Component="Descripcion" Text="Descripcion is required" Style="position: absolute">
                             </RadzenRequiredValidator>
                         }
                     </div>
                 </div>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                     </div>
                     <div class="col-md-9">
                 <RadzenCheckBox @bind-Value=@Modelo_entity.Habilitado  Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @Modelo_entity)) Disabled = "@(crudMode == CrudMode.Delete)" />
                     </div>
                 </div>
             @if(crudMode!=CrudMode.Add)
             {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Component ="UsuarioCreacion" style="width: 100%">
                 </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     @if((@Usuario_UsuarioCreacion_entities.Count > 0 && @Usuario_UsuarioCreacion_entities.FirstOrDefault( c => c.Id == @Modelo_entity.UsuarioCreacion) != null) || crudMode != CrudMode.Delete)
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(Modelo_entity.UsuarioCreacion)"
                                     Data=@Usuario_UsuarioCreacion_entities TextProperty = "NickName" ValueProperty = "Id"
                                     Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                     Disabled="true" />
                     }
                     else
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" 
                                     Data=@Usuario_UsuarioCreacion_entities TextProperty = "NickName" ValueProperty = "Id"
                                     Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                     Disabled="true" />
                     }
                 </div>
             </div>
             }
             @if(crudMode!=CrudMode.Add)
             {
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Component="FechaCreacion" style="width: 100%">
                         </RadzenLabel>
                     </div>
                 <div class="col-md-9">
                     <RadzenDatePicker ShowTime="true" ShowSeconds ="true" style ="width: 25%" @bind-Value="@(Modelo_entity.FechaCreacion)" Name="FechaCreacion" Disabled="true" >
                     </RadzenDatePicker>
                 </div>
             </div>
             }
             @if(crudMode!=CrudMode.Add)
             {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Component ="UsuarioModificacion" style="width: 100%">
                 </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     @if((@Usuario_UsuarioModificacion_entities.Count > 0 && @Usuario_UsuarioModificacion_entities.FirstOrDefault( c => c.Id == @Modelo_entity.UsuarioModificacion) != null) || crudMode != CrudMode.Delete)
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100" @bind-Value="@(Modelo_entity.UsuarioModificacion)"
                                     Data=@Usuario_UsuarioModificacion_entities TextProperty = "NickName" ValueProperty = "Id"
                                     Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                     Disabled="true" />
                     }
                     else
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100" 
                                     Data=@Usuario_UsuarioModificacion_entities TextProperty = "NickName" ValueProperty = "Id"
                                     Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                     Disabled="true" />
                     }
                 </div>
             </div>
             }
             @if(crudMode!=CrudMode.Add)
             {
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Component="FechaModificacion" style="width: 100%">
                         </RadzenLabel>
                     </div>
                 <div class="col-md-9">
                     <RadzenDatePicker ShowTime="true" ShowSeconds ="true" style ="width: 25%" @bind-Value="@(Modelo_entity.FechaModificacion)" Name="FechaModificacion" Disabled="true" >
                     </RadzenDatePicker>
                 </div>
             </div>
             }
             <div class="row">
                 <div class="col offset-sm-3">
                 <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("ACCEPT_BUTTON",dataLenguaje) ButtonStyle ="ButtonStyle.Primary">
                 </RadzenButton>
                 <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon = "save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("CANCEL_BUTTON",dataLenguaje) Click="Cancel">
                 </RadzenButton>
                  </div>
             </div>
             </ChildContent>
             </RadzenTemplateForm>
     <hr>
     }
 
     <RadzenNotification /> 
 }
}
else
{
     <p>No tiene permisos para visualizar los registros.</p>
}
}
else
{
     <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
 
@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo Modelo_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo> Modelo_entities = null;
 
    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;
 
 
    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<Entities.FuncionMenu> dataFuncionesMenues;
 
    /// <summary>
    /// Variables to handle Relation between Modelo.MarcaId and Marca.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Dispositivo.Marca Marca_MarcaId_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Dispositivo.Marca>? Marca_MarcaId_entities;
 
    /// <summary>
    /// Variables to handle Relation between Modelo.UsuarioCreacion and Usuario.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
 
    /// <summary>
    /// Variables to handle Relation between Modelo.UsuarioModificacion and Usuario.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
 
    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;
 
    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Int64? userId = null;
 
    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFuncionesMenues = await sessionStorage.GetItemAsync<List<Entities.FuncionMenu>>("DataFuncionesMenues");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        userId = await sessionStorage.GetItemAsync<Int64?>("Id");
        if (userId == null)
             NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DepositarioAdminWeb.Business.Tables.Dispositivo.Modelo entity = new();
        Modelo_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        DepositarioAdminWeb.Business.Tables.Dispositivo.Marca Marca_MarcaId_local = new();
        Marca_MarcaId_entities = Marca_MarcaId_local.Items();
 
        DepositarioAdminWeb.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
 
        DepositarioAdminWeb.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
 
    }
 
    #endregion
 
    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Modelo_entity = new();
        //Relations entities initialization
        Marca_MarcaId_entity = new(); 
        Usuario_UsuarioCreacion_entity = new(); 
        Usuario_UsuarioModificacion_entity = new(); 
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo item, bool delete)
    {
             Modelo_entity = item;
            Marca_MarcaId_entity = new() { 
            Id = Marca_MarcaId_entities.FirstOrDefault(c => c.Id == Modelo_entity.MarcaId).Id, 
            Nombre = Marca_MarcaId_entities.FirstOrDefault(c => c.Id == Modelo_entity.MarcaId).Nombre
            };
            Usuario_UsuarioCreacion_entity = new() { 
            Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == Modelo_entity.UsuarioCreacion).Id, 
            Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == Modelo_entity.UsuarioCreacion).Nombre
            };
            if(Usuario_UsuarioModificacion_entities.Exists(c => c.Id == Modelo_entity.UsuarioModificacion))
            {
                 Usuario_UsuarioModificacion_entity = new() { 
                 Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == Modelo_entity.UsuarioModificacion).Id, 
                 Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == Modelo_entity.UsuarioModificacion).Nombre
                 };
            }
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        DepositarioAdminWeb.Business.Tables.Dispositivo.Modelo crud = new();
        foreach(var property in Modelo_entity.GetType().GetProperties())
        {
             switch(property.Name)
             {
                 case "FechaModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Modelo_entity.FechaModificacion=null;
                 }
                 else
                 {
                     Modelo_entity.FechaModificacion=DateTime.Now;
                 }
                 break;
                 case "FechaCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Modelo_entity.FechaCreacion=DateTime.Now;
                 }
                 break;
                 case "UsuarioCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Modelo_entity.UsuarioCreacion=userId.Value;
                 }
                 break;
                 case "UsuarioModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Modelo_entity.UsuarioModificacion=null;
                 }
                 else
                 {
                     Modelo_entity.UsuarioModificacion=userId.Value;
                 }
                 break;
             }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                     crud.Add(Modelo_entity);
                     summary = "El registro se ha ";
                     actionInformation = "agregado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Edit:
                try
                {
                     crud.Update(Modelo_entity);
                     summary = "El registro se ha ";
                     actionInformation = "modificado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Delete:
                try
                {
                     Modelo_entity.Habilitado=false;
                     crud.Update(Modelo_entity);
                     summary = "El registro se ha ";
                     actionInformation = "eliminado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
                break;
        }
 
        // Sets Crud mode to List
        crudMode = CrudMode.List;
 
        ShowNotification(new NotificationMessage { 
            Severity = severityType, 
            Summary = summary, 
            Detail = actionInformation, 
            Duration = 4000 });
       
            await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;  
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
 
    }
 
    #endregion
    #region Selection events
    /// <summary>
    /// Marca_MarcaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectMarca_MarcaIdValueChanged(object item)
    {
    }
 
    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }
 
    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }
 
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value,DepositarioAdminWeb.Entities.Tables.Dispositivo.Modelo item)
    {
         Modelo_entity = item;
    }
    #endregion
 
    #region Export
 
    #endregion
 
}
