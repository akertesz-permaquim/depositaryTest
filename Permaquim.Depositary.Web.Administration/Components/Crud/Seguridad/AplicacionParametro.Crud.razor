@page "/SeguridadAplicacionParametroCrud"
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
 
@if (AplicacionParametro_entities == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    switch (crudMode)
    {
        case CrudMode.Add:
            <RadzenBadge  BadgeStyle="BadgeStyle.Secondary" >
                <ChildContent>
                    <h4 style="color:white;">Ingrese los datos de AplicacionParametro</h4>
                </ChildContent>
            </RadzenBadge>
            break;
        case CrudMode.Delete:
            <RadzenBadge BadgeStyle="BadgeStyle.Warning" >
                <ChildContent>
                    <h4 style="color:white;">Confirma eliminar el AplicacionParametro ?</h4>
                </ChildContent>
            </RadzenBadge>
            break;
            case CrudMode.Edit:
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                <ChildContent>
                    <h4 style="color:white;">Modificación de datos de AplicacionParametro</h4>
                </ChildContent>
            </RadzenBadge>
            break;         
            case CrudMode.List:
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                <ChildContent>
                    <div>
                        <h4 style="color:white;">Administración de AplicacionParametro</h4>
                    </div>
                </ChildContent>
            </RadzenBadge>
            break;  
    }
 <hr>
    if (crudMode == CrudMode.List)
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
        Data="@AplicacionParametro_entities" TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
       <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
        </EmptyTemplate>        
        <Columns>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px" >
             <HeaderTemplate>
                 <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Text ="Nuevo" Click="Add">
                 </RadzenButton>
                 </HeaderTemplate>
                 <Template Context="element">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
             </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="Id" Filterable="false" Title="Id" Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Title="AplicacionId" Property="AplicacionId" Width="100px" >
                <Template>
                    @if(Aplicacion_entities.FirstOrDefault( c => c.Id == @context.AplicacionId) != null){
                       <RadzenLabel Text="@Aplicacion_entities.FirstOrDefault( c => c.Id == @context.AplicacionId).Nombre" Component="AplicacionId" style="width: 100%">
                            </RadzenLabel>
                        }
                        else
                        {
                       <RadzenLabel Text="No data available" Component="AplicacionId" style="width: 100%">
                            </RadzenLabel>                        
                        }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="Nombre" Filterable="false" Title="Nombre" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
    </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="Habilitado" Filterable="false" Title="Habilitado" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                <RadzenCheckBox TValue ="bool" Value=@data.Habilitado Disabled="true">
                </RadzenCheckBox>
            </Template>
    </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="UsuarioCreacion" Filterable="false" Title="UsuarioCreacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
    </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="FechaCreacion" Filterable="false" Title="FechaCreacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
    </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="UsuarioModificacion" Filterable="false" Title="UsuarioModificacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
    </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Property="FechaModificacion" Filterable="false" Title="FechaModificacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" >
    </RadzenDataGridColumn>
        </Columns>
        </RadzenDataGrid>
 <hr>
    }
 
    if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
    {
         <RadzenTemplateForm TItem="DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro" Data="@AplicacionParametro_entity"  @bind-Value="AplicacionParametro_entity" Submit ="Save" Visible ="@(AplicacionParametro_entity != null)">
          <ChildContent>
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="Id" Component="Id" style="width: 100%">
                     </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     <RadzenNumeric  TValue="long" style="display: block; width: 100%" @bind-Value="@(AplicacionParametro_entity.Id)" Name="Id" Disabled="@(crudMode==CrudMode.Delete)" >
                 </RadzenNumeric>
                 </div>
             </div>
            <div style="margin-bottom: 1rem" class="row">
              <div class="col-md-3">
                <RadzenLabel Text="AplicacionId" Component="AplicacionId" style="width: 100%">
                </RadzenLabel>
              </div>
              <div class="col-md-9">
                  @if((@Aplicacion_entities.Count > 0 && @Aplicacion_entities.FirstOrDefault( c => c.Id == @AplicacionParametro_entity.AplicacionId) != null) || crudMode != CrudMode.Delete)
                  {
                        <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(AplicacionParametro_entity.AplicacionId)"
                                    Data=@Aplicacion_entities TextProperty = "Nombre" ValueProperty = "Id"
                                    Change=@(args => SelectAplicacionValueChanged(args))
                                    Disabled="@(crudMode==CrudMode.Delete)" />
                  }
                  else
                  {
                       <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" 
                                    Data=@Aplicacion_entities TextProperty = "Nombre" ValueProperty = "Id"
                                    Change=@(args => SelectAplicacionValueChanged(args))
                                    Disabled="@(crudMode==CrudMode.Delete)" />
                  }
              </div>
            </div>
              <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="Nombre" Component="Nombre" style="width: 100%">
                     </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     <RadzenTextBox  style="display: block" @bind-Value="@(AplicacionParametro_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                     </RadzenTextBox>
                     @if(@crudMode!=CrudMode.Delete)
                     {
                         <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                         </RadzenRequiredValidator>
                     }
                 </div>
               </div>
              <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                <RadzenLabel Text="Habilitado" Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                 </div>
                 <div class="col-md-9">
                <RadzenCheckBox @bind-Value=@AplicacionParametro_entity.Habilitado  Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @AplicacionParametro_entity)) />
                 </div>
               </div>
         @if(crudMode!=CrudMode.Add)
         {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="UsuarioCreacion" Component="UsuarioCreacion" style="width: 100%">
                     </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     <RadzenNumeric  TValue="long" style="display: block; width: 100%" @bind-Value="@(AplicacionParametro_entity.UsuarioCreacion)" Name="UsuarioCreacion" Disabled="true">
                 </RadzenNumeric>
                 </div>
             </div>
         }
         @if(crudMode!=CrudMode.Add)
         {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="FechaCreacion" Component="FechaCreacion" style="width: 100%">
                     </RadzenLabel>
                 </div>
              <div class="col-md-9">
                 <RadzenDatePicker ShowTime="true" ShowSeconds ="true" style ="width: 25%" @bind-Value="@(AplicacionParametro_entity.FechaCreacion)" Name="FechaCreacion" Disabled="true" >
                 </RadzenDatePicker>
              </div>
            </div>
         }
         @if(crudMode!=CrudMode.Add)
         {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="UsuarioModificacion" Component="UsuarioModificacion" style="width: 100%">
                     </RadzenLabel>
                 </div>
                 <div class="col-md-9">
                     <RadzenNumeric  TValue="long?" style="display: block; width: 100%" @bind-Value="@(AplicacionParametro_entity.UsuarioModificacion)" Name="UsuarioModificacion" Disabled="true">
                 </RadzenNumeric>
                 </div>
             </div>
         }
         @if(crudMode!=CrudMode.Add)
         {
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                     <RadzenLabel Text="FechaModificacion" Component="FechaModificacion" style="width: 100%">
                     </RadzenLabel>
                 </div>
              <div class="col-md-9">
                 <RadzenDatePicker ShowTime="true" ShowSeconds ="true" style ="width: 25%" @bind-Value="@(AplicacionParametro_entity.FechaModificacion)" Name="FechaModificacion" Disabled="true" >
                 </RadzenDatePicker>
              </div>
            </div>
         }
            <div class="row">
              <div class="col offset-sm-3">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Aceptar" ButtonStyle="ButtonStyle.Primary">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon = "save" style="margin-left: 1rem" Text="Cancelar" Click="Cancel">
                </RadzenButton>
              </div>
            </div>
           </ChildContent>
         </RadzenTemplateForm>
 <hr>
    }
 
    <RadzenNotification /> 
}
 
@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro AplicacionParametro_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro> AplicacionParametro_entities = null;
 
    /// <summary>
    /// Variables to handle Relation between AplicacionParametro.AplicacionId and Aplicacion.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Aplicacion Aplicacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.Aplicacion>? Aplicacion_entities;
 
    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;
 
    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Int64? userId = null;
 
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        userId = await sessionStorage.GetItemAsync<Int64?>("Id");
        if (userId == null)
             NavManager.NavigateTo("/ login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DepositarioAdminWeb.Business.Tables.Seguridad.AplicacionParametro entity = new();
        AplicacionParametro_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        DepositarioAdminWeb.Business.Tables.Seguridad.Aplicacion Aplicacion_local = new();
        Aplicacion_entities = Aplicacion_local.Items();
 
    }
 
    #endregion
 
    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        AplicacionParametro_entity = new();
        //Relations entities initialization
        Aplicacion_entity = new(); 
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro item, bool delete)
    {
             AplicacionParametro_entity = item;
            Aplicacion_entity = new() { 
            Id = Aplicacion_entities.FirstOrDefault(c => c.Id == AplicacionParametro_entity.AplicacionId).Id, 
            Nombre = Aplicacion_entities.FirstOrDefault(c => c.Id == AplicacionParametro_entity.AplicacionId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        DepositarioAdminWeb.Business.Tables.Seguridad.AplicacionParametro crud = new();
        foreach(var property in AplicacionParametro_entity.GetType().GetProperties())
        {
             switch(property.Name)
             {
                 case "FechaModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     AplicacionParametro_entity.FechaModificacion=null;
                 }
                 else
                 {
                     AplicacionParametro_entity.FechaModificacion=DateTime.Now;
                 }
                 break;
                 case "FechaCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     AplicacionParametro_entity.FechaCreacion=DateTime.Now;
                 }
                 break;
                 case "UsuarioCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     AplicacionParametro_entity.UsuarioCreacion=userId.Value;
                 }
                 break;
                 case "UsuarioModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     AplicacionParametro_entity.UsuarioModificacion=null;
                 }
                 else
                 {
                     AplicacionParametro_entity.UsuarioModificacion=userId.Value;
                 }
                 break;
             }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                     crud.Add(AplicacionParametro_entity);
                     summary = "El registro se ha ";
                     actionInformation = "agregado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Edit:
                try
                {
                     crud.Update(AplicacionParametro_entity);
                     summary = "El registro se ha ";
                     actionInformation = "modificado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Delete:
                try
                {
                     crud.Delete(AplicacionParametro_entity);
                     summary = "El registro se ha ";
                     actionInformation = "eliminado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
                break;
        }
 
        // Sets Crud mode to List
        crudMode = CrudMode.List;
 
        ShowNotification(new NotificationMessage { 
            Severity = severityType, 
            Summary = summary, 
            Detail = actionInformation, 
            Duration = 4000 });
       
            await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;  
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
 
    }
 
    #endregion
    #region Selection events
    /// <summary>
    /// Aplicacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectAplicacionValueChanged(object item)
    {
    }
 
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value,DepositarioAdminWeb.Entities.Tables.Seguridad.AplicacionParametro item)
    {
         AplicacionParametro_entity = item;
    }
    #endregion
 
    #region Export
 
    #endregion
 
}
