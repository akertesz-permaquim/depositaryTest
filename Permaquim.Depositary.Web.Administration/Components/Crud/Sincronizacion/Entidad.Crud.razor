@page "/SincronizacionEntidadCrud"
@using Permaquim.Depositary.Web.Administration.Controllers;
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
 
@if (estaProcesando)
{
     <div class="spinner"></div>
}
 
@if(dataFunciones != null)
{
@if (SeguridadController.VerificarPermisoFuncion("SincronizacionEntidad",dataFunciones,"PuedeVisualizar"))
{
 @if (Entidad_entities == null)
 {
     <div class="spinner" />
 }
 else
 {
     switch (crudMode)
     {
         case CrudMode.Add:
             <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle ="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Sincronizacion.Entidad",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;
         case CrudMode.Delete:
             <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadgeBorrar", false)  BadgeStyle="BadgeStyle.Warning" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Sincronizacion.Entidad",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;
             case CrudMode.Edit:
             <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false)  BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Sincronizacion.Entidad",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;         
             case CrudMode.List:
             <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false)  BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                     <div>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Sincronizacion.Entidad",dataLenguaje)</h4>
                     </div>
                 </ChildContent>
             </RadzenBadge>
             break;  
     }
     <hr>
     if (crudMode == CrudMode.List)
     {
         <RadzenDataGrid @bind-Settings="@GridSettings" FilterCaseSensitivity= "FilterCaseSensitivity.CaseInsensitive" CellRender=@EntidadCellRender PageSizeOptions="@(new int[]{10,20,50,100})" FilterMode="FilterMode.Advanced" PageSize="@CustomizadorController.ObtenerPaginadoDefault(dataUsuario.EmpresaId, dataCustomizacionPagina.AtributosTabla)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
          AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla) 
         FilterText=@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO", dataLenguaje) GroupPanelText=@MultilenguajeController.ObtenerTextoPorClave("INDICADOR_AGRUPACION", dataLenguaje) IsEmptyText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO", dataLenguaje) IsNotNullText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO", dataLenguaje) IsNullText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO", dataLenguaje) LessThanText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A", dataLenguaje) LessThanOrEqualsText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL", dataLenguaje) NotEqualsText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE", dataLenguaje) IsNotEmptyText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO", dataLenguaje) OrOperatorText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR", dataLenguaje) GreaterThanText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A", dataLenguaje) GreaterThanOrEqualsText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL", dataLenguaje) AndOperatorText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND", dataLenguaje) AllColumnsText=@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS", dataLenguaje) ContainsText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE", dataLenguaje) DoesNotContainText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE", dataLenguaje) ClearFilterText=@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO", dataLenguaje) ApplyFilterText=@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO", dataLenguaje) EqualsText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO", dataLenguaje) EndsWithText=@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON", dataLenguaje) PageSizeText=@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA", dataLenguaje) StartsWithText=@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON", dataLenguaje) ColumnsShowingText=@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES", dataLenguaje)
         Data="@Entidad_entities" TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
         <EmptyTemplate>
             <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
         </EmptyTemplate>        
         <Columns>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" TextAlign="TextAlign.Center" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TemplateABM",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TemplateABM",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TemplateABM",dataCustomizacionPagina.AtributosColumnas)  >
                 <HeaderTemplate>
                     <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("SincronizacionEntidad",dataFunciones,"PuedeAgregar") Text =@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                     </RadzenButton>
                     </HeaderTemplate>
                     <Template Context="element">
                     <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("SincronizacionEntidad",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                     </RadzenButton>
                     <RadzenButton Icon="delete" Disabled="@(!element.Habilitado)" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("SincronizacionEntidad",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                     </RadzenButton>
                 </Template>
                 </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="Id" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Id",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Id",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Id",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Id",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Id",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Id",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Id",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" />
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="Nombre" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Nombre",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Nombre",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Nombre",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Nombre",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Nombre",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Nombre",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Nombre",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="UsuarioCreacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="FechaCreacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCreacion",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="UsuarioModificacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="FechaModificacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaModificacion",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Property="Habilitado" FilterValue="@Habilitado_filter" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Habilitado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Habilitado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Habilitado",dataCustomizacionPagina.AtributosColumnas)  Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center" >
             <Template Context="data">
                 <RadzenCheckBox TValue ="bool" Value=@data.Habilitado Disabled="true">
                 </RadzenCheckBox>
             </Template>
             <FilterTemplate>
                 <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                 <div>
                     @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                     <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true"/>
                 </div>
             </FilterTemplate>
     </RadzenDataGridColumn>
         </Columns>
         </RadzenDataGrid>
     <hr>
     }
 
     if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
     {
             <RadzenTemplateForm TItem="Depositary.Entities.Tables.Sincronizacion.Entidad" Data="@Entidad_entity"  @bind-Value="Entidad_entity" Submit ="Save" Visible ="@(Entidad_entity != null)">
             <ChildContent>
                @if(crudMode != CrudMode.Add)
                {
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-auto">
                         <RadzenNumeric  TValue="long" style="display: block; width: 100%" @bind-Value="@(Entidad_entity.Id)" Name="Id" Disabled="true" >
                     </RadzenNumeric>
                     </div>
                 </div>
                }
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-auto">
                         <RadzenTextBox  style="display: block" @bind-Value="@(Entidad_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                         </RadzenTextBox>
                         @if(@crudMode!=CrudMode.Delete)
                         {
                             <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                             </RadzenRequiredValidator>
                         }
                     </div>
                 </div>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                     </div>
                     <div class="col-md-auto">
                 <RadzenCheckBox @bind-Value=@Entidad_entity.Habilitado  Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @Entidad_entity)) Disabled = "@(crudMode == CrudMode.Delete)" />
                     </div>
                 </div>
             <div class="row">
                 <div class="col offset-sm-3">
                 <RadzenButton Disabled="@estaProcesando" ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle ="ButtonStyle.Primary">
                 </RadzenButton>
                 <RadzenButton Disabled="@estaProcesando" ButtonStyle ="ButtonStyle.Secondary" Icon = "save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                 </RadzenButton>
                  </div>
             </div>
             </ChildContent>
             </RadzenTemplateForm>
     <hr>
     }
 
     <RadzenNotification /> 
 }
}
else
{
     <p>No tiene permisos para visualizar los registros.</p>
}
}
else
{
     <div class="spinner" />
}
 
@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;
 
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Sincronizacion.Entidad Entidad_entity = new();
    private List<Depositary.Entities.Tables.Sincronizacion.Entidad> Entidad_entities = null;
 
    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;
 
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();
 
    private bool estaProcesando = false ;
 
    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();
 
    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();
 
    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;
 
    /// <summary>
    /// Variables to handle column filter for field Entidad.Habilitado
    private bool? Habilitado_filter;
 
    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;
 
    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
 
    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
             NavManager.NavigateTo("login", true);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Sincronizacion","Entidad");
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
             AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "SincronizacionEntidadCrud", crudMode.ToString(), dataUsuario.Id);
        estaProcesando = false;
        Depositary.Business.Tables.Sincronizacion.Entidad entity = new();
        Entidad_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
    }
 
    #endregion
 
    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Entidad_entity = new();
        //Relations entities initialization
        crudMode = CrudMode.Add;
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
             AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "SincronizacionEntidadCrud", crudMode.ToString(), dataUsuario.Id);
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Sincronizacion.Entidad item, bool delete)
    {
             Entidad_entity = item;
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
             AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "SincronizacionEntidadCrud", crudMode.ToString() + " Id: " + item.Id, dataUsuario.Id);
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        estaProcesando = true;
        await Task.Run(Procesar);
        estaProcesando = false;
    }

    private async Task Procesar()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Sincronizacion.Entidad crud = new();
        foreach(var property in Entidad_entity.GetType().GetProperties())
        {
             switch(property.Name)
             {
                 case "FechaModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Entidad_entity.FechaModificacion=null;
                 }
                 else
                 {
                     Entidad_entity.FechaModificacion=DateTime.Now;
                 }
                 break;
                 case "FechaCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Entidad_entity.FechaCreacion=DateTime.Now;
                 }
                 break;
                 case "UsuarioCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Entidad_entity.UsuarioCreacion=dataUsuario.Id;
                 }
                 break;
                 case "UsuarioModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     Entidad_entity.UsuarioModificacion=null;
                 }
                 else
                 {
                     Entidad_entity.UsuarioModificacion=dataUsuario.Id;
                 }
                 break;
             }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                     crud.Add(Entidad_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                     summary = "El registro se ha ";
                     actionInformation = "agregado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     AuditController.Log(ex, dataUsuario.Id);
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Edit:
                try
                {
                     crud.Update(Entidad_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                     summary = "El registro se ha ";
                     actionInformation = "modificado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     AuditController.Log(ex, dataUsuario.Id);
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Delete:
                try
                {
                     Entidad_entity.Habilitado=false;
                     crud.Update(Entidad_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                     summary = "El registro se ha ";
                     actionInformation = "eliminado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     AuditController.Log(ex, dataUsuario.Id);
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
                break;
        }
 
        // Sets Crud mode to List
        crudMode = CrudMode.List;
 
        ShowNotification(new NotificationMessage { 
            Severity = severityType, 
            Summary = summary, 
            Detail = actionInformation, 
            Duration = 4000 });
       
            await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;  
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
 
    }
 
    #endregion
    #region Selection events
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value,Depositary.Entities.Tables.Sincronizacion.Entidad item)
    {
         Entidad_entity = item;
    }
    /// <summary>
    /// EntidadCellRender event
    /// </summary>
    /// <param name="args"></param>
    private void EntidadCellRender(DataGridCellRenderEventArgs<Depositary.Entities.Tables.Sincronizacion.Entidad> args)
    {
         if(!args.Data.Habilitado)
             args.Attributes.Add("class", "row-highlight-disabled");
         else
             args.Attributes.Add("class", "rz-datatable-even");
    }
 
    #endregion
 
    #region Export
 
    #endregion
 
}
