@page "/ValorRelacionMonedaTipoValorCrud"
@using Permaquim.Depositary.Web.Administration.Controllers;
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
 
@if(dataFunciones != null)
{
@if (SeguridadController.VerificarPermisoFuncion("ValorRelacionMonedaTipoValor",dataFunciones,"PuedeVisualizar"))
{
 @if (RelacionMonedaTipoValor_entities == null)
 {
     <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
 }
 else
 {
     switch (crudMode)
     {
         case CrudMode.Add:
             <RadzenBadge  BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Valor.RelacionMonedaTipoValor",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;
         case CrudMode.Delete:
             <RadzenBadge BadgeStyle="BadgeStyle.Warning" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Valor.RelacionMonedaTipoValor",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;
             case CrudMode.Edit:
             <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Valor.RelacionMonedaTipoValor",dataLenguaje)</h4>
                 </ChildContent>
             </RadzenBadge>
             break;         
             case CrudMode.List:
             <RadzenBadge BadgeStyle="BadgeStyle.Secondary" >
                 <ChildContent>
                     <div>
                         <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Valor.RelacionMonedaTipoValor",dataLenguaje)</h4>
                     </div>
                 </ChildContent>
             </RadzenBadge>
             break;  
     }
     <hr>
     if (crudMode == CrudMode.List)
     {
         <RadzenDataGrid FilterCaseSensitivity= "FilterCaseSensitivity.CaseInsensitive" RowRender=@RelacionMonedaTipoValorRowRender AllowColumnPicking ="true" PageSizeOptions="@(new int[]{10,20,50,100})" AllowFiltering ="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
         Data="@RelacionMonedaTipoValor_entities" TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
         <EmptyTemplate>
             <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
         </EmptyTemplate>        
         <Columns>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px" >
                 <HeaderTemplate>
                     <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("ValorRelacionMonedaTipoValor",dataFunciones,"PuedeAgregar") Text =@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                     </RadzenButton>
                     </HeaderTemplate>
                     <Template Context="element">
                     <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("ValorRelacionMonedaTipoValor",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                     </RadzenButton>
                     <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("ValorRelacionMonedaTipoValor",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                     </RadzenButton>
                 </Template>
                 </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Title=@MultilenguajeController.ObtenerTextoPorClave("MONEDAID",dataLenguaje) Property="MonedaId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_MonedaId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                 <Template>
                     @if(Moneda_MonedaId_entities.FirstOrDefault( c => c.Id == @context.MonedaId) != null){
                         <RadzenLabel Text="@Moneda_MonedaId_entities.FirstOrDefault( c => c.Id == @context.MonedaId).Nombre" Component="MonedaId" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                         <RadzenLabel Text="No data available" Component="MonedaId" style="width: 100%">
                             </RadzenLabel>                        
                         }
                 </Template>
                 <FilterTemplate>
                     <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                     <RadzenDropDown @bind-Value=@selectedFilter_MonedaId Data="@Moneda_MonedaId_filter" Change="OnSelectedFilter_MonedaId_Changed" AllowFiltering ="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true"/>
                 </FilterTemplate>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Title=@MultilenguajeController.ObtenerTextoPorClave("TIPOVALORID",dataLenguaje) Property="TipoValorId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_TipoValorId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                 <Template>
                     @if(Tipo_TipoValorId_entities.FirstOrDefault( c => c.Id == @context.TipoValorId) != null){
                         <RadzenLabel Text="@Tipo_TipoValorId_entities.FirstOrDefault( c => c.Id == @context.TipoValorId).Nombre" Component="TipoValorId" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                         <RadzenLabel Text="No data available" Component="TipoValorId" style="width: 100%">
                             </RadzenLabel>                        
                         }
                 </Template>
                 <FilterTemplate>
                     <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                     <RadzenDropDown @bind-Value=@selectedFilter_TipoValorId Data="@Tipo_TipoValorId_filter" Change="OnSelectedFilter_TipoValorId_Changed" AllowFiltering ="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true"/>
                 </FilterTemplate>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Property="Habilitado" Filterable="true" FilterValue="@Habilitado_filter" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true" >
             <Template Context="data">
                 <RadzenCheckBox TValue ="bool" Value=@data.Habilitado Disabled="true">
                 </RadzenCheckBox>
             </Template>
             <FilterTemplate>
                 <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                 <div>
                     @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                     <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true"/>
                 </div>
             </FilterTemplate>
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                 <Template>
                     @{
                         var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioCreacion);
                         if(usuario != null)
                         {
                             <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                             <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                             </RadzenLabel>                        
                         }
                     }
                 </Template>
                 <FilterTemplate>
                     <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                     <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering ="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear ="true" Multiple="true"/>
                 </FilterTemplate>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Property="FechaCreacion" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false" >
     </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                 <Template>
                     @{
                         var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioModificacion);
                         if(usuario != null)
                         {
                             <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                             </RadzenLabel>
                         }
                         else
                         {
                             <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                             </RadzenLabel>                        
                         }
                     }
                 </Template>
                 <FilterTemplate>
                     <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                     <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering ="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear ="true" Multiple="true"/>
                 </FilterTemplate>
             </RadzenDataGridColumn>
             <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Property="FechaModificacion" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false" >
     </RadzenDataGridColumn>
         </Columns>
         </RadzenDataGrid>
     <hr>
     }
 
     if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
     {
             <RadzenTemplateForm TItem="Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor" Data="@RelacionMonedaTipoValor_entity"  @bind-Value="RelacionMonedaTipoValor_entity" Submit ="Save" Visible ="@(RelacionMonedaTipoValor_entity != null)">
             <ChildContent>
                @if(crudMode != CrudMode.Add)
                {
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                         <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                         </RadzenLabel>
                     </div>
                     <div class="col-md-9">
                         <RadzenNumeric  TValue="long" style="display: block; width: 100%" @bind-Value="@(RelacionMonedaTipoValor_entity.Id)" Name="Id" Disabled="true" >
                     </RadzenNumeric>
                     </div>
                 </div>
                }
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("MONEDAID",dataLenguaje) Component ="MonedaId" style="width: 100%">
                 </RadzenLabel>
                 </div>
                 <div class="col-md-4">
                     @if((@Moneda_MonedaId_entities.Count > 0 && @Moneda_MonedaId_entities.FirstOrDefault( c => c.Id == @RelacionMonedaTipoValor_entity.MonedaId) != null) || crudMode != CrudMode.Delete)
                     {
                         var dataSet = crudMode == CrudMode.Add ? Moneda_MonedaId_entities.Where(x => x.Habilitado == true) : Moneda_MonedaId_entities.Where(x => x.Habilitado == true || x.Id == RelacionMonedaTipoValor_entity.MonedaId);
                         <RadzenDropDown AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(RelacionMonedaTipoValor_entity.MonedaId)"
                                     Data=@dataSet TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectMoneda_MonedaIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                     }
                     else
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" 
                                     Data=@Moneda_MonedaId_entities TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectMoneda_MonedaIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                    }
                </div>
              </div>
             <div style="margin-bottom: 1rem" class="row">
                 <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOVALORID",dataLenguaje) Component ="TipoValorId" style="width: 100%">
                 </RadzenLabel>
                 </div>
                 <div class="col-md-4">
                     @if((@Tipo_TipoValorId_entities.Count > 0 && @Tipo_TipoValorId_entities.FirstOrDefault( c => c.Id == @RelacionMonedaTipoValor_entity.TipoValorId) != null) || crudMode != CrudMode.Delete)
                     {
                         var dataSet = crudMode == CrudMode.Add ? Tipo_TipoValorId_entities.Where(x => x.Habilitado == true) : Tipo_TipoValorId_entities.Where(x => x.Habilitado == true || x.Id == RelacionMonedaTipoValor_entity.TipoValorId);
                         <RadzenDropDown AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(RelacionMonedaTipoValor_entity.TipoValorId)"
                                     Data=@dataSet TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectTipo_TipoValorIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                     }
                     else
                     {
                         <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" 
                                     Data=@Tipo_TipoValorId_entities TextProperty = "Nombre" ValueProperty = "Id"
                                     Change=@(args => SelectTipo_TipoValorIdValueChanged(args))
                                     Disabled="@(crudMode==CrudMode.Delete)" />
                    }
                </div>
              </div>
                 <div style="margin-bottom: 1rem" class="row">
                     <div class="col-md-3">
                 <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                     </div>
                     <div class="col-md-9">
                 <RadzenCheckBox @bind-Value=@RelacionMonedaTipoValor_entity.Habilitado  Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @RelacionMonedaTipoValor_entity)) Disabled = "@(crudMode == CrudMode.Delete)" />
                     </div>
                 </div>
             <div class="row">
                 <div class="col offset-sm-3">
                 <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle ="ButtonStyle.Primary">
                 </RadzenButton>
                 <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon = "save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                 </RadzenButton>
                  </div>
             </div>
             </ChildContent>
             </RadzenTemplateForm>
     <hr>
     }
 
     <RadzenNotification /> 
 }
}
else
{
     <p>No tiene permisos para visualizar los registros.</p>
}
}
else
{
     <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
 
@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor RelacionMonedaTipoValor_entity = new();
    private List<Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor> RelacionMonedaTipoValor_entities = null;
 
    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;
 
 
    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;
 
    /// <summary>
    /// Variables to handle Relation between RelacionMonedaTipoValor.MonedaId and Moneda.Id
    /// </summary>
    private Depositary.Entities.Tables.Valor.Moneda Moneda_MonedaId_entity = new();
    private List<Depositary.Entities.Tables.Valor.Moneda>? Moneda_MonedaId_entities;
    private List<Depositary.Entities.Tables.Valor.Moneda> Moneda_MonedaId_filter;
    private IEnumerable<Int64> selectedFilter_MonedaId;
 
    /// <summary>
    /// Variables to handle Relation between RelacionMonedaTipoValor.TipoValorId and Tipo.Id
    /// </summary>
    private Depositary.Entities.Tables.Valor.Tipo Tipo_TipoValorId_entity = new();
    private List<Depositary.Entities.Tables.Valor.Tipo>? Tipo_TipoValorId_entities;
    private List<Depositary.Entities.Tables.Valor.Tipo> Tipo_TipoValorId_filter;
    private IEnumerable<Int64> selectedFilter_TipoValorId;
 
    /// <summary>
    /// Variables to handle column filter for field RelacionMonedaTipoValor.Habilitado
    private bool? Habilitado_filter;
 
    /// <summary>
    /// Variables to handle Relation between RelacionMonedaTipoValor.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;
 
    /// <summary>
    /// Variables to handle Relation between RelacionMonedaTipoValor.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;
 
    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;
 
    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
 
    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFunciones = await sessionStorage.GetItemAsync<List<SeguridadEntities.FuncionRol>>("DataFunciones");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
             NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        Depositary.Business.Tables.Valor.RelacionMonedaTipoValor entity = new();
        RelacionMonedaTipoValor_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Valor.Moneda Moneda_MonedaId_local = new();
        Moneda_MonedaId_entities = Moneda_MonedaId_local.Items();
        Moneda_MonedaId_filter = Moneda_MonedaId_entities.Where(x => RelacionMonedaTipoValor_entities.Select(x => x.MonedaId).Distinct().Contains(x.Id)).ToList();
 
        Depositary.Business.Tables.Valor.Tipo Tipo_TipoValorId_local = new();
        Tipo_TipoValorId_entities = Tipo_TipoValorId_local.Items();
        Tipo_TipoValorId_filter = Tipo_TipoValorId_entities.Where(x => RelacionMonedaTipoValor_entities.Select(x => x.TipoValorId).Distinct().Contains(x.Id)).ToList();
 
        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => RelacionMonedaTipoValor_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();
 
        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => RelacionMonedaTipoValor_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();
 
    }
 
    #endregion
 
    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        RelacionMonedaTipoValor_entity = new();
        //Relations entities initialization
        Moneda_MonedaId_entity = new(); 
        Tipo_TipoValorId_entity = new(); 
        Usuario_UsuarioCreacion_entity = new(); 
        Usuario_UsuarioModificacion_entity = new(); 
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor item, bool delete)
    {
             RelacionMonedaTipoValor_entity = item;
            Moneda_MonedaId_entity = new() { 
            Id = Moneda_MonedaId_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.MonedaId).Id, 
            Nombre = Moneda_MonedaId_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.MonedaId).Nombre
            };
            Tipo_TipoValorId_entity = new() { 
            Id = Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.TipoValorId).Id, 
            Nombre = Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.TipoValorId).Nombre
            };
            Usuario_UsuarioCreacion_entity = new() { 
            Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.UsuarioCreacion).Id, 
            Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.UsuarioCreacion).Nombre
            };
            if(Usuario_UsuarioModificacion_entities.Exists(c => c.Id == RelacionMonedaTipoValor_entity.UsuarioModificacion))
            {
                 Usuario_UsuarioModificacion_entity = new() { 
                 Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.UsuarioModificacion).Id, 
                 Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == RelacionMonedaTipoValor_entity.UsuarioModificacion).Nombre
                 };
            }
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Valor.RelacionMonedaTipoValor crud = new();
        foreach(var property in RelacionMonedaTipoValor_entity.GetType().GetProperties())
        {
             switch(property.Name)
             {
                 case "FechaModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     RelacionMonedaTipoValor_entity.FechaModificacion=null;
                 }
                 else
                 {
                     RelacionMonedaTipoValor_entity.FechaModificacion=DateTime.Now;
                 }
                 break;
                 case "FechaCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     RelacionMonedaTipoValor_entity.FechaCreacion=DateTime.Now;
                 }
                 break;
                 case "UsuarioCreacion":
                 if(crudMode == CrudMode.Add)
                 {
                     RelacionMonedaTipoValor_entity.UsuarioCreacion=dataUsuario.Id;
                 }
                 break;
                 case "UsuarioModificacion":
                 if(crudMode == CrudMode.Add)
                 {
                     RelacionMonedaTipoValor_entity.UsuarioModificacion=null;
                 }
                 else
                 {
                     RelacionMonedaTipoValor_entity.UsuarioModificacion=dataUsuario.Id;
                 }
                 break;
             }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                     crud.Add(RelacionMonedaTipoValor_entity);
                     summary = "El registro se ha ";
                     actionInformation = "agregado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Edit:
                try
                {
                     crud.Update(RelacionMonedaTipoValor_entity);
                     summary = "El registro se ha ";
                     actionInformation = "modificado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
            break;
            case CrudMode.Delete:
                try
                {
                     RelacionMonedaTipoValor_entity.Habilitado=false;
                     crud.Update(RelacionMonedaTipoValor_entity);
                     summary = "El registro se ha ";
                     actionInformation = "eliminado.";
                     severityType = NotificationSeverity.Success;
                }
                catch(Exception ex)
                {
                     summary = "Error al procesar.";
                     actionInformation = ex.Message;
                     severityType = NotificationSeverity.Error;
                }
                break;
        }
 
        // Sets Crud mode to List
        crudMode = CrudMode.List;
 
        ShowNotification(new NotificationMessage { 
            Severity = severityType, 
            Summary = summary, 
            Detail = actionInformation, 
            Duration = 4000 });
       
            await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;  
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
 
    }
 
    #endregion
    #region Selection events
    /// <summary>
    /// Moneda_MonedaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectMoneda_MonedaIdValueChanged(object item)
    {
    }
 
    /// <summary>
    /// selectedFilter_MonedaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_MonedaId_Changed(object value)
    {
         if(selectedFilter_MonedaId!=null && !selectedFilter_MonedaId.Any())
         {
             selectedFilter_MonedaId=null;
         }
    }
 
    /// <summary>
    /// Tipo_TipoValorId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectTipo_TipoValorIdValueChanged(object item)
    {
    }
 
    /// <summary>
    /// selectedFilter_TipoValorId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_TipoValorId_Changed(object value)
    {
         if(selectedFilter_TipoValorId!=null && !selectedFilter_TipoValorId.Any())
         {
             selectedFilter_TipoValorId=null;
         }
    }
 
    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }
 
    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
         if(selectedFilter_UsuarioCreacion!=null && !selectedFilter_UsuarioCreacion.Any())
         {
             selectedFilter_UsuarioCreacion=null;
         }
    }
 
    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }
 
    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
         if(selectedFilter_UsuarioModificacion!=null && !selectedFilter_UsuarioModificacion.Any())
         {
             selectedFilter_UsuarioModificacion=null;
         }
    }
 
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value,Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor item)
    {
         RelacionMonedaTipoValor_entity = item;
    }
    /// <summary>
    /// RelacionMonedaTipoValorRowRender event
    /// </summary>
    /// <param name="args"></param>
    private void RelacionMonedaTipoValorRowRender(RowRenderEventArgs<Depositary.Entities.Tables.Valor.RelacionMonedaTipoValor> args)
    {
         if(!args.Data.Habilitado)
             args.Attributes.Add("class", "row-highlight-disabled");
         else
             args.Attributes.Add("class", "rz-datatable-even");
    }
 
    #endregion
 
    #region Export
 
    #endregion
 
}
