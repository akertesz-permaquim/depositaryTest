@page "/cambioPassword"
@layout MainLayout

@using Permaquim.Depositary.Web.Administration.Controllers

@inject NotificationService NotificationService
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<Login> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<RadzenContent Container="main">
    <ChildContent>
        <RadzenHeading Size="H1" style="display: inline-block; vertical-align:middle" Text="Cambio de password">
        </RadzenHeading>
        <hr>
        <RadzenTemplateForm TItem="PasswordChangeForm" Data="@formCambioPassword" Submit="@ModificarPasswordUsuario">
            <ChildContent>
                @if (estaCargando)
                {
                    <div class="spinnerCentrado"></div>
                }
                <RadzenLabel Component="ActualPassword" style="display: block; margin-top: 16px" Text="Contraseña actual:">
                </RadzenLabel>
                <RadzenPassword Disabled="@estaCargando" @bind-Value="@(formCambioPassword.ActualPassword)" style="width: 100%" Name="ActualPassword">
                </RadzenPassword>
                <RadzenRequiredValidator Component="ActualPassword" Text="Password is required">
                </RadzenRequiredValidator>
                <RadzenLabel Component="NewPassword" style="display: block; margin-top: 16px" Text="Nueva contraseña:">
                </RadzenLabel>
                <RadzenPassword Disabled="@estaCargando" @bind-Value="@(formCambioPassword.NewPassword)" style="width: 100%" Name="NewPassword">
                </RadzenPassword>
                <RadzenRequiredValidator Component="NewPassword" Text="Password is required">
                </RadzenRequiredValidator>
                <RadzenRegexValidator Component="NewPassword" Text="Password must have at least 8 characters with one numeric character, one special character and one capital letter" Pattern="@validacionPassword" />
                <RadzenLabel Component="NewPasswordCopy" style="display: block; margin-top: 16px" Text="Repita la contraseña:">
                </RadzenLabel>
                <RadzenPassword Disabled="@estaCargando" @bind-Value="@(formCambioPassword.NewPasswordCopy)" style="width: 100%" Name="NewPasswordCopy">
                </RadzenPassword>
                <RadzenRequiredValidator Component="NewPasswordCopy" Text="Password is required">
                </RadzenRequiredValidator>
                <RadzenCompareValidator Component="NewPasswordCopy" Value="@(formCambioPassword.NewPassword)" Operator="CompareOperator.Equal" Text="Passwords must match">
                </RadzenCompareValidator>
                <div style="text-align:center; margin-top: 2%;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Disabled="@estaCargando" ButtonStyle="ButtonStyle.Primary" Text="Change">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                    </RadzenButton>
                </div>
            </ChildContent>
        </RadzenTemplateForm>
    </ChildContent>
</RadzenContent>

@code {
    private PasswordChangeForm formCambioPassword = new PasswordChangeForm();
    private List<Entities.TextoLenguaje> dataLenguaje;
    private bool estaCargando { get; set; }
    private int intentosCambioPassword { get; set; }
    private int maximaCantidadIntentosLogueo { get; set; }
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    private string validacionPassword { get; set; }

    public class PasswordChangeForm
    {
        public string ActualPassword { get; set; }
        public string NewPassword { get; set; }
        public string NewPasswordCopy { get; set; }
    }

    [Parameter]
    public string UserName { get; set; }

    [Parameter]
    public string UserId { get; set; }

    protected override void OnInitialized()
    {
        estaCargando = true;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        validacionPassword = "";
        intentosCambioPassword = 0;
        maximaCantidadIntentosLogueo = SeguridadController.ObtenerCantidadMaximaLogueosIncorrectos(dataUsuario.EmpresaId);
        validacionPassword = AplicacionController.ObtenerConfiguracionGeneral("REGEX_POLITICAS_CONTRASEÑAS");
        estaCargando = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        NavManager.NavigateTo("Dashboard", true);
    }

    protected async void ModificarPasswordUsuario()
    {
        estaCargando = true;
        StateHasChanged();
        //Primero verificamos que la password actual sea correcta:
        var usuario = await Task.Run(() => SeguridadController.LoguearUsuario(dataUsuario.NickName, formCambioPassword.ActualPassword));

        if (usuario != null)
        {
            if (Cryptography.Hash(formCambioPassword.ActualPassword) == usuario.Password)
            {
                string resultadoCambioContraseña = await Task.Run(() => SeguridadController.ModificarPasswordUsuario(dataUsuario.NickName, formCambioPassword.NewPassword));
                //Si es correcta modificamos el registro
                if (resultadoCambioContraseña == "")
                {
                    NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = MultilenguajeController.ObtenerTextoPorClave("PASSWORD_CHANGE_SUCCESS", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("PASSWORD_CHANGE_SUCCESS", dataLenguaje), Duration = 3000 });
                    NavManager.NavigateTo("login", true);
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("PASSWORD_CHANGE_ERROR", dataLenguaje), Detail = resultadoCambioContraseña, Duration = 3000 });
                }
            }
            else
            {
                intentosCambioPassword++;
                if (intentosCambioPassword >= maximaCantidadIntentosLogueo)
                {
                    NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_BLOCKED_USER", dataLenguaje), Duration = 3000 });
                    NavManager.NavigateTo("logout", true);
                }
                NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("PASSWORD_CHANGE_INCORRECT_PASSWORD", dataLenguaje), Duration = 3000 });
                formCambioPassword.ActualPassword = "";
            }
        }
        estaCargando = false;
        StateHasChanged();
    }
}
