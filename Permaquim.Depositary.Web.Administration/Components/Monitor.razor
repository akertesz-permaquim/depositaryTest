@page "/Monitor"
@layout MainLayout

@using Permaquim.Depositary.Web.Administration.Controllers;
@using System;
@using System.Timers;
@using Permaquim.Depositary.Web.Administration.Managers;

@inject Microsoft.Extensions.Localization.IStringLocalizer<Monitor> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (dataLenguaje != null)
{
    <RadzenContent Container="main">
        <ChildContent>
            <h1>Monitor</h1>
            <hr>
            Agrupar depositarios
            <RadzenCheckBox TValue="bool"
                        Name="ChkAgruparDepositarios"
                        Change="@changeChkAgruparDepositarios">
            </RadzenCheckBox>
            <br />
            <br />
            <RadzenDataGrid TItem="Entities.DepositarioMonitor"
                        @ref="@gridDepositarios"
                        IsLoading="@estaCargandoGridDepositarios"
                        AllowFiltering="true"
                        AllowPaging="true"
                        ExpandMode="DataGridExpandMode.Multiple"
                        Data="@dataDepositarios"
                        RowExpand="@expandirDepositario"
                        RowCollapse="@colapsarDepositario"
                        RowRender="@depositarioRowRender"
                        AllowGrouping="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="DepositarioId" Title="ID" Width="2%" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="Empresa" Title="@MultilenguajeController.ObtenerTextoPorClave("EMPRESA",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="Sucursal" Title="@MultilenguajeController.ObtenerTextoPorClave("SUCURSAL",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="Sector" Title="@MultilenguajeController.ObtenerTextoPorClave("SECTOR",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="Nombre" Title="@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="Modelo" Width="9%" Title="@MultilenguajeController.ObtenerTextoPorClave("MODELO",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="ValorTotalEnBolsa" FormatString="{0:C2}" Width="12%" TextAlign="TextAlign.Right" Title="@MultilenguajeController.ObtenerTextoPorClave("VALORTOTALENBOLSA",dataLenguaje)" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="SemaforoOnline" Title="@MultilenguajeController.ObtenerTextoPorClave("SEMAFOROONLINE",dataLenguaje)" Width="9%" TextAlign="TextAlign.Center">
                        <Template Context="depositario">
                            @switch (depositario.SemaforoOnline)
                            {
                                case "Verde":
                                    <RadzenImage Path="images/led_green.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Amarillo":
                                    <RadzenImage Path="images/led_yellow.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Rojo":
                                    <RadzenImage Path="images/led_red.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="SemaforoOcupacionBolsa" Width="10%" Title="@MultilenguajeController.ObtenerTextoPorClave("SEMAFOROOCUPACIONBOLSA",dataLenguaje)" TextAlign="TextAlign.Center">
                        <Template Context="depositario">
                            @switch (depositario.SemaforoOcupacionBolsa)
                            {
                                case "Verde":
                                    <RadzenImage Path="images/led_green.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Amarillo":
                                    <RadzenImage Path="images/led_yellow.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Rojo":
                                    <RadzenImage Path="images/led_red.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Property="SemaforoAnomalia" Title="@MultilenguajeController.ObtenerTextoPorClave("SEMAFOROANOMALIA",dataLenguaje)" Width="9%" TextAlign="TextAlign.Center">
                        <Template Context="depositario">
                            @switch (depositario.SemaforoAnomalia)
                            {
                                case "Verde":
                                    <RadzenImage Path="images/led_green.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Amarillo":
                                    <RadzenImage Path="images/led_yellow.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                                case "Rojo":
                                    <RadzenImage Path="images/led_red.png" style="width: 30px; height: 30px; border-radius: 8px;" />
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="Descripcion" Title="Descripcion" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="NumeroSerie" Title="N° Serie" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="CodigoExterno" Title="Cod. Externo" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="UsuarioCreacion" Title="Usuario creación" Width="10%" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="FechaCreacion" Title="Fecha creación" Width="10%" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="UsuarioModificacion" Title="Usuario mod." Width="10%" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="FechaModificacion" Title="Fecha mod." Width="10%" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                    <RadzenDataGridColumn TItem="Entities.DepositarioMonitor" Visible="false" Property="Habilitado" Title="Habilitado" />
                </Columns>
                <Template Context="depositario">
                    <RadzenCard Style="background-color:azure; margin-bottom:1%">
                        <ChildContent>
                            @{
                                var auxInformacionDepositario = dataInformacionDepositario.Where(x => x.DepositarioId == depositario.DepositarioId).FirstOrDefault();
                                @if (auxInformacionDepositario != null)
                                {
                                    <div class="container-fluid flex">
                                        <div class="row" style="margin-left: -5%;">
                                            <div class="col-md-2" style="align-self: center;text-align: center;">
                                                <RadzenImage Path="images/de-50.png" style="width: 100px; height: 100px; border-radius: 8px; text-align:center;" />
                                            </div>
                                            <div class="col-md-8">
                                                <div class="row">
                                                    <div class="col-md-4" style="padding-top: 1%; font-size: medium; text-align:center;">
                                                        <b>@MultilenguajeController.ObtenerTextoPorClave("NUMERODESERIE",dataLenguaje):</b>
                                                        @auxInformacionDepositario.NumeroSerie
                                                    </div>
                                                    <div class="col-md-4" style="padding-left: 5%; padding-top: 1%; font-size: medium; text-align:center;">
                                                        <b>@MultilenguajeController.ObtenerTextoPorClave("IDDEBOLSA",dataLenguaje):</b> @auxInformacionDepositario.IdentificadorBolsa
                                                    </div>
                                                    <div class="col-md-4" style="padding-left: 5%; padding-top: 1%; font-size: medium; text-align:center;">
                                                        <b>@MultilenguajeController.ObtenerTextoPorClave("FECHAULTIMASINCRONIZACION",dataLenguaje):</b> @auxInformacionDepositario.FechaUltimaSincronizacion
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div style="padding-left: 5%; padding-top: 10%; text-align:center">
                                                            <b>@MultilenguajeController.ObtenerTextoPorClave("DINEROVALIDADO",dataLenguaje):</b> @auxInformacionDepositario.CodigoMoneda @auxInformacionDepositario.TotalValidado
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div style="padding-left: 5%; padding-top: 10%; text-align:center">
                                                            <b>@MultilenguajeController.ObtenerTextoPorClave("DINEROAVALIDAR",dataLenguaje):</b> @auxInformacionDepositario.CodigoMoneda @auxInformacionDepositario.TotalAValidar
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div style="padding-left: 5%; padding-top: 10%; text-align:center">
                                                            <b>@MultilenguajeController.ObtenerTextoPorClave("DINEROTOTAL",dataLenguaje):</b> @auxInformacionDepositario.CodigoMoneda @auxInformacionDepositario.Total
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div style="padding-top: 5%; text-align:center"><b>@MultilenguajeController.ObtenerTextoPorClave("OCUPACIONDELABOLSA",dataLenguaje)</b></div>
                                                        @if (auxInformacionDepositario.PorcentajeOcupacionBolsa >= 70 && auxInformacionDepositario.PorcentajeOcupacionBolsa < 90)
                                                        {
                                                            <PermaquimProgressBar BarColor="yellow" Mode="ProgressBarMode.Determinate" Value="@auxInformacionDepositario.PorcentajeOcupacionBolsa" Max="100" />
                                                        }
                                                        else if (auxInformacionDepositario.PorcentajeOcupacionBolsa >= 90 && auxInformacionDepositario.PorcentajeOcupacionBolsa < 100)
                                                        {
                                                            <PermaquimProgressBar BarColor="red" Mode="ProgressBarMode.Determinate" Value="@auxInformacionDepositario.PorcentajeOcupacionBolsa" Max="100" />
                                                        }
                                                        else if (auxInformacionDepositario.PorcentajeOcupacionBolsa >= 100)
                                                        {
                                                            <PermaquimProgressBar BarColor="darkred" Mode="ProgressBarMode.Determinate" Value="@auxInformacionDepositario.PorcentajeOcupacionBolsa" Max="100" />
                                                        }
                                                        else
                                                        {
                                                            <PermaquimProgressBar BarColor="green" Mode="ProgressBarMode.Determinate" Value="@auxInformacionDepositario.PorcentajeOcupacionBolsa" Max="100" />
                                                        }
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div style="padding-left: 5%; padding-top: 10%; text-align:center">
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div style="padding-left: 5%; padding-top: 10%; text-align:center">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </ChildContent>
                    </RadzenCard>
                    <RadzenTabs Change="@(args => changeTabMonitorDepositario(args,depositario))">
                        <Tabs>
                            <RadzenTabsItem Icon="local_atm" Text="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITOS",dataLenguaje)">
                                <RadzenDataGrid TItem="Entities.TransaccionValidadaMonitor"
                                            @ref="@gridTransacciones"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            AllowSorting="true"
                                            AllowColumnResize="true"
                                            IsLoading="@estaCargandoGridTransacciones"
                                            ExpandMode="DataGridExpandMode.Multiple"
                                            RowExpand="@expandirTransaccion"
                                            Data="@dataTransaccionesDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Visible="false" Property="TransaccionId" Title="ID" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="FechaTransaccion" Sortable="true" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="TipoTransaccion" Title="Tipo" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="UsuarioTransaccion" Title="Usuario T." />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="UsuarioCuenta" Title="Usuario cuenta" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="Cuenta" Title="Cuenta" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="Banco" Width="10%" Title="Banco" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="Contenedor" Title="Contenedor" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionValidadaMonitor" Property="TotalValidado" Title="Total" FormatString="{0:C2}" TextAlign="TextAlign.Right" />
                                    </Columns>
                                    <Template Context="transaccion">
                                        <RadzenDataGrid TItem="Entities.DetalleTransaccionValidadaMonitor"
                                                    @ref="@gridTransaccionDetalles"
                                                    IsLoading="@estaCargandoGridTransaccionDetalles"
                                                    AllowFiltering="true"
                                                    AllowPaging="true"
                                                    Data="@dataTransaccionDetalles.Where(x => x.TransaccionId==transaccion.TransaccionId)">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Visible="false" Property="TransaccionDetalleId" Title="ID" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Property="FechaTransaccionDetalle" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Property="Moneda" Title="Moneda" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Property="Denominacion" Title="Denominación" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Property="ImagenDenominacion" Title="Imagen">
                                                    <Template Context="transaccionDetalle">
                                                        <div style="text-align:center">
                                                            <RadzenImage Path="@transaccionDetalle.ImagenDenominacion" Style="width: 80px;" />
                                                        </div>
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionValidadaMonitor" Property="CantidadUnidades" Title="Cantidad" TextAlign="TextAlign.Right">
                                                    <FooterTemplate>
                                                        Total cantidad: <b>@dataTransaccionDetalles.Where(x => x.TransaccionId==transaccion.TransaccionId).Sum(o => o.CantidadUnidades)</b>
                                                    </FooterTemplate>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>
                                    </Template>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="forward_to_inbox" Text="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITOSSOBRE",dataLenguaje)">
                                <RadzenDataGrid TItem="Entities.TransaccionAValidarMonitor"
                                            @ref="@gridTransaccionesSobres"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            ExpandMode="DataGridExpandMode.Multiple"
                                            IsLoading="@estaCargandoGridTransaccionesSobres"
                                            RowExpand="@expandirTransaccionSobre"
                                            Data="@dataTransaccionesSobreDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Visible="false" Property="TransaccionSobreId" Title="ID" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="FechaTransaccionSobre" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="TipoTransaccion" Title="Tipo" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="CodigoSobre" Title="Codigo sobre" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="UsuarioTransaccion" Title="Usuario T." />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="UsuarioCuenta" Title="Usuario cuenta" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="Cuenta" Title="Cuenta" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="Banco" Width="10%" Title="Banco" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="Contenedor" Title="Contenedor" />
                                        <RadzenDataGridColumn TItem="Entities.TransaccionAValidarMonitor" Property="TotalAValidar" Title="Total a validar" FormatString="{0:C2}" TextAlign="TextAlign.Right" />
                                    </Columns>
                                    <Template Context="transaccionSobre">
                                        <RadzenDataGrid TItem="Entities.DetalleTransaccionAValidarMonitor"
                                                    @ref="@gridTransaccionSobreDetalles"
                                                    AllowFiltering="true"
                                                    AllowPaging="true"
                                                    IsLoading="@estaCargandoGridTransaccionSobreDetalles"
                                                    Data="@dataTransaccionSobreDetalles.Where(x => x.TransaccionSobreId==transaccionSobre.TransaccionSobreId)">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionAValidarMonitor" Visible="false" Property="TransaccionSobreDetalleId" Title="ID" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionAValidarMonitor" Property="FechaTransaccionSobreDetalle" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionAValidarMonitor" Property="Moneda" Title="Moneda" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionAValidarMonitor" Property="TipoValor" Title="Tipo valor" />
                                                <RadzenDataGridColumn TItem="Entities.DetalleTransaccionAValidarMonitor" Property="CantidadDeclarada" Title="Cantidad declarada" TextAlign="TextAlign.Right" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </Template>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="archive" Text="@MultilenguajeController.ObtenerTextoPorClave("EXISTENCIAS",dataLenguaje)">
                                <RadzenDataGrid TItem="Entities.ExistenciaValidada"
                                            @ref="@gridExistencias"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            IsLoading="@estaCargandoGridExistencias"
                                            Data="@dataExistenciasDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Entities.ExistenciaValidada" Property="Moneda" Title="Moneda" />
                                        <RadzenDataGridColumn TItem="Entities.ExistenciaValidada" Property="Denominacion" Title="Denominacion" />
                                        <RadzenDataGridColumn TItem="Entities.ExistenciaValidada" Property="ImagenDenominacion" Title="Imagen" TextAlign="TextAlign.Center">
                                            <Template Context="dataExistencia">
                                                <RadzenImage Path="@dataExistencia.ImagenDenominacion" style="width: 100px; border-radius: 8px;">
                                                </RadzenImage>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Entities.ExistenciaValidada" Property="CantidadValidada" TextAlign="TextAlign.Right" Title="Cantidad validada" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="mark_as_unread" Text="@MultilenguajeController.ObtenerTextoPorClave("EXISTENCIASAVALIDAR",dataLenguaje)">
                                <RadzenDataGrid TItem="DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado"
                                            @ref="@gridExistenciasAValidar"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            IsLoading="@estaCargandoGridExistenciasAValidar"
                                            Data="@dataExistenciasAValidarDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado" Property="Moneda" Title="Moneda" />
                                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado" Property="TipoValor" Title="Tipo valor" />
                                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado" Property="ValorDeclarado" FormatString="{0:C2}" TextAlign="TextAlign.Right" Title="Valor declarado" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="calculate" Text="@MultilenguajeController.ObtenerTextoPorClave("TOTALGENERAL",dataLenguaje)">
                                <RadzenDataGrid TItem="Entities.TotalGeneral"
                                            @ref="@gridTotalesGenerales"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            IsLoading="@estaCargandoGridTotalesGenerales"
                                            Data="@dataTotalesGeneralesDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Entities.TotalGeneral" Property="Moneda" Title="Moneda" />
                                        <RadzenDataGridColumn TItem="Entities.TotalGeneral" Property="TotalValidado" FormatString="{0:C2}" TextAlign="TextAlign.Right" Title="Total validado" />
                                        <RadzenDataGridColumn TItem="Entities.TotalGeneral" Property="TotalAValidar" FormatString="{0:C2}" TextAlign="TextAlign.Right" Title="Total a validar" />
                                        <RadzenDataGridColumn TItem="Entities.TotalGeneral" Property="Total" FormatString="{0:C2}" TextAlign="TextAlign.Right" Title="Total" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="settings_input_component" Text="@MultilenguajeController.ObtenerTextoPorClave("ANOMALIAS",dataLenguaje)">
                                <RadzenDataGrid TItem="Entities.Evento"
                                            @ref="@gridEventos"
                                            AllowFiltering="true"
                                            AllowPaging="true"
                                            IsLoading="@estaCargandoGridEventos"
                                            Data="@dataEventosDepositario.Where(x => x.DepositarioId==depositario.DepositarioId)">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Entities.Evento" Visible="false" Property="EventoID" Title="ID" />
                                        <RadzenDataGridColumn TItem="Entities.Evento" Property="FechaEvento" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                                        <RadzenDataGridColumn TItem="Entities.Evento" Property="TipoEvento" Title="Tipo evento" />
                                        <RadzenDataGridColumn TItem="Entities.Evento" Property="Mensaje" Title="Mensaje" />
                                        <RadzenDataGridColumn TItem="Entities.Evento" Property="Valor" Title="Valor" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </Template>
            </RadzenDataGrid>
        </ChildContent>
    </RadzenContent>
}

@code {
    //Datasets
    private List<Entities.DepositarioMonitor> dataDepositarios = new();
    private List<Entities.TransaccionValidadaMonitor> dataTransaccionesDepositario = new();
    private List<Entities.DetalleTransaccionValidadaMonitor> dataTransaccionDetalles = new();
    private List<Entities.TransaccionAValidarMonitor> dataTransaccionesSobreDepositario = new();
    private List<Entities.DetalleTransaccionAValidarMonitor> dataTransaccionSobreDetalles = new();
    private List<Entities.Evento> dataEventosDepositario = new List<Entities.Evento>();
    private List<Entities.ExistenciaValidada> dataExistenciasDepositario = new List<Entities.ExistenciaValidada>();
    private List<DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado> dataExistenciasAValidarDepositario = new List<DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado>();
    private List<DepositarioAdminWeb.Entities.Procedures.Dispositivo.ObtenerInformacionDepositario.Resultado> dataInformacionDepositario = new List<DepositarioAdminWeb.Entities.Procedures.Dispositivo.ObtenerInformacionDepositario.Resultado>();
    private List<Entities.TotalGeneral> dataTotalesGeneralesDepositario = new();
    private List<Entities.TextoLenguaje> dataLenguaje;

    //Variables para controles
    private RadzenDataGrid<Entities.TransaccionValidadaMonitor> gridTransacciones = new();
    private RadzenDataGrid<Entities.DepositarioMonitor> gridDepositarios = new();
    private RadzenDataGrid<Entities.DetalleTransaccionValidadaMonitor> gridTransaccionDetalles = new();
    private RadzenDataGrid<Entities.TransaccionAValidarMonitor> gridTransaccionesSobres = new();
    private RadzenDataGrid<Entities.DetalleTransaccionAValidarMonitor> gridTransaccionSobreDetalles = new();
    private RadzenDataGrid<Entities.Evento> gridEventos = new RadzenDataGrid<Entities.Evento>();
    private RadzenDataGrid<Entities.ExistenciaValidada> gridExistencias = new RadzenDataGrid<Entities.ExistenciaValidada>();
    private RadzenDataGrid<DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado> gridExistenciasAValidar = new RadzenDataGrid<DepositarioAdminWeb.Entities.Procedures.Operacion.ObtenerExistenciasAValidarPorDepositario.Resultado>();
    private RadzenDataGrid<Entities.TotalGeneral> gridTotalesGenerales = new RadzenDataGrid<Entities.TotalGeneral>();
    private RadzenCard cardInformacionDepositario = new RadzenCard();
    private bool estaCargandoGridExistencias = false;
    private bool estaCargandoGridDepositarios = false;
    private bool estaCargandoGridTransacciones = false;
    private bool estaCargandoGridTransaccionDetalles = false;
    private bool estaCargandoGridTransaccionSobreDetalles = false;
    private bool estaCargandoGridTransaccionesSobres = false;
    private bool estaCargandoGridExistenciasAValidar = false;
    private bool estaCargandoGridTotalesGenerales = false;
    private bool estaCargandoGridEventos = false;

    //Variables auxiliares
    private Timer timerRecargaInformacion = new Timer();
    private List<Entities.DepositarioMonitor> rowsDepositariosExpandidas = new List<Entities.DepositarioMonitor>();
    Int64? userId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
            userId = await sessionStorage.GetItemAsync<Int64?>("Id");
            if (userId == null)
                NavManager.NavigateTo("login", true);
            estaCargandoGridDepositarios = true;
            StateHasChanged();
            await Task.Run(obtenerDepositarios);
            StateHasChanged();
        }
    }

    private void SetTimer()
    {
        // Create a timer with a two second interval.
        timerRecargaInformacion = new System.Timers.Timer(10000);
        // Hook up the Elapsed event for the timer.
        timerRecargaInformacion.Elapsed += new ElapsedEventHandler(recargarInformacionDepositario);
        timerRecargaInformacion.AutoReset = true;
        timerRecargaInformacion.Enabled = true;
        timerRecargaInformacion.Start();
    }

    private async void recargarInformacionDepositario(Object source, ElapsedEventArgs e)
    {
        estaCargandoGridDepositarios = true;
        await Task.Run(obtenerDepositarios);
        //await InvokeAsync(StateHasChanged);
        //foreach (var item in rowsDepositariosExpandidas)
        //{
        //await InvokeAsync(StateHasChanged);
        //await InvokeAsync(gridDepositarios.Reload);
        //else
        //    await InvokeAsync(StateHasChanged);
        //}
    }

    private void obtenerDepositarios()
    {
        dataDepositarios = DepositarioController.ObtenerDepositarios(userId.Value);
        estaCargandoGridDepositarios = false;
    }

    protected async Task expandirDepositario(Entities.DepositarioMonitor args)
    {
        //rowsDepositariosExpandidas.RemoveAll(x => x.DepositarioId == args.DepositarioId);
        estaCargandoGridDepositarios = true;
        rowsDepositariosExpandidas.Add(args);
        await Task.Run(() => obtenerInformacionDepositario(args.DepositarioId));
        await Task.Run(() => obtenerTransaccionesPorDepositario(args.DepositarioId));
    }

    protected async Task colapsarDepositario(Entities.DepositarioMonitor args)
    {
        rowsDepositariosExpandidas.RemoveAll(x => x.DepositarioId == args.DepositarioId);
    }

    void depositarioRowRender(RowRenderEventArgs<Entities.DepositarioMonitor> args)
    {
        if (rowsDepositariosExpandidas.Where(x => x.DepositarioId == args.Data.DepositarioId).ToList().Count > 0)
        {
            args.Attributes.Add("class", "row-highlight");
        }
        else
        {
            args.Attributes.Add("class", "rz-datatable-even");
        }
    }

    private void obtenerInformacionDepositario(Int64 pDepositarioId)
    {
        dataInformacionDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataInformacionDepositario.Add(DepositarioController.ObtenerInformacionDepositario(pDepositarioId));
    }

    private void obtenerTransaccionesPorDepositario(Int64 pDepositarioId)
    {
        dataTransaccionesDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataTransaccionesDepositario.AddRange(TransaccionController.ObtenerTransaccionesValidadasMonitor(pDepositarioId));
        estaCargandoGridDepositarios = false;
        estaCargandoGridTransacciones = false;
    }

    private void obtenerTransaccionesSobrePorDepositario(Int64 pDepositarioId)
    {
        dataTransaccionesSobreDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataTransaccionesSobreDepositario.AddRange(TransaccionController.ObtenerTransaccionesAValidarMonitor(pDepositarioId));
        estaCargandoGridTransaccionesSobres = false;
    }

    private void obtenerExistenciasPorDepositario(Int64 pDepositarioId)
    {
        dataExistenciasDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataExistenciasDepositario.AddRange(TransaccionController.ObtenerExistenciasValidadasPorDepositario(pDepositarioId));
        estaCargandoGridExistencias = false;
    }

    private void obtenerExistenciasAValidarPorDepositario(Int64 pDepositarioId)
    {
        dataExistenciasAValidarDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataExistenciasAValidarDepositario.AddRange(TransaccionController.ObtenerExistenciasAValidarPorDepositario(pDepositarioId));
        estaCargandoGridExistenciasAValidar = false;
    }

    private void obtenerTotalesGeneralesPorDepositario(Int64 pDepositarioId)
    {
        dataTotalesGeneralesDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataTotalesGeneralesDepositario.AddRange(TransaccionController.ObtenerTotalesGeneralesPorDepositarioSegunMoneda(pDepositarioId));
        estaCargandoGridTotalesGenerales = false;
    }

    private void obtenerEventosPorDepositario(Int64 pDepositarioId)
    {
        dataEventosDepositario.RemoveAll(x => x.DepositarioId == pDepositarioId);
        dataEventosDepositario.AddRange(TransaccionController.ObtenerEventosPorDepositario(pDepositarioId));
        estaCargandoGridEventos = false;
    }

    private async Task changeTabMonitorDepositario(int index, Entities.DepositarioMonitor depositario)
    {

        switch (index)
        {
            case 0:
                estaCargandoGridTransacciones = true;
                await Task.Run(() => obtenerTransaccionesPorDepositario(depositario.DepositarioId));
                break;
            case 1:
                estaCargandoGridTransaccionesSobres = true;
                await Task.Run(() => obtenerTransaccionesSobrePorDepositario(depositario.DepositarioId));
                break;
            case 2:
                estaCargandoGridExistencias = true;
                await Task.Run(() => obtenerExistenciasPorDepositario(depositario.DepositarioId));
                break;
            case 3:
                estaCargandoGridExistenciasAValidar = true;
                await Task.Run(() => obtenerExistenciasAValidarPorDepositario(depositario.DepositarioId));
                break;
            case 4:
                estaCargandoGridTotalesGenerales = true;
                await Task.Run(() => obtenerTotalesGeneralesPorDepositario(depositario.DepositarioId));
                break;
            case 5:
                estaCargandoGridEventos = true;
                await Task.Run(() => obtenerEventosPorDepositario(depositario.DepositarioId));
                break;
        }
    }

    protected async Task changeChkAgruparDepositarios(bool value)
    {
        if (!value)
        {
            gridDepositarios.Groups.Clear();
        }
        else
        {
            gridDepositarios.Groups.Clear();
            GroupDescriptor groupDescriptorEmpresa = new GroupDescriptor();
            groupDescriptorEmpresa.Property = "Empresa";
            groupDescriptorEmpresa.SortOrder = SortOrder.Ascending;
            groupDescriptorEmpresa.Title = "Empresa";

            GroupDescriptor groupDescriptorSucursal = new GroupDescriptor();
            groupDescriptorSucursal.Property = "Sucursal";
            groupDescriptorSucursal.SortOrder = SortOrder.Ascending;
            groupDescriptorSucursal.Title = "Sucursal";

            GroupDescriptor groupDescriptorSector = new GroupDescriptor();
            groupDescriptorSector.Property = "Sector";
            groupDescriptorSector.SortOrder = SortOrder.Ascending;
            groupDescriptorSector.Title = "Sector";

            gridDepositarios.Groups.Add(groupDescriptorEmpresa);
            gridDepositarios.Groups.Add(groupDescriptorSucursal);
            gridDepositarios.Groups.Add(groupDescriptorSector);
        }
    }

    protected async Task expandirTransaccion(Entities.TransaccionValidadaMonitor args)
    {
        estaCargandoGridTransaccionDetalles = true;
        await Task.Run(() => obtenerDetalleTransaccion(args.TransaccionId));
    }

    private void obtenerDetalleTransaccion(Int64 pTransaccionId)
    {
        dataTransaccionDetalles.RemoveAll(x => x.TransaccionId == pTransaccionId);
        dataTransaccionDetalles.AddRange(TransaccionController.ObtenerDetalleTransaccionValidadaMonitor(pTransaccionId));
        estaCargandoGridTransaccionDetalles = false;
    }

    protected async Task expandirTransaccionSobre(Entities.TransaccionAValidarMonitor args)
    {
        estaCargandoGridTransaccionSobreDetalles = true;
        await Task.Run(() => obtenerDetalleTransaccionSobre(args.TransaccionSobreId));
    }

    private void obtenerDetalleTransaccionSobre(Int64 pTransaccionSobreId)
    {
        dataTransaccionSobreDetalles.RemoveAll(x => x.TransaccionSobreId == pTransaccionSobreId);
        dataTransaccionSobreDetalles.AddRange(TransaccionController.ObtenerDetalleTransaccionAValidarMonitor(pTransaccionSobreId));
        estaCargandoGridTransaccionSobreDetalles = false;
    }

        }