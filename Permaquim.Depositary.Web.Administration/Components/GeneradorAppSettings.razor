@page "/GeneradorAppSettings"
@using Microsoft.AspNetCore.Mvc
@using Permaquim.Depositary.Web.Administration.Controllers
@using Newtonsoft.Json
@using System.Text
@using BlazorDownloadFile

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject DialogService DialogService

@inject IBlazorDownloadFileService BlazorDownloadFileService

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("GeneradorAppSettings", dataFunciones, "PuedeVisualizar"))
    {
        @if (Depositario_entities == null)
        {
            <div class="spinner" />
        }
        else
        {
            <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle ="BadgeStyle.Secondary" >
                <ChildContent>
                    <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("TITULO_GENERADOR_APP_SETTINGS",dataLenguaje)</h4>
                </ChildContent>
            </RadzenBadge>

            <hr>

            <RadzenDataGrid FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnPicking="true" PageSizeOptions="@(new int[]{10,20,50,100})" CellRender="@depositarioCellRender" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Depositario_entities" TItem="DispositivoEntities.DepositarioABM" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn Title=@MultilenguajeController.ObtenerTextoPorClave("GENERAR",dataLenguaje) TItem="DispositivoEntities.DepositarioABM" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="element">
                            <RadzenButton Icon="app_registration" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("DispositivoDepositario",dataFunciones,"PuedeAgregar") Class="m-1" Click="@(args => AbrirPopupGeneradorAppSettings(element))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.Nombre" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.Descripcion" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Title=@MultilenguajeController.ObtenerTextoPorClave("SECTORID",dataLenguaje) Property="Depositario.SectorId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_SectorId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @if (Sector_SectorId_entities.FirstOrDefault(c => c.Id == @context.Depositario.SectorId) != null)
                            {
                                <RadzenLabel Text="@Sector_SectorId_entities.FirstOrDefault( c => c.Id == @context.Depositario.SectorId).Nombre" Component="SectorId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="SectorId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_SectorId Data="@Sector_SectorId_filter" Change="OnSelectedFilter_SectorId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.NumeroSerie" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("NUMEROSERIE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.CodigoExterno" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("CODIGOEXTERNO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Title=@MultilenguajeController.ObtenerTextoPorClave("MODELOID",dataLenguaje) Property="Depositario.ModeloId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_ModeloId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @if (Modelo_ModeloId_entities.FirstOrDefault(c => c.Id == @context.Depositario.ModeloId) != null)
                            {
                                <RadzenLabel Text="@Modelo_ModeloId_entities.FirstOrDefault( c => c.Id == @context.Depositario.ModeloId).Nombre" Component="ModeloId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="ModeloId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_ModeloId Data="@Modelo_ModeloId_filter" Change="OnSelectedFilter_ModeloId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.Habilitado" Filterable="true" FilterValue="@Habilitado_filter" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="true">
                        <Template Context="data">
                            <RadzenCheckBox TValue="bool" Value=@data.Depositario.Habilitado Disabled="true">
                            </RadzenCheckBox>
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <div>
                                @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                            </div>
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="MensajeValidacion" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("MENSAJEVALIDACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="Depositario.UsuarioCreacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.Depositario.UsuarioCreacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="Depositario.UsuarioModificacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.Depositario.UsuarioModificacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DispositivoEntities.DepositarioABM" Property="Depositario.FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <div class="spinner" />
}


@code {

    private enum TiposAutenticacion
    {
        Integrada,
        SQL
    }

    public class TipoAutenticacionBaseDatos
    {
        public string Nombre { get; set; }
        public int Id { get; set; }
    }

    public class ArchivoAppSettings
    {
        public ClaveAppSettings AppSettings { get; set; }
    }

    public class ClaveAppSettings
    {
        public string AdoNetAssemblyName { get; set; }
        public string AdoNetCommandTimeOut { get; set; }
        public string AdoNetCommandTypeName { get; set; }
        public string AdoNetConnectionTypeName { get; set; }
        public string ConnectionString { get; set; }
        public string ParameterPrefix { get; set; }
        public string PkFunction { get; set; }
        public string PasswordKey { get; set; }
        public string CodigoDepositario { get; set; }
        public string WebApiUrl { get; set; }

        public ClaveAppSettings()
        {
            AdoNetAssemblyName = "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
            AdoNetCommandTimeOut = "0";
            AdoNetCommandTypeName = "System.Data.SqlClient.SqlCommand";
            AdoNetConnectionTypeName = "System.Data.SqlClient.SqlConnection";
            ParameterPrefix = "0";
            PkFunction = "SET @newId = SCOPE_IDENTITY()";
        }
    }

    public class GeneracionAppSettings
    {
        public string CodigoDepositario { get; set; }
        public int? TipoAutenticacionBaseDatos { get; set; }
        public string UsuarioSQL { get; set; }
        public string ContraseñaSQL { get; set; }
        public string ServidorBaseDatos { get; set; }
        public string NombreBaseDatos { get; set; }
        public string PasswordKey { get; set; }
        public string WebApiUrl { get; set; }

        public GeneracionAppSettings()
        {
            TipoAutenticacionBaseDatos = null;
            ContraseñaSQL = "";
        }
    }

    GeneracionAppSettings generacionAppSettings = new();

    List<TipoAutenticacionBaseDatos> tipoAutenticacionBaseDatos = new();

    private List<DispositivoEntities.DepositarioABM> Depositario_entities = null;

    private List<Entities.TextoLenguaje> dataLenguaje;

    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    private List<SeguridadEntities.FuncionRol> dataFunciones;

    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    private bool? Habilitado_filter;

    string colorDepositarioNoValido;

    private bool mostrarCredencialesConexion { get; set; } = false;


    /// <summary>
    /// Variables to handle Relation between Depositario.SectorId and Sector.Id
    /// </summary>
    private Depositary.Entities.Tables.Directorio.Sector Sector_SectorId_entity = new();
    private List<Depositary.Entities.Tables.Directorio.Sector>? Sector_SectorId_entities;
    private List<Depositary.Entities.Tables.Directorio.Sector> Sector_SectorId_filter;
    private IEnumerable<Int64> selectedFilter_SectorId;

    /// <summary>
    /// Variables to handle Relation between Depositario.ModeloId and Modelo.Id
    /// </summary>
    private Depositary.Entities.Tables.Dispositivo.Modelo Modelo_ModeloId_entity = new();
    private List<Depositary.Entities.Tables.Dispositivo.Modelo>? Modelo_ModeloId_entities;
    private List<Depositary.Entities.Tables.Dispositivo.Modelo> Modelo_ModeloId_filter;
    private IEnumerable<Int64> selectedFilter_ModeloId;

    /// <summary>
    /// Variables to handle Relation between Depositario.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between Depositario.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);

        AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "GeneradorAppSettings", "", dataUsuario.Id);

        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        colorDepositarioNoValido = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorRowDepositarioNoValido", true);

        //Si no se cargo un estilo para marcar a un depositario que no pasa las validaciones entonces le seteamos rojo.
        if (colorDepositarioNoValido == "")
            colorDepositarioNoValido = "red";

        colorDepositarioNoValido += " !important";

        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(ObtenerDepositarios);
        await Task.Run(LoadTypesData);
    }

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void ObtenerDepositarios()
    {
        Depositary.Business.Tables.Dispositivo.Depositario entity = new();
        entity.Items();

        if (entity.Result.Count > 0)
        {
            Depositario_entities = new();
            foreach (var row in entity.Result)
            {
                DispositivoEntities.DepositarioABM depositarioABM = new();
                depositarioABM.Depositario = row;
                depositarioABM.MensajeValidacion = DepositarioController.ObtenerValidacionesDepositarioABM(row.Id, dataLenguaje);
                Depositario_entities.Add(depositarioABM);
            }
        }
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Directorio.Sector Sector_SectorId_local = new();
        Sector_SectorId_entities = Sector_SectorId_local.Items();
        Sector_SectorId_filter = Sector_SectorId_entities.Where(x => Depositario_entities.Select(x => x.Depositario.SectorId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Dispositivo.Modelo Modelo_ModeloId_local = new();
        Modelo_ModeloId_entities = Modelo_ModeloId_local.Items();
        Modelo_ModeloId_filter = Modelo_ModeloId_entities.Where(x => Depositario_entities.Select(x => x.Depositario.ModeloId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => Depositario_entities.Select(x => x.Depositario.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => Depositario_entities.Select(x => x.Depositario.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();

    }

    #endregion


    #region Popup generador

    async Task AbrirPopupGeneradorAppSettings(DispositivoEntities.DepositarioABM item)
    {
        if (tipoAutenticacionBaseDatos.Count == 0)
            await Task.Run(ObtenerTiposAutenticacionBaseDatos);
        mostrarCredencialesConexion = false;
        generacionAppSettings = new();
        generacionAppSettings.CodigoDepositario = item.Depositario.CodigoExterno;
        var result = await DialogService.OpenAsync("Generar AppSettings para depositario " + item.Depositario.Nombre, ds =>
    @<div>
        <RadzenTemplateForm TItem="GeneracionAppSettings" Data="@generacionAppSettings" @bind-Value="generacionAppSettings" Submit="GenerarAppSettings">
            <ChildContent>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3" style="font-weight:bold">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("SERVIDORBASEDATOS",dataLenguaje) Component="ServidorBaseDatos" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-auto">
                        <RadzenTextBox style="display: block" @bind-Value="@(generacionAppSettings.ServidorBaseDatos)" Name="ServidorBaseDatos">
                        </RadzenTextBox>
                        <RadzenRequiredValidator Component="ServidorBaseDatos" Text="ServidorBaseDatos is required" Style="position: absolute">
                        </RadzenRequiredValidator>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3" style="font-weight:bold">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBREBASEDATOS",dataLenguaje) Component="NombreBaseDatos" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-auto">
                        <RadzenTextBox style="display: block" @bind-Value="@(generacionAppSettings.NombreBaseDatos)" Name="NombreBaseDatos">
                        </RadzenTextBox>
                        <RadzenRequiredValidator Component="NombreBaseDatos" Text="NombreBaseDatos is required" Style="position: absolute">
                        </RadzenRequiredValidator>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3" style="font-weight:bold">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("WEBAPIURL",dataLenguaje) Component="WebApiUrl" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-auto">
                        <RadzenTextBox style="display: block" @bind-Value="@(generacionAppSettings.WebApiUrl)" Name="WebApiUrl">
                        </RadzenTextBox>
                        <RadzenRequiredValidator Component="WebApiUrl" Text="WebApiUrl is required" Style="position: absolute">
                        </RadzenRequiredValidator>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3" style="font-weight:bold">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("PASSWORDKEY",dataLenguaje) Component="PasswordKey" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-auto">
                        <RadzenTextBox style="display: block" @bind-Value="@(generacionAppSettings.PasswordKey)" Name="PasswordKey">
                        </RadzenTextBox>
                        <RadzenRequiredValidator Component="PasswordKey" Text="PasswordKey is required" Style="position: absolute">
                        </RadzenRequiredValidator>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3" style="font-weight:bold">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOAUTENTICACION_BASEDATOS",dataLenguaje) Component="TipoAutenticacion" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-auto">
                        <RadzenDropDown AllowClear="true"
                                    TValue="int?" Class="w-100" Name="TipoAutenticacion" @bind-Value="@(generacionAppSettings.TipoAutenticacionBaseDatos)"
                                    Data=@tipoAutenticacionBaseDatos TextProperty="Nombre" ValueProperty="Id"
                                    Change=@(args => TipoAutenticacionBaseDatosChange(args)) />
                        <RadzenRequiredValidator Component="TipoAutenticacion" Text="TipoAutenticacion is required" Style="position: absolute">
                        </RadzenRequiredValidator>
                    </div>
                </div>
                @if (mostrarCredencialesConexion)
                {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3" style="font-weight:bold">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOSQL",dataLenguaje) Component="UsuarioSQL" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenTextBox style="display: block" @bind-Value="@(generacionAppSettings.UsuarioSQL)" Name="UsuarioSQL">
                                </RadzenTextBox>
                                <RadzenRequiredValidator Component="UsuarioSQL" Text="UsuarioSQL is required" Style="position: absolute">
                                </RadzenRequiredValidator>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3" style="font-weight:bold">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("CONTRASEÑASQL",dataLenguaje) Component="ContraseñaSQL" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenPassword @bind-Value="@(generacionAppSettings.ContraseñaSQL)" style="width: 100%" Name="ContraseñaSQL">
                                </RadzenPassword>
                                <RadzenRequiredValidator Component="ContraseñaSQL" Text="ContraseñaSQL is required" Style="position: absolute">
                                </RadzenRequiredValidator>
                            </div>
                        </div>
                }
                    <div class="row justify-content-center">
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="() => ds.Close(false)">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
        </div>
    );
    }

    private void ObtenerTiposAutenticacionBaseDatos()
    {
        tipoAutenticacionBaseDatos.Add(new TipoAutenticacionBaseDatos
            {
                Nombre = "Autentacion integrada",
                Id = (int)TiposAutenticacion.Integrada
            });
        tipoAutenticacionBaseDatos.Add(new TipoAutenticacionBaseDatos
            {
                Nombre = "Usuario SQL",
                Id = (int)TiposAutenticacion.SQL
            });
    }

    private async Task GenerarAppSettings()
    {
        ClaveAppSettings claveAppSettings = new();

        claveAppSettings.CodigoDepositario = Cryptography.Encrypt(generacionAppSettings.CodigoDepositario, generacionAppSettings.PasswordKey);
        claveAppSettings.WebApiUrl = generacionAppSettings.WebApiUrl;
        claveAppSettings.PasswordKey = generacionAppSettings.PasswordKey;

        string ConnectionStringSinEncriptar = "";
        string InicioConnectionString = "Data Source=" + generacionAppSettings.ServidorBaseDatos + ";Initial Catalog=" + generacionAppSettings.NombreBaseDatos + ";";
        switch (generacionAppSettings.TipoAutenticacionBaseDatos)
        {
            case (int)TiposAutenticacion.Integrada:
                ConnectionStringSinEncriptar = InicioConnectionString + "Integrated Security=SSPI;Persist Security Info=False;Encrypt=false;TrustServerCertificate=true";
                break;
            case (int)TiposAutenticacion.SQL:
                ConnectionStringSinEncriptar = InicioConnectionString + "User ID=" + generacionAppSettings.UsuarioSQL + " Password=" + generacionAppSettings.ContraseñaSQL;
                break;
        }

        claveAppSettings.ConnectionString = Cryptography.Encrypt(ConnectionStringSinEncriptar, generacionAppSettings.PasswordKey);

        ArchivoAppSettings archivoAppSettings = new();
        archivoAppSettings.AppSettings = claveAppSettings;

        string jsonAppSettings = JsonConvert.SerializeObject(archivoAppSettings);

        if (jsonAppSettings != "")
        {
            //FileController fileController = new();
            //fileController.DescargarArchivo(jsonAppSettings, "appSettings.json");
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(jsonAppSettings);

            var stream = new System.IO.MemoryStream(bytes);

            BlazorDownloadFileService.DownloadFile("appSettings.json", stream, "text/json");

        }
    }

    #endregion

    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion

    #region Selection events

    void depositarioCellRender(DataGridCellRenderEventArgs<DispositivoEntities.DepositarioABM>
    args)
    {
        if (args.Data.MensajeValidacion != "")
        {
            args.Attributes.Add("class", "row-depositarioNoValido");

        }
        else
        {
            if (!args.Data.Depositario.Habilitado)
                args.Attributes.Add("class", "row-highlight-disabled");
            else
                args.Attributes.Add("class", "rz-datatable-even");
        }
    }

    private void TipoAutenticacionBaseDatosChange(object item)
    {
        switch (item)
        {
            case (int)TiposAutenticacion.Integrada:
                mostrarCredencialesConexion = false;
                break;
            case (int)TiposAutenticacion.SQL:
                mostrarCredencialesConexion = true;
                break;
            default:
                mostrarCredencialesConexion = false;
                break;
        }
        DialogService.Refresh();
    }

    private void OnSelectedFilter_SectorId_Changed(object value)
    {
        if (selectedFilter_SectorId != null && !selectedFilter_SectorId.Any())
        {
            selectedFilter_SectorId = null;
        }
    }

    private void OnSelectedFilter_ModeloId_Changed(object value)
    {
        if (selectedFilter_ModeloId != null && !selectedFilter_ModeloId.Any())
        {
            selectedFilter_ModeloId = null;
        }
    }

    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    #endregion

    }

<style>
    .row-depositarioNoValido {
        background-color: @colorDepositarioNoValido;
    }
</style>
