@page "/Dashboard"
@layout MainLayout

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@using Permaquim.Depositary.Web.Administration.Controllers;
@using Radzen
@using Radzen.Blazor
@using System.Timers;


@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("Dashboard", dataFunciones, "PuedeVisualizar"))
    {
        <RadzenContent Container="main">
            <ChildContent>
                <RadzenIcon Icon="assessment">
                </RadzenIcon>
                <div class="row">
                    <div class="col-8 align-items-left d-flex">
                        <RadzenHeading Size="H1" style="display: inline-block; vertical-align:middle" Text="Dashboard depositario">
                        </RadzenHeading>
                    </div>
                    <div class="col-4 align-items-right d-flex" style="margin-top:0.5%">
                        @if (dataEmpresasAccesibles != null)
                        {
                            if (dataEmpresasAccesibles.Count > 0)
                            {
                                <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectAllText="Todos"
                                @bind-Value=@empresasSeleccionadas Multiple="true" SelectedItemsText="Items seleccionados" Placeholder="Seleccione empresas" Data=@dataEmpresasAccesibles TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                Change=@(args => OnChangeEmpresa(args)) Disabled=@estaCargando Class="w-100" />
                            }
                        }
                    </div>
                </div>
                @if (estaCargando)
                {
                    <div class="spinner"></div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12 col-xl-3 col-lg-6">

                            <RadzenCard style="margin-bottom: 16px">
                                <ChildContent>
                                    <div class="row">
                                        <div class="col-4 align-items-center d-flex">
                                            <RadzenIcon Icon="attach_money" style="background-color: #68d5c8; font-size: 48px; height: 64px; width: 64px">
                                            </RadzenIcon>
                                        </div>
                                        <div class="col-sm-8">
                                            <RadzenHeading Size="H4" style="margin-bottom: 0px; text-align: right" Text="Transacciones">
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: #88989b; font-size: 12px; margin-bottom: 0px; text-align: right" Text="DEL DIA">
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: #68d5c8; font-size: 24px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadTransaccionesAlDia">
                                            </RadzenHeading>
                                        </div>
                                    </div>
                                </ChildContent>
                            </RadzenCard>
                        </div>
                        <div class="col-md-12 col-xl-3 col-lg-6">
                            <RadzenCard style="margin-bottom: 16px">
                                <ChildContent>
                                    <div class="row">
                                        <div class="col-4 align-items-center d-flex">
                                            <RadzenIcon Icon="no_backpack" style="background-color: #f9777f; font-size: 48px; height: 64px; width: 64px">
                                            </RadzenIcon>
                                        </div>
                                        <div class="col-sm-8">
                                            <RadzenHeading Size="H4" style="margin-bottom: 0px; text-align: right" Text="Depositarios">
                                                x|
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: #88989b; font-size: 12px; margin-bottom: 0px; text-align: right" Text="CON BOLSA CASI LLENA">
                                            </RadzenHeading>
                                            @{
                                                int parseVar;
                                                if (!int.TryParse(cantidadDepositariosBolsaCasiLlena, out parseVar))
                                                {
                                                    <RadzenHeading Size="H4" style="color: red; font-size: 14px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosBolsaCasiLlena">
                                                    </RadzenHeading>
                                                }
                                                else
                                                {
                                                    <RadzenHeading Size="H4" style="color: #f9777f; font-size: 24px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosBolsaCasiLlena">
                                                    </RadzenHeading>
                                                }
                                            }
                                        </div>
                                    </div>
                                </ChildContent>
                            </RadzenCard>
                        </div>
                        <div class="col-md-12 col-xl-3 col-lg-6">
                            <RadzenCard style="margin-bottom: 16px">
                                <ChildContent>
                                    <div class="row">
                                        <div class="col-4 align-items-center d-flex">
                                            <RadzenIcon Icon="computer" style="background-color: #3dd311; font-size: 48px; height: 64px; width: 64px">
                                            </RadzenIcon>
                                        </div>
                                        <div class="col-sm-8">
                                            <RadzenHeading Size="H4" style="margin-bottom: 0px; text-align: right" Text="Depositarios">
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: #88989b; font-size: 12px; margin-bottom: 0px; text-align: right" Text="EN LINEA / FUERA DE LINEA">
                                            </RadzenHeading>
                                            @{
                                                int parseVar;
                                                @if (!int.TryParse(cantidadDepositariosEnLinea, out parseVar) || !int.TryParse(cantidadDepositariosFueraLinea, out parseVar))
                                                {
                                                    if (!int.TryParse(cantidadDepositariosEnLinea, out parseVar))
                                                    {
                                                        <RadzenHeading Size="H4" style="color: red; font-size: 14px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosEnLinea">
                                                        </RadzenHeading>
                                                    }
                                                    else
                                                    {
                                                        <RadzenHeading Size="H4" style="color: red; font-size: 14px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosBolsaCasiLlena">
                                                        </RadzenHeading>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="row">
                                                        <div class="col-4 align-items-center d-flex" style="margin-left:10%">
                                                            <RadzenHeading Size="H4" style="color: #3dd311; font-size: 24px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosEnLinea">
                                                            </RadzenHeading>
                                                        </div>
                                                        <div class="col-4 align-items-center d-flex" style="margin-left:10%">
                                                            <RadzenHeading Size="H4" style="color:red ; font-size: 24px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosFueraLinea">
                                                            </RadzenHeading>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </ChildContent>
                            </RadzenCard>
                        </div>
                        <div class="col-md-12 col-xl-3 col-lg-6">
                            <RadzenCard style="margin-bottom: 16px">
                                <ChildContent>
                                    <div class="row">
                                        <div class="col-4 align-items-center d-flex">
                                            <RadzenIcon Icon="home_repair_service" style="background-color: darkred; font-size: 48px; height: 64px; width: 64px">
                                            </RadzenIcon>
                                        </div>
                                        <div class="col-sm-8">
                                            <RadzenHeading Size="H4" style="margin-bottom: 0px; text-align: right" Text="Depositarios">
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: #88989b; font-size: 12px; margin-bottom: 0px; text-align: right" Text="FUERA DE SERVICIO">
                                            </RadzenHeading>
                                            <RadzenHeading Size="H4" style="color: darkred; font-size: 24px; margin-bottom: 0px; margin-top: 13px; text-align: right" Text="@cantidadDepositariosFueraServicio">
                                            </RadzenHeading>
                                        </div>
                                    </div>
                                </ChildContent>
                            </RadzenCard>
                        </div>
                    </div>
                    <RadzenHeading Size="H2" Text="Carga de trabajo segun equipo">
                    </RadzenHeading>
                    <div class="row">
                        <div class="col-md-12 col-lg-6 col-xl-6">
                            <RadzenCard>
                                <ChildContent>
                                    <RadzenHeading Size="H3" style="margin-bottom: 0px; text-align: center; font-weight:bold" Text="Depositarios con mayor carga de transacciones">
                                    </RadzenHeading>
                                    @if (dataCargaDepositarios != null)
                                    {
                                        if (dataCargaDepositarios.Count > 0)
                                        {
                                            <RadzenChart ColorScheme="ColorScheme.Pastel">
                                                <RadzenValueAxis Min="0" />
                                                @foreach (var item in dataCargaDepositarios)
                                                {
                                                    var nombreColumna = item.FirstOrDefault().NombreDepositarioConCantidad;
                                                    <RadzenColumnSeries Data="@item" CategoryProperty="NombreDepositario" Title="@nombreColumna" LineType="LineType.Dashed" ValueProperty="CantidadTransacciones">
                                                        <TooltipTemplate>
                                                            <div style="text-align:center">
                                                                <b>
                                                                    @context.NombreDepositario
                                                                    <br>
                                                                    Cantidad transacciones: @context.CantidadTransacciones
                                                                </b>
                                                            </div>
                                                        </TooltipTemplate>
                                                    </RadzenColumnSeries>
                                                }
                                                <RadzenColumnOptions Margin="1" Radius="5" />
                                                <RadzenCategoryAxis Visible="false" Padding="40" />
                                            </RadzenChart>
                                        }
                                    }
                                </ChildContent>
                            </RadzenCard>
                        </div>
                        <div class="col-md-12 col-lg-6 col-xl-6">
                            <RadzenCard>
                                <ChildContent>
                                    <RadzenHeading Size="H3" style="margin-bottom: 0px; text-align: center; font-weight:bold" Text="Cantidad de transacciones por tipo">
                                    </RadzenHeading>
                                    @if (dataCantidadTipoTransacciones != null)
                                    {
                                        if (dataCantidadTipoTransacciones.Count > 0)
                                        {
                                            <RadzenChart ColorScheme="ColorScheme.Pastel">
                                                <RadzenPieSeries Data="@dataCantidadTipoTransacciones" Title="Cantidad" CategoryProperty="NombreTipoTransaccionConPorcentaje" ValueProperty="CantidadTipoTransaccion">
                                                    <TooltipTemplate>
                                                        <div style="text-align:center">
                                                            <b>
                                                                @context.NombreTipoTransaccion
                                                                <br>
                                                                Cantidad transacciones: @context.CantidadTipoTransaccion
                                                            </b>
                                                        </div>
                                                    </TooltipTemplate>
                                                </RadzenPieSeries>
                                            </RadzenChart>
                                        }
                                    }
                                </ChildContent>
                            </RadzenCard>
                        </div>
                    </div>
                }
            </ChildContent>
        </RadzenContent>
    }
    else
    {
        <p>No tiene permisos para visualizar esta información.</p>
    }
}
else
{
    <div class="spinner"></div>
}

@code {
    private bool estaCargando { get; set; }
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Entities.TextoLenguaje> dataLenguaje;
    private string cantidadTransaccionesAlDia { get; set; }
    private string cantidadDepositariosBolsaCasiLlena { get; set; }
    private string cantidadDepositariosEnLinea { get; set; }
    private string cantidadDepositariosFueraLinea { get; set; }
    private string cantidadDepositariosFueraServicio { get; set; }
    private List<List<Entities.DepositarioCarga>> dataCargaDepositarios { get; set; }
    private List<Entities.TransaccionTipoCantidad> dataCantidadTipoTransacciones { get; set; }
    private List<DirectorioEntities.Empresa> dataEmpresasAccesibles { get; set; }
    private IEnumerable<Int64> empresasSeleccionadas = new Int64[] { };
    private int tiempoRecargaSegundos { get; set; } = 10;
    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    private List<SeguridadEntities.FuncionRol> dataFunciones;
    //Variables auxiliares
    private Timer timerRecargaInformacion = new Timer();

    protected override void OnInitialized()
    {
        estaCargando = true;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
            dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
            if (dataUsuario == null)
                NavManager.NavigateTo("login", true);

            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "Dashboard", "", dataUsuario.Id);

            usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
            dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);


            //En funcion del usuario que consulta obtenemos el perfil de visualizacion y luego las empresas a las que puede acceder
            await Task.Run(ObtenerListadoEmpresasPorPerfil);
            await Task.Run(obtenerParametrosConfiguracion);
            //SetTimer();
            obtenerInformacion();
            StateHasChanged();
        }
    }

    private void obtenerParametrosConfiguracion()
    {
        int tiempoRecarga;
        string tiempoRecargaString = "";
        //Obtenemos el tiempo de recarga en segundos de la configuracion
        tiempoRecargaString = AplicacionController.ObtenerConfiguracionEmpresa("TIEMPO_RECARGA_DASHBOARD_SEGUNDOS", dataUsuario.EmpresaId);
        if (int.TryParse(tiempoRecargaString, out tiempoRecarga))
        {
            //Si el tiempo parametrizado es mayor al tiempo default definido por codigo entonces pisamos el valor.
            if (tiempoRecarga > tiempoRecargaSegundos)
                tiempoRecargaSegundos = tiempoRecarga;
        }
    }

    private void SetTimer()
    {
        //Creamos un timer con el tiempo parametrizado.
        timerRecargaInformacion = new System.Timers.Timer(tiempoRecargaSegundos * 1000);
        timerRecargaInformacion.Elapsed += new ElapsedEventHandler(recargarInformacion);
        timerRecargaInformacion.AutoReset = true;
        timerRecargaInformacion.Enabled = true;
        timerRecargaInformacion.Start();
    }

    private void recargarInformacion(Object source, ElapsedEventArgs e)
    {
        //Se deshabilita el timer hasta que se complete la operacion.
        timerRecargaInformacion.Enabled = false;
        obtenerInformacion();
        timerRecargaInformacion.Enabled = true;
    }

    private async void obtenerInformacion()
    {
        if (empresasSeleccionadas != null)
        {
            if (empresasSeleccionadas.Count() > 0)
            {
                await Task.Run(obtenerCantidadTransaccionesAlDia);
                await Task.Run(obtenerCantidadDepositariosBolsaCasiLlena);
                await Task.Run(obtenerCantidadDepositariosEnLinea);
                await Task.Run(obtenerCantidadDepositariosFueraLinea);
                await Task.Run(obtenerCantidadDepositariosFueraServicio);
                await Task.Run(obtenerDepositariosConMayorCarga);
                await Task.Run(obtenerCantidadTransaccionesPorTipo);
            }
        }
        estaCargando = false;
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void ObtenerListadoEmpresasPorPerfil()
    {
        dataEmpresasAccesibles = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        //Dejo todas las empresas marcadas
        if (dataEmpresasAccesibles.Count > 0)
        {
            List<Int64> empresas = new();
            foreach (var empresa in dataEmpresasAccesibles)
            {
                empresas.Add(empresa.EmpresaId);
            }
            empresasSeleccionadas = empresas.AsEnumerable();
        }
    }

    void OnChangeEmpresa(object value)
    {
        reiniciarDataSets();
        estaCargando = true;
        StateHasChanged();
        obtenerInformacion();
    }

    void reiniciarDataSets()
    {
        cantidadTransaccionesAlDia = "";
        cantidadDepositariosBolsaCasiLlena = "";
        cantidadDepositariosEnLinea = "";
        cantidadDepositariosFueraLinea = "";
        cantidadDepositariosFueraServicio = "";
        dataCargaDepositarios = new();
        dataCantidadTipoTransacciones = new();

    }

    private void obtenerCantidadTransaccionesAlDia()
    {
        cantidadTransaccionesAlDia = OperacionController.ObtenerCantidadTransaccionesPorDia(DateTime.Now.Date, empresasSeleccionadas.ToList());
    }

    private void obtenerCantidadDepositariosBolsaCasiLlena()
    {
        cantidadDepositariosBolsaCasiLlena = DepositarioController.ObtenerCantidadDepositariosConBolsaCasiLlena(empresasSeleccionadas.ToList(), dataUsuario.EmpresaId);
    }

    private void obtenerCantidadDepositariosEnLinea()
    {
        cantidadDepositariosEnLinea = DepositarioController.ObtenerCantidadDepositariosEnLinea(empresasSeleccionadas.ToList(), dataUsuario.EmpresaId);
    }

    private void obtenerCantidadDepositariosFueraLinea()
    {
        cantidadDepositariosFueraLinea = DepositarioController.ObtenerCantidadDepositariosFueraLinea(empresasSeleccionadas.ToList(), dataUsuario.EmpresaId);
    }

    private void obtenerCantidadDepositariosFueraServicio()
    {
        cantidadDepositariosFueraServicio = DepositarioController.ObtenerCantidadDepositariosFueraServicio(empresasSeleccionadas.ToList());
    }

    private void obtenerDepositariosConMayorCarga()
    {
        dataCargaDepositarios = DepositarioController.ObtenerDepositariosConMayorCarga(empresasSeleccionadas.ToList());
    }

    private void obtenerCantidadTransaccionesPorTipo()
    {
        dataCantidadTipoTransacciones = OperacionController.ObtenerCantidadTipoTransacciones(empresasSeleccionadas.ToList());
    }
}