@page "/login"
@layout LoginLayout
@inherits Permaquim.Depositary.Web.Administration.Components.LoginComponent

@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NavigationManager NavManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<Login> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<RadzenContent Container="main">
    <ChildContent>
        <RadzenTemplateForm TItem="LoginForm" Data="@loginForm" Submit="@LoginUser">
            <ChildContent>
                <RadzenLabel Component="Username" style="display: block; margin-top: 16px" Text="Username">
                </RadzenLabel>
                <RadzenTextBox @bind-Value="@(loginForm.Username)" style="width: 100%" Name="Username">
                </RadzenTextBox>
                <RadzenRequiredValidator Component="Username" Text="Username is required">
                </RadzenRequiredValidator>
                <RadzenLabel Component="Password" style="display: block; margin-top: 16px" Text="Password">
                </RadzenLabel>
                <RadzenPassword @bind-Value="@(loginForm.Password)" style="width: 100%" Name="Password">
                </RadzenPassword>
                <RadzenRequiredValidator Component="Password" Text="Password is required">
                </RadzenRequiredValidator>
                <RadzenButton ButtonType="ButtonType.Submit" style="display: block; margin-top: 16px; width: 100%; background-color: #4158ff" Text="Login">
                </RadzenButton>
            </ChildContent>
        </RadzenTemplateForm>
    </ChildContent>
</RadzenContent>

@code
{
    private LoginForm loginForm = new LoginForm();
    private List<Entities.TextoLenguaje> dataLenguaje;

    //Datasets
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario? dataUsuario = new();
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Rol? usuarioRol = new();
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();
    private List<Entities.Menu> dataMenues = new();
    private List<Entities.FuncionRol> dataFunciones = new();

    protected async void LoginUser()
    {
        dataUsuario = SeguridadController.ObtenerUsuario(loginForm.Username, loginForm.Password);
        if (dataUsuario == null)
        {
            //Si no encontro usuario cargamos los textos default.
            dataLenguaje = MultilenguajeController.ObtenerTextosLenguaje(-1);
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje), Duration = 3000 });
        }
        else
        {
            usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
            dataLenguaje = MultilenguajeController.ObtenerTextosLenguaje(dataUsuario.Id);
            dataEsquemaDetalle = EstiloController.ObtenerEsquemaDetalles(dataUsuario.Id);
            if (usuarioRol == null)
            {
                NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_NOROLES", dataLenguaje), Duration = 3000 });
            }
            else
            {
                //Si se encontro un rol buscamos todos los menues a los que tiene acceso ese rol
                dataMenues = SeguridadController.ObtenerMenuesPorRol(usuarioRol.Id);

                //Si se encontro un rol buscamos todos las funciones que puede acceder con ese rol
                dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);

                await sessionStorage.SetItemAsync("Id", dataUsuario.Id);
                await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
                await sessionStorage.SetItemAsync("Nickname", dataUsuario.NickName);
                await sessionStorage.SetItemAsync("NombreUsuario", dataUsuario.Nombre);
                await sessionStorage.SetItemAsync("ApellidoUsuario", dataUsuario.Apellido);
                await sessionStorage.SetItemAsync("AvatarUsuario", dataUsuario.Avatar);
                await sessionStorage.SetItemAsync("LenguajeId", dataUsuario.LenguajeId);
                await sessionStorage.SetItemAsync("DataLenguaje", dataLenguaje);
                await sessionStorage.SetItemAsync("DataEsquemaDetalle", dataEsquemaDetalle);
                await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
                await sessionStorage.SetItemAsync("DataMenues", dataMenues);

                NavManager.NavigateTo("Dashboard", true);
            }
        }
    }
}