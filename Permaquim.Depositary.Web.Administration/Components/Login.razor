@page "/login"
@layout LoginLayout

@using Permaquim.Depositary.UI.Desktop.Controllers
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NavigationManager NavManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<Login> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NotificationService NotificationService

<RadzenContent Container="main">
    <ChildContent>
        <RadzenTemplateForm TItem="LoginForm" Data="@loginForm" Submit="@LoginUser">
            <ChildContent>
                @if (estaCargando)
                {
                    <div class="spinnerCentrado"></div>
                }
                <RadzenLabel Component="Username" style="display: block; margin-top: 16px" Text="Username">
                </RadzenLabel>
                <RadzenTextBox Disabled="@estaCargando" @bind-Value="@(loginForm.Username)" style="width: 100%" Name="Username">
                </RadzenTextBox>
                <RadzenRequiredValidator Component="Username" Text="Username is required">
                </RadzenRequiredValidator>
                <RadzenLabel Component="Password" style="display: block; margin-top: 16px" Text="Password">
                </RadzenLabel>
                <RadzenPassword Disabled="@estaCargando" @bind-Value="@(loginForm.Password)" style="width: 100%" Name="Password">
                </RadzenPassword>
                <div style="text-align:right">
                    <RadzenLink Path="olvidoPassword" Visible Text="¿Olvido su clave?" />
                </div>
                <RadzenRequiredValidator Component="Password" Text="Password is required">
                </RadzenRequiredValidator>
                <RadzenButton ButtonType="ButtonType.Submit" Disabled="@estaCargando" style="display: block; margin-top: 16px; width: 100%; background-color: #4158ff" Text="Login">
                </RadzenButton>
            </ChildContent>
        </RadzenTemplateForm>
    </ChildContent>
</RadzenContent>

@code
{
    private LoginForm loginForm = new LoginForm();
    private List<Entities.TextoLenguaje> dataLenguaje;
    private bool estaCargando { get; set; }

    //Datasets
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = new();
    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();
    private List<SeguridadEntities.Menu> dataMenues = new();
    private List<SeguridadEntities.FuncionRol> dataFunciones = new();

    public class LoginForm
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    protected override void OnInitialized()
    {
        estaCargando = false;
        base.OnInitialized();
    }

    protected async void LoginUser()
    {
        estaCargando = true;
        StateHasChanged();
        dataUsuario = await Task.Run(() => SeguridadController.LoguearUsuario(loginForm.Username, loginForm.Password));
        if (dataUsuario == null)
        {
            //Si no encontro usuario cargamos los textos default.
            dataLenguaje = MultilenguajeController.ObtenerTextosLenguaje(-1);
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje), Duration = 3000 });
            AuditController.Log(Entities.AuditEntities.LogTypeEnum.Information,  MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje));
        }
        else
        {
            dataLenguaje = MultilenguajeController.ObtenerTextosLenguaje(dataUsuario.Id);

            //Si el usuario esta bloqueado damos aviso y no permitimos el ingreso
            if (dataUsuario.Bloqueado)
            {
                NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_BLOCKED_USER", dataLenguaje), Duration = 3000 });
                AuditController.Log(Entities.AuditEntities.LogTypeEnum.Information,  MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje));

            }
            else
            {
                if (dataUsuario.Password != Cryptography.Hash(loginForm.Password))
                    NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje), Duration = 3000 });
                    AuditController.Log(Entities.AuditEntities.LogTypeEnum.Information,  MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_INCORRECT_USERORPASSWORD", dataLenguaje));

                else
                {
                    if (dataUsuario.DebeCambiarPassword || dataUsuario.FechaExpiracion <= DateTime.Now)
                    {
                        NavManager.NavigateTo("cambioPasswordLogin/" + dataUsuario.NickName + "/" + dataUsuario.Id + "/" + dataUsuario.EmpresaId, true);
                    }
                    else
                    {
                        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
                        dataEsquemaDetalle = EstiloController.ObtenerEsquemaDetalles(dataUsuario.Id);
                        if (usuarioRol == null)
                        {
                            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), Detail = MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_NOROLES", dataLenguaje), Duration = 3000 });
                            AuditController.Log(Entities.AuditEntities.LogTypeEnum.Information,  MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR", dataLenguaje), MultilenguajeController.ObtenerTextoPorClave("LOGIN_ERROR_NOROLES", dataLenguaje));

                        }
                        else
                        {
                            //Si se encontro un rol buscamos todos los menues a los que tiene acceso ese rol
                            dataMenues = SeguridadController.ObtenerMenuesPorRol(usuarioRol.Id);

                            //Si se encontro un rol buscamos todos las funciones que puede acceder con ese rol
                            dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);

                            await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
                            await sessionStorage.SetItemAsync("DataUsuario", dataUsuario);
                            await sessionStorage.SetItemAsync("DataLenguaje", dataLenguaje);
                            await sessionStorage.SetItemAsync("DataEsquemaDetalle", dataEsquemaDetalle);
                            await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
                            await sessionStorage.SetItemAsync("DataMenues", dataMenues);

                            estaCargando = false;
                            StateHasChanged();

                            NavManager.NavigateTo("Dashboard", true);
                        }
                    }
                }
            }
        }
        estaCargando = false;
        StateHasChanged();
    }
}