@page "/TurnoAgendaTurnoCrud"
@using Permaquim.Depositary.Web.Administration.Controllers
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (estaProcesando)
{
    <div class="spinner"></div>
}

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("TurnoAgendaTurno", dataFunciones, "PuedeVisualizar"))
    {
        @if (AgendaTurno_entities == null)
        {
            <div class="spinner" />
        }
        else
        {
            switch (crudMode)
            {
                case CrudMode.Add:
                    <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Turno.AgendaTurno",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Delete:
                    <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadgeBorrar", false) BadgeStyle="BadgeStyle.Warning">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Turno.AgendaTurno",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Edit:
                    <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Turno.AgendaTurno",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.List:
                    <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <div>
                                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Turno.AgendaTurno",dataLenguaje)</h4>
                            </div>
                        </ChildContent>
                    </RadzenBadge>
                    break;
            }
            <hr>
            if (crudMode == CrudMode.List)
            {
                <RadzenDataGrid @bind-Settings="@GridSettings" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" CellRender="@AgendaTurnoCellRender" PageSizeOptions="@(new int[]{10,20,50,100})" FilterMode="FilterMode.Advanced" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)
                Data="@AgendaTurno_entities" TItem="Depositary.Entities.Tables.Turno.AgendaTurno" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" TextAlign="TextAlign.Center" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TemplateABM",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TemplateABM",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TemplateABM",dataCustomizacionPagina.AtributosColumnas)>
                            <HeaderTemplate>
                                <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("TurnoAgendaTurno",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                                </RadzenButton>
                            </HeaderTemplate>
                            <Template Context="element">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("TurnoAgendaTurno",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("TurnoAgendaTurno",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="Id" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Id",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Id",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Id",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Id",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Id",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Id",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Id",dataCustomizacionPagina.AtributosColumnas)>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="Nombre" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Nombre",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Nombre",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Nombre",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Nombre",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Nombre",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Nombre",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Nombre",dataCustomizacionPagina.AtributosColumnas)>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Title=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLETURNOID",dataLenguaje) Property="EsquemaDetalleTurnoId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_EsquemaDetalleTurnoId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("EsquemaDetalleTurnoId",dataCustomizacionPagina.AtributosColumnas)>
                            <Template>
                                @if (EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.FirstOrDefault(c => c.Id == @context.EsquemaDetalleTurnoId) != null)
                                {
                                    <RadzenLabel Text="@EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.FirstOrDefault( c => c.Id == @context.EsquemaDetalleTurnoId).Nombre" Component="EsquemaDetalleTurnoId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="EsquemaDetalleTurnoId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_EsquemaDetalleTurnoId Data="@EsquemaDetalleTurno_EsquemaDetalleTurnoId_filter" Change="OnSelectedFilter_EsquemaDetalleTurnoId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="Fecha" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHA",dataLenguaje) FormatString="{0:dd/MM/yyyy}" Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Fecha",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Fecha",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Fecha",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Fecha",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Fecha",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Fecha",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Fecha",dataCustomizacionPagina.AtributosColumnas)>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Title=@MultilenguajeController.ObtenerTextoPorClave("SECTORID",dataLenguaje) Property="SectorId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_SectorId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("SectorId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("SectorId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("SectorId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("SectorId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("SectorId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("SectorId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("SectorId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("SectorId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("SectorId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("SectorId",dataCustomizacionPagina.AtributosColumnas)>
                            <Template>
                                @if (Sector_SectorId_entities.FirstOrDefault(c => c.Id == @context.SectorId) != null)
                                {
                                    <RadzenLabel Text="@Sector_SectorId_entities.FirstOrDefault( c => c.Id == @context.SectorId).Nombre" Component="SectorId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="SectorId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_SectorId Data="@Sector_SectorId_filter" Change="OnSelectedFilter_SectorId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="Secuencia" Title=@MultilenguajeController.ObtenerTextoPorClave("SECUENCIA",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Secuencia",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Secuencia",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Secuencia",dataCustomizacionPagina.AtributosColumnas)>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                    if (usuario != null)
                                    {
                                        <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="FechaCreacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                    if (usuario != null)
                                    {
                                        <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="FechaModificacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Property="Habilitado" FilterValue="@Habilitado_filter" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Habilitado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Habilitado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Habilitado",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <div>
                                    @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                    <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                                </div>
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <hr>
            }
            else if (crudMode == CrudMode.Add)
            {
                <RadzenTemplateForm TItem="TurnoEntities.AgendaTurnoABM" Data="@agendaTurnoABM" @bind-Value="@agendaTurnoABM" Submit="Save">
                    <ChildContent>
                        <div style="margin-bottom: 1rem" class="row align-items-center">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-2">
                                <RadzenLabel Text="Esquema:" Component="esquemaDropDown" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenDropDown AllowClear="false" Name="esquemaDropDown" ValueChanged="OnSelected_EsquemaTurno_Changed" TValue="Int64?" Disabled="@estaProcesando"
                                Data=@dataEsquemaTurnos TextProperty="Nombre" ValueProperty="Id" />
                                <br>
                                <RadzenRequiredValidator Component="esquemaDropDown" Text="Esquema is required" Style="position: absolute; margin-top: -2%">
                                </RadzenRequiredValidator>
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Opera dias corridos:" Component="checkBoxDiasHabiles" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenCheckBox TriState="false" Disabled="true" @bind-Value=@ChkDiasCorridos Name="checkBoxDiasHabiles" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-2">
                                <RadzenLabel Text="Nombre:" Component="nombreAgenda" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenTextBox style="display: block" @bind-Value="@(agendaTurnoABM.NombreAgenda)" Disabled="@estaProcesando" Name="nombreAgenda">
                                </RadzenTextBox>
                                <RadzenRequiredValidator Component="nombreAgenda" Text="Nombre is required" Style="position: absolute;">
                                </RadzenRequiredValidator>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-2">
                                <RadzenLabel Text="Fecha desde:" Component="fechaDesdeDatePicker" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenDatePicker @bind-Value=@agendaTurnoABM.FechaDesde Max="@agendaTurnoABM.FechaHasta" Name="fechaDesdeDatePicker" Disabled="@estaProcesando" DateFormat="dd/MM/yyyy" Class="w-100" />
                                <RadzenCompareValidator Value="@agendaTurnoABM.FechaHasta" Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="La fecha desde debe ser menor o igual a la fecha hasta" Style="position: inherit" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-2">
                                <RadzenLabel Text="Fecha hasta:" Component="fechaHastaDatePicker" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenDatePicker @bind-Value=@agendaTurnoABM.FechaHasta Min="@agendaTurnoABM.FechaDesde" Name="fechaHastaDatePicker" Disabled="@estaProcesando" DateFormat="dd/MM/yyyy" Class="w-100" />
                                <RadzenCompareValidator Value="@agendaTurnoABM.FechaDesde" Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="La fecha hasta debe ser mayor o igual a la fecha desde" Style="position: inherit" />
                            </div>
                        </div>
                        <span style="font-weight:bold;align-self:center;">Seleccione las sucursales/sectores afectados:</span>
                        <div style="margin-bottom: 1rem" class="h-100">
                            <div style="align-self:center;background-color:beige;width:30%" class="col col-md-auto">
                                <RadzenTree AllowCheckChildren="@(!estaProcesando)" AllowCheckBoxes="true" @bind-CheckedValues="@nodosSeleccionados" Change="@changeArbolAgenda" Style="width: 100%; height: 300px" Data=@dataArbolAgenda>
                                    <RadzenTreeLevel Expanded=@(product => true) TextProperty="GrupoNombre" ChildrenProperty="Empresas" />
                                    <RadzenTreeLevel Expanded=@(product => true) TextProperty="EmpresaNombre" ChildrenProperty="Sucursales" />
                                    <RadzenTreeLevel Expanded=@(product => true) TextProperty="SucursalNombre" ChildrenProperty="Sectores" />
                                    <RadzenTreeLevel TextProperty="SectorNombre" HasChildren=@(product => false) />
                                </RadzenTree>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton Disabled="@estaProcesando" ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton Disabled="@estaProcesando" ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>

                <hr>
            }
            else if (crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
            {
                <RadzenTemplateForm TItem="Depositary.Entities.Tables.Turno.AgendaTurno" Data="@AgendaTurno_entity" @bind-Value="AgendaTurno_entity" Submit="(() => Task.Run(Save))" Visible="@(AgendaTurno_entity != null)">
                    <ChildContent>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(AgendaTurno_entity.Id)" Name="Id" Disabled="true">
                                </RadzenNumeric>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(AgendaTurno_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLETURNOID",dataLenguaje) Component="EsquemaDetalleTurnoId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                @if ((@EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Count > 0 && @EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.FirstOrDefault(c => c.Id == @AgendaTurno_entity.EsquemaDetalleTurnoId) != null) || crudMode != CrudMode.Delete)
                                {
                                    var dataSet = crudMode == CrudMode.Add ? EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Where(x => x.Habilitado == true) : EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Where(x => x.Habilitado == true || x.Id == AgendaTurno_entity.EsquemaDetalleTurnoId);
                                    <RadzenDropDown Name="EsquemaDetalleTurnoId" AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(AgendaTurno_entity.EsquemaDetalleTurnoId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectEsquemaDetalleTurno_EsquemaDetalleTurnoIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                }
                                else
                                {
                                    <RadzenDropDown Name="EsquemaDetalleTurnoId" AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectEsquemaDetalleTurno_EsquemaDetalleTurnoIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                }
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenNumericRangeValidator Min="@(EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Count > 0 ? EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Min(x => x.Id) : 1)" Component="EsquemaDetalleTurnoId" Text="EsquemaDetalleTurnoId is required" Style="position: relative">
                                    </RadzenNumericRangeValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHA",dataLenguaje) Component="Fecha" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDatePicker ShowTime="false" DateFormat="dd/MM/yyyy" ShowSeconds="false" style="width: 25%" @bind-Value="@(AgendaTurno_entity.Fecha)" Name="Fecha" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                                </RadzenDatePicker>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("SECTORID",dataLenguaje) Component="SectorId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                @if ((@Sector_SectorId_entities.Count > 0 && @Sector_SectorId_entities.FirstOrDefault(c => c.Id == @AgendaTurno_entity.SectorId) != null) || crudMode != CrudMode.Delete)
                                {
                                    var dataSet = crudMode == CrudMode.Add ? Sector_SectorId_entities.Where(x => x.Habilitado == true) : Sector_SectorId_entities.Where(x => x.Habilitado == true || x.Id == AgendaTurno_entity.SectorId);
                                    <RadzenDropDown Name="SectorId" AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(AgendaTurno_entity.SectorId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectSector_SectorIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                }
                                else
                                {
                                    <RadzenDropDown Name="SectorId" AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@Sector_SectorId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectSector_SectorIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                }
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenNumericRangeValidator Min="@(Sector_SectorId_entities.Count > 0 ? Sector_SectorId_entities.Min(x => x.Id) : 1)" Component="SectorId" Text="SectorId is required" Style="position: relative">
                                    </RadzenNumericRangeValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("SECUENCIA",dataLenguaje) Component="Secuencia" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenNumeric TValue="int" style="display: block; width: 100%" @bind-Value="@(AgendaTurno_entity.Secuencia)" Name="Secuencia" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                                </RadzenNumeric>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Component="UsuarioCreacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                @if ((@Usuario_UsuarioCreacion_entities.Count > 0 && @Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @AgendaTurno_entity.UsuarioCreacion) != null) || crudMode != CrudMode.Delete)
                                {
                                    <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" @bind-Value="@(AgendaTurno_entity.UsuarioCreacion)"
                                Data=@Usuario_UsuarioCreacion_entities TextProperty="NombreApellido" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                Disabled="true" />
                                }
                                else
                                {
                                    <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@Usuario_UsuarioCreacion_entities TextProperty="NombreApellido" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                Disabled="true" />
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Component="FechaCreacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(AgendaTurno_entity.FechaCreacion)" Name="FechaCreacion" Disabled="true">
                                </RadzenDatePicker>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Component="UsuarioModificacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                @if ((@Usuario_UsuarioModificacion_entities.Count > 0 && @Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @AgendaTurno_entity.UsuarioModificacion) != null) || crudMode != CrudMode.Delete)
                                {
                                    <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100" @bind-Value="@(AgendaTurno_entity.UsuarioModificacion)"
                                Data=@Usuario_UsuarioModificacion_entities TextProperty="NombreApellido" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                Disabled="true" />
                                }
                                else
                                {
                                    <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100"
                                Data=@Usuario_UsuarioModificacion_entities TextProperty="NombreApellido" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                Disabled="true" />
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Component="FechaModificacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(AgendaTurno_entity.FechaModificacion)" Name="FechaModificacion" Disabled="true">
                                </RadzenDatePicker>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@AgendaTurno_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @AgendaTurno_entity)) Disabled="@(crudMode == CrudMode.Delete || estaProcesando)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton Disabled="@estaProcesando" ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton Disabled="@estaProcesando" ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                        }
                    </ChildContent>
                </RadzenTemplateForm>
                <hr>

            }
            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <div class="spinner" />
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    private bool estaProcesando { get; set; } = false;

    /// <summary>
    /// Variables to handle column filter for field Banco.Habilitado
    private bool? Habilitado_filter;

    private bool ChkDiasCorridos = false;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Turno.AgendaTurno AgendaTurno_entity = new();
    private List<Depositary.Entities.Tables.Turno.AgendaTurno> AgendaTurno_entities = null;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    /// <summary>
    /// Variables to handle Relation between AgendaTurno.EsquemaDetalleTurnoId and EsquemaDetalleTurno.Id
    /// </summary>
    private Depositary.Entities.Tables.Turno.EsquemaDetalleTurno EsquemaDetalleTurno_EsquemaDetalleTurnoId_entity = new();
    private List<Depositary.Entities.Tables.Turno.EsquemaDetalleTurno>? EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities;
    private List<Depositary.Entities.Tables.Turno.EsquemaDetalleTurno> EsquemaDetalleTurno_EsquemaDetalleTurnoId_filter;
    private IEnumerable<Int64> selectedFilter_EsquemaDetalleTurnoId;

    /// <summary>
    /// Variables to handle Relation between AgendaTurno.SectorId and Sector.Id
    /// </summary>
    private Depositary.Entities.Tables.Directorio.Sector Sector_SectorId_entity = new();
    private List<Depositary.Entities.Tables.Directorio.Sector>? Sector_SectorId_entities;
    private List<Depositary.Entities.Tables.Directorio.Sector> Sector_SectorId_filter;
    private IEnumerable<Int64> selectedFilter_SectorId;

    /// <summary>
    /// Variables to handle Relation between AgendaTurno.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between AgendaTurno.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    private List<TurnoEntities.GrupoTurno> dataArbolAgenda = new();
    private IEnumerable<object> nodosSeleccionados;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    private TurnoEntities.AgendaTurnoABM agendaTurnoABM = new();

    private List<Depositary.Entities.Tables.Turno.EsquemaTurno>? dataEsquemaTurnos;
    private Depositary.Entities.Tables.Turno.EsquemaTurno esquemaTurnos_entity = new();

    private RadzenDropDown<Int64> dropDownEsquema = new();

    private DateTime FechaAnterior;
    private Int64 SectorAnterior;

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Turno", "AgendaTurno");
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
    }

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "TurnoAgendaTurnoCrud", crudMode.ToString(), dataUsuario.Id);
        estaProcesando = false;
        Depositary.Business.Tables.Turno.AgendaTurno entity = new();
        AgendaTurno_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Turno.EsquemaTurno oEsquemaTurno = new();
        dataEsquemaTurnos = oEsquemaTurno.Items();

        Depositary.Business.Tables.Turno.EsquemaDetalleTurno EsquemaDetalleTurno_EsquemaDetalleTurnoId_local = new();
        EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities = EsquemaDetalleTurno_EsquemaDetalleTurnoId_local.Items();
        EsquemaDetalleTurno_EsquemaDetalleTurnoId_filter = EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.Where(x => AgendaTurno_entities.Select(x => x.EsquemaDetalleTurnoId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Directorio.Sector Sector_SectorId_local = new();
        Sector_SectorId_entities = Sector_SectorId_local.Items();
        Sector_SectorId_filter = Sector_SectorId_entities.Where(x => AgendaTurno_entities.Select(x => x.SectorId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => AgendaTurno_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => AgendaTurno_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();

    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private async void Add()
    {
        //Main entity initialization
        dataArbolAgenda = new();
        AgendaTurno_entity = new();
        //Relations entities initialization
        EsquemaDetalleTurno_EsquemaDetalleTurnoId_entity = new();
        Sector_SectorId_entity = new();
        Usuario_UsuarioCreacion_entity = new();
        Usuario_UsuarioModificacion_entity = new();
        agendaTurnoABM = new();
        ChkDiasCorridos = false;
        crudMode = CrudMode.Add;
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "TurnoAgendaTurnoCrud", crudMode.ToString(), dataUsuario.Id);
        StateHasChanged();
    }


    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Turno.AgendaTurno item, bool delete)
    {
        AgendaTurno_entity = item;
        EsquemaDetalleTurno_EsquemaDetalleTurnoId_entity = new()
            {
                Id = EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.EsquemaDetalleTurnoId).Id,
                Nombre = EsquemaDetalleTurno_EsquemaDetalleTurnoId_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.EsquemaDetalleTurnoId).Nombre
            };
        Sector_SectorId_entity = new()
            {
                Id = Sector_SectorId_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.SectorId).Id,
                Nombre = Sector_SectorId_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.SectorId).Nombre
            };
        Usuario_UsuarioCreacion_entity = new()
            {
                Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.UsuarioCreacion).Id,
                Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.UsuarioCreacion).Nombre
            };
        if (Usuario_UsuarioModificacion_entities.Exists(c => c.Id == AgendaTurno_entity.UsuarioModificacion))
        {
            Usuario_UsuarioModificacion_entity = new()
                {
                    Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.UsuarioModificacion).Id,
                    Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == AgendaTurno_entity.UsuarioModificacion).Nombre
                };
        }
        if (delete)
            crudMode = CrudMode.Delete;
        else
        {
            FechaAnterior = AgendaTurno_entity.Fecha;
            SectorAnterior = AgendaTurno_entity.SectorId;
            crudMode = CrudMode.Edit;
        }

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "TurnoAgendaTurnoCrud", crudMode.ToString() + " Id: " + item.Id, dataUsuario.Id);
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        estaProcesando = true;

        await Task.Run(Procesar);

        estaProcesando = false;
    }

    private async Task Procesar()
    {
        bool validacionesOk = false;
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Turno.AgendaTurno crud = new();

        foreach (var property in AgendaTurno_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        AgendaTurno_entity.FechaModificacion = null;
                    }
                    else
                    {
                        AgendaTurno_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        AgendaTurno_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        AgendaTurno_entity.UsuarioCreacion = dataUsuario.Id;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        AgendaTurno_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        AgendaTurno_entity.UsuarioModificacion = dataUsuario.Id;
                    }
                    break;
            }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    if (agendaTurnoABM.Sectores.Count > 0)
                    {
                        agendaTurnoABM.UsuarioId = dataUsuario.Id;

                        //Validamos si existe algun turno para los sectores seleccionados, en el esquema elegido y entre el periodo de fechas
                        bool existenciaTurnos = TurnoController.ValidarExistenciaTurnos(agendaTurnoABM);

                        if (existenciaTurnos)
                        {
                            summary = "Error al validar.";
                            actionInformation = "Ya existen turnos generados para el periodo y sectores indicados.";
                            severityType = NotificationSeverity.Error;
                            validacionesOk = false;
                        }
                        else
                        {
                            string resultado = "";
                            resultado = Task.Run(() => TurnoController.GuardarAgenda(agendaTurnoABM, ChkDiasCorridos)).Result;

                            if (resultado == "")
                            {
                                summary = "Los turnos se han ";
                                actionInformation = "generado.";
                                severityType = NotificationSeverity.Success;
                                validacionesOk = true;
                            }
                            else
                            {
                                summary = "Error al procesar.";
                                actionInformation = resultado;
                                severityType = NotificationSeverity.Error;
                                validacionesOk = false;
                            }
                        }
                    }
                    else
                    {
                        summary = "Falto indicar  ";
                        actionInformation = "sectores asociados.";
                        severityType = NotificationSeverity.Info;
                    }
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    //Hay que verificar que no exista un turno para la fecha y sector indicados si es que se cambiaron estos valores.

                    bool existenciaTurnoPrevio = false;

                    if (FechaAnterior != AgendaTurno_entity.Fecha || SectorAnterior != AgendaTurno_entity.SectorId)
                        existenciaTurnoPrevio = TurnoController.ValidarExistenciaTurnos(AgendaTurno_entity.SectorId, AgendaTurno_entity.Fecha);

                    if (!existenciaTurnoPrevio)
                    {
                        crud.Update(AgendaTurno_entity);
                        summary = "El registro se ha ";
                        actionInformation = "modificado.";
                        severityType = NotificationSeverity.Success;
                        validacionesOk = true;
                    }
                    else
                    {
                        summary = "Error al validar.";
                        actionInformation = "Existe un turno previo para el dia y sector indicados.";
                        severityType = NotificationSeverity.Error;
                        validacionesOk = false;
                    }

                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    AgendaTurno_entity.Habilitado = false;
                    crud.Update(AgendaTurno_entity);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                    validacionesOk = true;

                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000,
            });

        if (validacionesOk)
        {
            // Sets Crud mode to List
            crudMode = CrudMode.List;
            await Task.Run(LoadMainEntityData);
        }
    }

    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void changeArbolAgenda(TreeEventArgs args)
    {
        agendaTurnoABM.Sectores = new();
        if (nodosSeleccionados != null)
        {
            foreach (var nodo in nodosSeleccionados)
            {
                switch (nodo.GetType().ToString())
                {
                    case "Permaquim.Depositary.Web.Administration.TurnoEntities.GrupoTurno":
                        TurnoEntities.GrupoTurno grupoTurno = new();
                        grupoTurno = (TurnoEntities.GrupoTurno)nodo;
                        if (grupoTurno.Empresas.Count > 0)
                        {
                            foreach (var empresa in grupoTurno.Empresas)
                            {
                                if (empresa.Sucursales.Count > 0)
                                {
                                    foreach (var sucursal in empresa.Sucursales)
                                    {
                                        if (sucursal.Sectores.Count > 0)
                                        {
                                            foreach (var sectorSucursal in sucursal.Sectores)
                                            {
                                                var sectorSucursalListado = agendaTurnoABM.Sectores.FirstOrDefault(x => x.SectorId == sectorSucursal.SectorId);
                                                if (sectorSucursalListado == null)
                                                    agendaTurnoABM.Sectores.Add(sectorSucursal);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "Permaquim.Depositary.Web.Administration.TurnoEntities.EmpresaTurno":
                        TurnoEntities.EmpresaTurno empresaTurno = new();
                        empresaTurno = (TurnoEntities.EmpresaTurno)nodo;
                        if (empresaTurno.Sucursales.Count > 0)
                        {
                            foreach (var sucursal in empresaTurno.Sucursales)
                            {
                                if (sucursal.Sectores.Count > 0)
                                {
                                    foreach (var sectorSucursal in sucursal.Sectores)
                                    {
                                        var sectorSucursalListado = agendaTurnoABM.Sectores.FirstOrDefault(x => x.SectorId == sectorSucursal.SectorId);
                                        if (sectorSucursalListado == null)
                                            agendaTurnoABM.Sectores.Add(sectorSucursal);
                                    }
                                }
                            }
                        }
                        break;
                    case "Permaquim.Depositary.Web.Administration.TurnoEntities.SucursalTurno":
                        TurnoEntities.SucursalTurno sucursalTurno = new();
                        sucursalTurno = (TurnoEntities.SucursalTurno)nodo;
                        if (sucursalTurno.Sectores.Count > 0)
                        {
                            foreach (var sectorSucursal in sucursalTurno.Sectores)
                            {
                                var sectorSucursalListado = agendaTurnoABM.Sectores.FirstOrDefault(x => x.SectorId == sectorSucursal.SectorId);
                                if (sectorSucursalListado == null)
                                    agendaTurnoABM.Sectores.Add(sectorSucursal);
                            }
                        }
                        break;
                    case "Permaquim.Depositary.Web.Administration.TurnoEntities.SectorTurno":
                        TurnoEntities.SectorTurno sectorTurno = new();
                        sectorTurno = (TurnoEntities.SectorTurno)nodo;
                        var sector = agendaTurnoABM.Sectores.FirstOrDefault(x => x.SectorId == sectorTurno.SectorId);
                        if (sector == null)
                            agendaTurnoABM.Sectores.Add(sectorTurno);
                        break;
                }
            }
        }

    }

    #endregion
    #region Selection events
    /// <summary>
    /// EsquemaDetalleTurno_EsquemaDetalleTurnoId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectEsquemaDetalleTurno_EsquemaDetalleTurnoIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Sector_SectorId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectSector_SectorIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Turno.AgendaTurno item)
    {
        AgendaTurno_entity = item;
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_EsquemaDetalleTurnoId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_EsquemaDetalleTurnoId_Changed(object value)
    {
        if (selectedFilter_EsquemaDetalleTurnoId != null && !selectedFilter_EsquemaDetalleTurnoId.Any())
        {
            selectedFilter_EsquemaDetalleTurnoId = null;
        }
    }

    /// <summary>
    /// selectedFilter_SectorId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_SectorId_Changed(object value)
    {
        if (selectedFilter_SectorId != null && !selectedFilter_SectorId.Any())
        {
            selectedFilter_SectorId = null;
        }
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// EsquemaTurno value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelected_EsquemaTurno_Changed(Int64? value)
    {
        //Quite el binding y lo hice con el evento, porque necesito saber cuando ocurre el cambio.
        agendaTurnoABM.EsquemaTurnoId = value;

        var esquemaTurnoSeleccionado = dataEsquemaTurnos.FirstOrDefault(x => x.Id == value.Value);
        ChkDiasCorridos = !esquemaTurnoSeleccionado.OperaDiasCorridos;

        //Recargamos el arbol trayendo empresas en funcion de si el esquema opera con o sin turno.
        dataArbolAgenda = TurnoController.ObtenerArbolTurnos(esquemaTurnoSeleccionado.OperaSinTurno);
    }

    /// <summary>
    /// AgendaTurnoCellRender event
    /// </summary>
    /// <param name="args"></param>
    private void AgendaTurnoCellRender(DataGridCellRenderEventArgs<Depositary.Entities.Tables.Turno.AgendaTurno> args)
    {
        if (!args.Data.Habilitado)
            args.Attributes.Add("class", "row-highlight-disabled");
        else
            args.Attributes.Add("class", "rz-datatable-even");
    }

    #endregion

    #region Export

    #endregion

}

