@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("DirectorioRelacionMonedaSucursal", dataFunciones, "PuedeVisualizar"))
    {
        @if (RelacionMonedaSucursal_entities == null)
        {
            <div style="height:80px;">
                <div class="spinnerCentradoLateralRelativo"></div>
            </div>
        }
        else
        {
            switch (crudMode)
            {
                case CrudMode.Add:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Directorio.RelacionMonedaSucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Delete:
                    <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Directorio.RelacionMonedaSucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Edit:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Directorio.RelacionMonedaSucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.List:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <div>
                                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Directorio.RelacionMonedaSucursal",dataLenguaje)</h4>
                            </div>
                        </ChildContent>
                    </RadzenBadge>
                    break;
            }
            <hr>
            if (crudMode == CrudMode.List)
            {
                <RadzenDataGrid @bind-Settings="@GridSettings" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" RowRender="@RelacionMonedaSucursalRowRender" PageSizeOptions="@(new int[]{10,20,50,100})" AllowColumnPicking="true" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@RelacionMonedaSucursal_entities" TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <HeaderTemplate>
                                <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioRelacionMonedaSucursal",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                                </RadzenButton>
                            </HeaderTemplate>
                            <Template Context="element">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioRelacionMonedaSucursal",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioRelacionMonedaSucursal",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Property="Id" Filterable="false" Title="Id" Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Title="MonedaId" Property="MonedaId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_MonedaId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @if (Moneda_entities.FirstOrDefault(c => c.Id == @context.MonedaId) != null)
                                {
                                    <RadzenLabel Text="@Moneda_entities.FirstOrDefault( c => c.Id == @context.MonedaId).Nombre" Component="MonedaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="MonedaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_MonedaId Data="@Moneda_MonedaId_filter" Change="OnSelectedFilter_MonedaId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Title="SucursalId" Property="SucursalId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_SucursalId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @if (Sucursal_entities.FirstOrDefault(c => c.Id == @context.SucursalId) != null)
                                {
                                    <RadzenLabel Text="@Sucursal_entities.FirstOrDefault( c => c.Id == @context.SucursalId).Nombre" Component="SucursalId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="SucursalId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_SucursalId Data="@Sucursal_SucursalId_filter" Change="OnSelectedFilter_SucursalId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Property="EsDefault" Filterable="true" FilterValue="@EsDefault_filter" Title="EsDefault" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.EsDefault Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <div>
                                    @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                    <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="EsDefault_filter" TriState="true" />
                                </div>
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Property="Habilitado" Filterable="true" FilterValue="@Habilitado_filter" Title="Habilitado" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <div>
                                    @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                    <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                                </div>
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                    if (usuario != null)
                                    {
                                        <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Property="FechaCreacion" Filterable="false" Title="FechaCreacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                    if (usuario != null)
                                    {
                                        <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Property="FechaModificacion" Filterable="false" Title="FechaModificacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <hr>
            }

            if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
            {
                <RadzenTemplateForm TItem="Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal" Data="@RelacionMonedaSucursal_entity" @bind-Value="RelacionMonedaSucursal_entity" Submit="Save" Visible="@(RelacionMonedaSucursal_entity != null)">
                    <ChildContent>
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text="Id" Component="Id" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-auto">
                                    <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(RelacionMonedaSucursal_entity.Id)" Name="Id" Disabled="true">
                                    </RadzenNumeric>
                                </div>
                            </div>
                        }
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="MonedaId" Component="MonedaId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                @if ((@Moneda_entities.Count > 0 && @Moneda_entities.FirstOrDefault(c => c.Id == @RelacionMonedaSucursal_entity.MonedaId) != null) || crudMode != CrudMode.Delete)
                                {
                                    var dataSet = crudMode == CrudMode.Add ? Moneda_entities.Where(x => x.Habilitado == true) : Moneda_entities.Where(x => x.Habilitado == true || x.Id == RelacionMonedaSucursal_entity.MonedaId);
                                    <RadzenDropDown AllowClear="false" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                TValue="Int64" Class="w-100" @bind-Value="@(RelacionMonedaSucursal_entity.MonedaId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectMonedaValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                                else
                                {
                                    <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@Moneda_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectMonedaValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="SucursalId" Component="SucursalId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@SucursalId"
                                Data=@Sucursal_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="EsDefault" Component="EsDefault" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@RelacionMonedaSucursal_entity.EsDefault Name="EsDefaultCheckBox" TValue="bool" Change=@(args => EsDefaultChange(args, @RelacionMonedaSucursal_entity)) />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="Habilitado" Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@RelacionMonedaSucursal_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @RelacionMonedaSucursal_entity)) Disabled="@(crudMode == CrudMode.Delete)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Aceptar" ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text="Cancelar" Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
                <hr>
            }

            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <div style="height:80px;">
        <div class="spinnerCentradoLateralRelativo"></div>
    </div>
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal RelacionMonedaSucursal_entity = new();
    private List<Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal> RelacionMonedaSucursal_entities = null;

    /// <summary>
    /// Variables to handle Relation between RelacionMonedaSucursal.MonedaId and Moneda.Id
    /// </summary>
    private Depositary.Entities.Tables.Valor.Moneda Moneda_entity = new();
    private List<Depositary.Entities.Tables.Valor.Moneda>? Moneda_entities;
    private List<Depositary.Entities.Tables.Valor.Moneda> Moneda_MonedaId_filter;
    private IEnumerable<Int64> selectedFilter_MonedaId;

    /// <summary>
    /// Variables to handle column filter for field Banco.Habilitado
    private bool? Habilitado_filter;

    /// <summary>
    /// Variables to handle column filter for field Banco.EsDefault
    private bool? EsDefault_filter;

    /// <summary>
    /// Variables to handle Relation between RelacionMonedaSucursal.SucursalId and Sucursal.Id
    /// </summary>
    private Depositary.Entities.Tables.Directorio.Sucursal Sucursal_entity = new();
    private List<Depositary.Entities.Tables.Directorio.Sucursal>? Sucursal_entities;
    private List<Depositary.Entities.Tables.Directorio.Sucursal> Sucursal_SucursalId_filter;
    private IEnumerable<Int64> selectedFilter_SucursalId;

    /// <summary>
    /// Variables to handle Relation between RelacionMonedaSucursal.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between Banco.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    [Parameter]
    public Int64 SucursalId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DirectorioRelacionMonedaSucursal", crudMode.ToString(), dataUsuario.Id);
        Depositary.Business.Tables.Directorio.RelacionMonedaSucursal entity = new Depositary.Business.Tables.Directorio.RelacionMonedaSucursal();
        entity.Where.Add(Depositary.Business.Tables.Directorio.RelacionMonedaSucursal.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
        RelacionMonedaSucursal_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Valor.Moneda Moneda_local = new();
        Moneda_entities = Moneda_local.Items();
        Moneda_MonedaId_filter = Moneda_entities.Where(x => RelacionMonedaSucursal_entities.Select(x => x.MonedaId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Directorio.Sucursal Sucursal_local = new();
        Sucursal_entities = Sucursal_local.Items();
        Sucursal_SucursalId_filter = Sucursal_entities.Where(x => RelacionMonedaSucursal_entities.Select(x => x.SucursalId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => RelacionMonedaSucursal_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => RelacionMonedaSucursal_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();
    }

    #endregion

    #region Validaciones

    private bool verificarExistenciaMonedaSucursalDefault()
    {
        bool resultado = true;
        Depositary.Business.Tables.Directorio.RelacionMonedaSucursal oMonedaSucursal = new Depositary.Business.Tables.Directorio.RelacionMonedaSucursal();
        oMonedaSucursal.Where.Add(Depositary.Business.Tables.Directorio.RelacionMonedaSucursal.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
        oMonedaSucursal.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Tables.Directorio.RelacionMonedaSucursal.ColumnEnum.EsDefault, Depositary.sqlEnum.OperandEnum.Equal, true);
        oMonedaSucursal.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Tables.Directorio.RelacionMonedaSucursal.ColumnEnum.Habilitado, Depositary.sqlEnum.OperandEnum.Equal, true);
        oMonedaSucursal.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Tables.Directorio.RelacionMonedaSucursal.ColumnEnum.Id, Depositary.sqlEnum.OperandEnum.NotEqual, RelacionMonedaSucursal_entity.Id);

        oMonedaSucursal.Items();
        if (oMonedaSucursal.Result.Count == 0)
            resultado = false;

        return resultado;
    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        RelacionMonedaSucursal_entity = new();
        //Relations entities initialization
        Moneda_entity = new();
        Sucursal_entity = new();
        crudMode = CrudMode.Add;
        AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DirectorioRelacionMonedaSucursal", crudMode.ToString(), dataUsuario.Id);
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal item, bool delete)
    {
        RelacionMonedaSucursal_entity = item;
        Moneda_entity = new()
            {
                Id = Moneda_entities.FirstOrDefault(c => c.Id == RelacionMonedaSucursal_entity.MonedaId).Id,
                Nombre = Moneda_entities.FirstOrDefault(c => c.Id == RelacionMonedaSucursal_entity.MonedaId).Nombre
            };
        Sucursal_entity = new()
            {
                Id = Sucursal_entities.FirstOrDefault(c => c.Id == RelacionMonedaSucursal_entity.SucursalId).Id,
                Nombre = Sucursal_entities.FirstOrDefault(c => c.Id == RelacionMonedaSucursal_entity.SucursalId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;

        AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DirectorioRelacionMonedaSucursal", crudMode.ToString() + " Id: " + item.Id, dataUsuario.Id);
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        bool validacionesSave = false;
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        if (RelacionMonedaSucursal_entity.EsDefault && (crudMode == CrudMode.Add || crudMode == CrudMode.Edit))
        {
            //verifico que no exista previamente una moneda default para la sucursal.
            if (verificarExistenciaMonedaSucursalDefault())
            {
                validacionesSave = false;
                summary = "Error al procesar.";
                actionInformation = "No se puede guardar/editar una moneda como default debido a que la sucursal ya tiene una asignada.";
                severityType = NotificationSeverity.Error;
            }
            else
                validacionesSave = true;
        }
        else
            validacionesSave = true;

        if (validacionesSave)
        {
            RelacionMonedaSucursal_entity.SucursalId = SucursalId;
            Depositary.Business.Tables.Directorio.RelacionMonedaSucursal crud = new();
            foreach (var property in RelacionMonedaSucursal_entity.GetType().GetProperties())
            {
                switch (property.Name)
                {
                    case "FechaModificacion":
                        if (crudMode == CrudMode.Add)
                        {
                            RelacionMonedaSucursal_entity.FechaModificacion = null;
                        }
                        else
                        {
                            RelacionMonedaSucursal_entity.FechaModificacion = DateTime.Now;
                        }
                        break;
                    case "FechaCreacion":
                        if (crudMode == CrudMode.Add)
                        {
                            RelacionMonedaSucursal_entity.FechaCreacion = DateTime.Now;
                        }
                        break;
                    case "UsuarioCreacion":
                        if (crudMode == CrudMode.Add)
                        {
                            RelacionMonedaSucursal_entity.UsuarioCreacion = dataUsuario.Id;
                        }
                        break;
                    case "UsuarioModificacion":
                        if (crudMode == CrudMode.Add)
                        {
                            RelacionMonedaSucursal_entity.UsuarioModificacion = null;
                        }
                        else
                        {
                            RelacionMonedaSucursal_entity.UsuarioModificacion = dataUsuario.Id;
                        }
                        break;
                }
            }
            switch (crudMode)
            {
                case CrudMode.Add:
                    try
                    {
                        crud.Add(RelacionMonedaSucursal_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                        summary = "El registro se ha ";
                        actionInformation = "agregado.";
                        severityType = NotificationSeverity.Success;
                    }
                    catch (Exception ex)
                    {
                        AuditController.Log(ex, dataUsuario.Id);
                        summary = "Error al procesar.";
                        actionInformation = ex.Message;
                        severityType = NotificationSeverity.Error;
                    }
                    break;
                case CrudMode.Edit:
                    try
                    {
                        crud.Update(RelacionMonedaSucursal_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                        summary = "El registro se ha ";
                        actionInformation = "modificado.";
                        severityType = NotificationSeverity.Success;
                    }
                    catch (Exception ex)
                    {
                        AuditController.Log(ex, dataUsuario.Id);
                        summary = "Error al procesar.";
                        actionInformation = ex.Message;
                        severityType = NotificationSeverity.Error;
                    }
                    break;
                case CrudMode.Delete:
                    try
                    {
                        RelacionMonedaSucursal_entity.Habilitado = false;
                        crud.Update(RelacionMonedaSucursal_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                        summary = "El registro se ha ";
                        actionInformation = "eliminado.";
                        severityType = NotificationSeverity.Success;
                    }
                    catch (Exception ex)
                    {
                        AuditController.Log(ex, dataUsuario.Id);
                        summary = "Error al procesar.";
                        actionInformation = ex.Message;
                        severityType = NotificationSeverity.Error;
                    }
                    break;
            }
        }

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// Moneda value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectMonedaValueChanged(object item)
    {
    }

    /// <summary>
    /// Sucursal value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectSucursalValueChanged(object item)
    {
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void EsDefaultChange(bool? value, Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal item)
    {
        RelacionMonedaSucursal_entity = item;
    }
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal item)
    {
        RelacionMonedaSucursal_entity = item;
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_SucursalId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_SucursalId_Changed(object value)
    {
        if (selectedFilter_SucursalId != null && !selectedFilter_SucursalId.Any())
        {
            selectedFilter_SucursalId = null;
        }
    }

    /// <summary>
    /// selectedFilter_MonedaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_MonedaId_Changed(object value)
    {
        if (selectedFilter_MonedaId != null && !selectedFilter_MonedaId.Any())
        {
            selectedFilter_MonedaId = null;
        }
    }

    /// <summary>
    /// RelacionMonedaSucursalRowRender event
    /// </summary>
    /// <param name="args"></param>
    private void RelacionMonedaSucursalRowRender(RowRenderEventArgs<Depositary.Entities.Tables.Directorio.RelacionMonedaSucursal> args)
    {
        if (!args.Data.Habilitado)
            args.Attributes.Add("class", "row-highlight-disabled");
        else
            args.Attributes.Add("class", "rz-datatable-even");
    }
    #endregion

    #region Export

    #endregion

    }
