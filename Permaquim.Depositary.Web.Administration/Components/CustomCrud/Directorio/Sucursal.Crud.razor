@page "/DirectorioSucursalCustomCrud/{EmpresaId}/"

@using Permaquim.Depositary.Web.Administration.Controllers;

@using Permaquim.Depositary.Web.Administration.Components.CustomCrud
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("DirectorioSucursal", dataFunciones, "PuedeVisualizar"))
    {
        @if (Sucursal_entities == null)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else
        {
            switch (crudMode)
            {
                case CrudMode.Add:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Directorio.Sucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Delete:
                    <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Directorio.Sucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Edit:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Directorio.Sucursal",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.List:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <div>
                                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Directorio.Sucursal",dataLenguaje)</h4>
                            </div>
                        </ChildContent>
                    </RadzenBadge>
                    break;
            }
            <hr>
            if (crudMode == CrudMode.List)
            {
                <RadzenDataGrid PageSizeOptions="@(new int[]{10,20,50,100})" CellRender="@SucursalCellRender" AllowColumnPicking="true" AllowFiltering="true" RowExpand="@expandirSucursal" RowRender="@sucursalRowRender" RowCollapse="@colapsarSucursal"
                AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Sucursal_entities" TItem="Depositary.Entities.Tables.Directorio.Sucursal" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <HeaderTemplate>
                                <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioSucursal",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                                </RadzenButton>
                            </HeaderTemplate>
                            <Template Context="element">
                                <RadzenButton Icon="format_list_numbered_rtl" title=@MultilenguajeController.ObtenerTextoPorClave("TooltipSectores",dataLenguaje) ButtonStyle="ButtonStyle.Primary" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioSector",dataFunciones,"PuedeVisualizar") Class="m-1" Click="@(args => ObtenerSectores(element))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioSucursal",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("DirectorioSucursal",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Title="EmpresaId" Property="EmpresaId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_EmpresaId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @if (Empresa_entities.FirstOrDefault(c => c.Id == @context.EmpresaId) != null)
                                {
                                    <RadzenLabel Text="@Empresa_entities.FirstOrDefault( c => c.Id == @context.EmpresaId).Nombre" Component="EmpresaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="EmpresaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_EmpresaId Data="@Empresa_EmpresaId_filter" Change="OnSelectedFilter_EmpresaId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="Id" Filterable="false" Title="Id" Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="Nombre" Filterable="false" Title="Nombre" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="Descripcion" Filterable="false" Title="Descripcion" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="CodigoExterno" Filterable="false" Title="CodigoExterno" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="Direccion" Filterable="false" Title="Direccion" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Title="CodigoPostalId" Property="CodigoPostalId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_CodigoPostalId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @if (CodigoPostal_entities.FirstOrDefault(c => c.Id == @context.CodigoPostalId) != null)
                                {
                                    <RadzenLabel Text="@CodigoPostal_entities.FirstOrDefault( c => c.Id == @context.CodigoPostalId).Nombre" Component="CodigoPostalId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="CodigoPostalId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_CodigoPostalId Data="@CodigoPostal_CodigoPostalId_filter" Change="OnSelectedFilter_CodigoPostalId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Title=@MultilenguajeController.ObtenerTextoPorClave("ZONAID",dataLenguaje) Property="ZonaId" Width="100px" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_ZonaId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @if (Zona_ZonaId_entities.FirstOrDefault(c => c.Id == @context.ZonaId) != null)
                                {
                                    <RadzenLabel Text="@Zona_ZonaId_entities.FirstOrDefault( c => c.Id == @context.ZonaId).Nombre" Component="ZonaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="ZonaId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_ZonaId Data="@Zona_ZonaId_filter" Change="OnSelectedFilter_ZonaId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="Habilitado" Filterable="false" Title="Habilitado" Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                    if (usuario != null)
                                    {
                                        var usuarioTexto = usuario.Nombre + " " + usuario.Apellido;

                                        <RadzenLabel Text=@usuarioTexto Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="FechaCreacion" Filterable="false" Title="FechaCreacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                    if (usuario != null)
                                    {
                                        var usuarioTexto = usuario.Nombre + " " + usuario.Apellido;

                                        <RadzenLabel Text=@usuarioTexto Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Directorio.Sucursal" Property="FechaModificacion" Filterable="false" Title="FechaModificacion" Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                    </Columns>
                    <Template Context="sucursal">
                        <RelacionMonedaSucursal_Crud SucursalId="@(sucursal.Id)"></RelacionMonedaSucursal_Crud>
                    </Template>
                </RadzenDataGrid>
                <hr>
            }

            if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
            {
                <RadzenTemplateForm TItem="Depositary.Entities.Tables.Directorio.Sucursal" Data="@Sucursal_entity" @bind-Value="Sucursal_entity" Submit="Save" Visible="@(Sucursal_entity != null)">
                    <ChildContent>
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text="Id" Component="Id" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(Sucursal_entity.Id)" Name="Id" Disabled="true">
                                    </RadzenNumeric>
                                </div>
                            </div>
                        }
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="Nombre" Component="Nombre" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Sucursal_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="Descripcion" Component="Descripcion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Sucursal_entity.Descripcion)" Name="Descripcion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Descripcion" Text="Descripcion is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="EmpresaId" Component="EmpresaId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@ParametroEmpresaId"
                                Data=@Empresa_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="CodigoExterno" Component="CodigoExterno" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Sucursal_entity.CodigoExterno)" Name="CodigoExterno" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="CodigoExterno" Text="CodigoExterno is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="Direccion" Component="Direccion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Sucursal_entity.Direccion)" Name="Direccion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Direccion" Text="Direccion is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="CodigoPostalId" Component="CodigoPostalId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                @if ((@CodigoPostal_entities.Count > 0 && @CodigoPostal_entities.FirstOrDefault(c => c.Id == @Sucursal_entity.CodigoPostalId) != null) || crudMode != CrudMode.Delete)
                                {
                                    <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" @bind-Value="@(Sucursal_entity.CodigoPostalId)"
                                Data=@CodigoPostal_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectCodigoPostalValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                                else
                                {
                                    <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@CodigoPostal_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectCodigoPostalValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ZONAID",dataLenguaje) Component="ZonaId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                @if ((@Zona_ZonaId_entities.Count > 0 && @Zona_ZonaId_entities.FirstOrDefault(c => c.Id == @Sucursal_entity.ZonaId) != null) || crudMode != CrudMode.Delete)
                                {
                                    <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(Sucursal_entity.ZonaId)"
                                Data=@Zona_ZonaId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectZona_ZonaIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                                else
                                {
                                    <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@Zona_ZonaId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectZona_ZonaIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text="Habilitado" Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@Sucursal_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @Sucursal_entity)) Disabled="@(crudMode == CrudMode.Delete)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Aceptar" ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text="Cancelar" Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
                <hr>
            }

            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

@code {
    [Parameter]
    public string EmpresaId { get; set; }

    private Int64 ParametroEmpresaId;
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Directorio.Sucursal Sucursal_entity = new();
    private List<Depositary.Entities.Tables.Directorio.Sucursal> Sucursal_entities = null;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    /// <summary>
    /// Variables to handle Relation between Sucursal.ZonaId and Zona.Id
    /// </summary>
    private Depositary.Entities.Tables.Geografia.Zona Zona_ZonaId_entity = new();
    private List<Depositary.Entities.Tables.Geografia.Zona>? Zona_ZonaId_entities;
    private List<Depositary.Entities.Tables.Geografia.Zona> Zona_ZonaId_filter;
    private IEnumerable<Int64> selectedFilter_ZonaId;

    /// <summary>
    /// Variables to handle Relation between Sucursal.EmpresaId and Empresa.Id
    /// </summary>
    private Depositary.Entities.Tables.Directorio.Empresa Empresa_entity = new();
    private List<Depositary.Entities.Tables.Directorio.Empresa>? Empresa_entities;
    private List<Depositary.Entities.Tables.Directorio.Empresa> Empresa_EmpresaId_filter;
    private IEnumerable<Int64> selectedFilter_EmpresaId;

    /// <summary>
    /// Variables to handle Relation between Sucursal.CodigoPostalId and CodigoPostal.Id
    /// </summary>
    private Depositary.Entities.Tables.Geografia.CodigoPostal CodigoPostal_entity = new();
    private List<Depositary.Entities.Tables.Geografia.CodigoPostal>? CodigoPostal_entities;
    private List<Depositary.Entities.Tables.Geografia.CodigoPostal> CodigoPostal_CodigoPostalId_filter;
    private IEnumerable<Int64> selectedFilter_CodigoPostalId;

    /// <summary>
    /// Variables to handle Relation between Cuenta.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between Cuenta.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    private List<Depositary.Entities.Tables.Directorio.Sucursal> rowsSucursalesExpandidas = new List<Depositary.Entities.Tables.Directorio.Sucursal>();

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    protected override async Task OnInitializedAsync()
    {
        ParametroEmpresaId = Int64.Parse(EmpresaId);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFunciones = await sessionStorage.GetItemAsync<List<SeguridadEntities.FuncionRol>>("DataFunciones");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        Depositary.Business.Tables.Directorio.Sucursal entity = new();
        entity.Where.Add(Business.Tables.Directorio.Sucursal.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, ParametroEmpresaId);
        Sucursal_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Directorio.Empresa Empresa_local = new();
        Empresa_entities = Empresa_local.Items();
        Empresa_EmpresaId_filter = Empresa_entities.Where(x => Sucursal_entities.Select(x => x.EmpresaId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Geografia.CodigoPostal CodigoPostal_local = new();
        CodigoPostal_entities = CodigoPostal_local.Items();
        CodigoPostal_CodigoPostalId_filter = CodigoPostal_entities.Where(x => Sucursal_entities.Select(x => x.CodigoPostalId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Geografia.Zona Zona_ZonaId_local = new();
        Zona_ZonaId_entities = Zona_ZonaId_local.Items();
        Zona_ZonaId_filter = Zona_ZonaId_entities.Where(x => Sucursal_entities.Select(x => x.ZonaId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => Sucursal_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => Sucursal_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();
    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Sucursal_entity = new();
        //Relations entities initialization
        Empresa_entity = new();
        Zona_ZonaId_entity = new();
        CodigoPostal_entity = new();
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Directorio.Sucursal item, bool delete)
    {
        Sucursal_entity = item;
        Empresa_entity = new()
            {
                Id = Empresa_entities.FirstOrDefault(c => c.Id == Sucursal_entity.EmpresaId).Id,
                Nombre = Empresa_entities.FirstOrDefault(c => c.Id == Sucursal_entity.EmpresaId).Nombre
            };
        CodigoPostal_entity = new()
            {
                Id = CodigoPostal_entities.FirstOrDefault(c => c.Id == Sucursal_entity.CodigoPostalId).Id,
                Nombre = CodigoPostal_entities.FirstOrDefault(c => c.Id == Sucursal_entity.CodigoPostalId).Nombre
            };
        Zona_ZonaId_entity = new()
            {
                Id = Zona_ZonaId_entities.FirstOrDefault(c => c.Id == Sucursal_entity.ZonaId).Id,
                Nombre = Zona_ZonaId_entities.FirstOrDefault(c => c.Id == Sucursal_entity.ZonaId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Directorio.Sucursal crud = new();
        Sucursal_entity.EmpresaId = ParametroEmpresaId;
        foreach (var property in Sucursal_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Sucursal_entity.FechaModificacion = null;
                    }
                    else
                    {
                        Sucursal_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Sucursal_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Sucursal_entity.UsuarioCreacion = dataUsuario.Id;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Sucursal_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        Sucursal_entity.UsuarioModificacion = dataUsuario.Id;
                    }
                    break;
            }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    crud.Add(Sucursal_entity);
                    summary = "El registro se ha ";
                    actionInformation = "agregado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    crud.Update(Sucursal_entity);
                    summary = "El registro se ha ";
                    actionInformation = "modificado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    Sucursal_entity.Habilitado = false;
                    crud.Update(Sucursal_entity);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion

    #region Grid events
    private void ObtenerSectores(Depositary.Entities.Tables.Directorio.Sucursal item)
    {
        NavManager.NavigateTo("DirectorioSectorCustomCrud/" + item.Id, true);
    }

    void SucursalCellRender(DataGridCellRenderEventArgs<Depositary.Entities.Tables.Directorio.Sucursal> args)
    {
        if (args.Column.Property == "EmpresaId")
        {
            args.Attributes.Add("style", $"background-color: orange;");
        }
    }

    protected async Task expandirSucursal(Depositary.Entities.Tables.Directorio.Sucursal args)
    {
        rowsSucursalesExpandidas.Add(args);
    }

    protected async Task colapsarSucursal(Depositary.Entities.Tables.Directorio.Sucursal args)
    {
        rowsSucursalesExpandidas.RemoveAll(x => x.Id == args.Id);
    }

    void sucursalRowRender(RowRenderEventArgs<Depositary.Entities.Tables.Directorio.Sucursal> args)
    {
        if (rowsSucursalesExpandidas.Where(x => x.Id == args.Data.Id).ToList().Count > 0)
        {
            args.Attributes.Add("class", "row-highlight");
        }
        else
        {
            args.Attributes.Add("class", "rz-datatable-even");
        }
    }

    #endregion

    #region Selection events
    /// <summary>
    /// Empresa value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectEmpresaValueChanged(object item)
    {
    }

    /// <summary>
    /// CodigoPostal value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectCodigoPostalValueChanged(object item)
    {
    }

    /// <summary>
    /// Zona_ZonaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectZona_ZonaIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Directorio.Sucursal item)
    {
        Sucursal_entity = item;
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_EmpresaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_EmpresaId_Changed(object value)
    {
        if (selectedFilter_EmpresaId != null && !selectedFilter_EmpresaId.Any())
        {
            selectedFilter_EmpresaId = null;
        }
    }

    /// <summary>
    /// selectedFilter_ZonaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_ZonaId_Changed(object value)
    {
        if (selectedFilter_ZonaId != null && !selectedFilter_ZonaId.Any())
        {
            selectedFilter_ZonaId = null;
        }
    }

    /// <summary>
    /// selectedFilter_CodigoPostalId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_CodigoPostalId_Changed(object value)
    {
        if (selectedFilter_CodigoPostalId != null && !selectedFilter_CodigoPostalId.Any())
        {
            selectedFilter_CodigoPostalId = null;
        }
    }
    #endregion

    #region Export

    #endregion

            }

<style>
    .row-highlight {
        background-color: silver;
    }

</style>