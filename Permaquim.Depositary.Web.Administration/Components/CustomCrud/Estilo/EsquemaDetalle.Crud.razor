@using Permaquim.Depositary.Web.Administration.Controllers;
@using System.Drawing.Text;
@using System.Drawing

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (estaCargando)
{
    <div style="height:80px;">
        <div class="spinnerCentradoLateralRelativo"></div>
    </div>
}

@if (estaProcesando)
{
    <div class="spinner"></div>
}

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle", dataFunciones, "PuedeVisualizar"))
    {
        switch (crudMode)
        {
            case CrudMode.Add:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Estilo.EsquemaDetalle",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Delete:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadgeBorrar", false) BadgeStyle="BadgeStyle.Warning">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Estilo.EsquemaDetalle",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Edit:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Estilo.EsquemaDetalle",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.List:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <div>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Estilo.EsquemaDetalle",dataLenguaje)</h4>
                        </div>
                    </ChildContent>
                </RadzenBadge>
                break;
        }
        <hr>
        if (crudMode == CrudMode.List)
        {
            <RadzenDataGrid @bind-Settings="@GridSettings" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSizeOptions="@(new int[]{10,20,50,100})" CellRender="@esquemaDetalleCellRender" FilterMode="FilterMode.Advanced" PageSize="@CustomizadorController.ObtenerPaginadoDefault(dataUsuario.EmpresaId, dataCustomizacionPagina.AtributosTabla)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)
                Data="@EsquemaDetalle_entities" TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">@MultilenguajeController.ObtenerTextoPorClave("SIN_REGISTROS", dataLenguaje)</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" TextAlign="TextAlign.Center" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TemplateABM",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TemplateABM",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TemplateABM",dataCustomizacionPagina.AtributosColumnas)>
                        <HeaderTemplate>
                            <RadzenButton Disabled="@(!EsDefault)" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                            </RadzenButton>
                        </HeaderTemplate>
                        <Template Context="element">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="delete" Disabled="@(!EsDefault || !element.Habilitado)" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Id" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Id",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Id",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Id",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Id",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Id",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Id",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Id",dataCustomizacionPagina.AtributosColumnas)>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Title=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMAID",dataLenguaje) Property="EsquemaId"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("EsquemaId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("EsquemaId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("EsquemaId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("EsquemaId",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @if (Esquema_entities.FirstOrDefault(c => c.Id == @context.EsquemaId) != null)
                            {
                                <RadzenLabel Text="@Esquema_entities.FirstOrDefault( c => c.Id == @context.EsquemaId).Nombre" Component="EsquemaId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="EsquemaId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Title=@MultilenguajeController.ObtenerTextoPorClave("APLICACIONID",dataLenguaje) Property="AplicacionId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_AplicacionId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("AplicacionId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("AplicacionId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("AplicacionId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("AplicacionId",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @if (Aplicacion_entities.FirstOrDefault(c => c.Id == @context.AplicacionId) != null)
                            {
                                <RadzenLabel Text="@Aplicacion_entities.FirstOrDefault( c => c.Id == @context.AplicacionId).Nombre" Component="AplicacionId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="AplicacionId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_AplicacionId Data="@Aplicacion_AplicacionId_filter" Change="OnSelectedFilter_AplicacionId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Title=@MultilenguajeController.ObtenerTextoPorClave("TIPOESQUEMADETALLEID",dataLenguaje) Property="TipoEsquemaDetalleId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_TipoEsquemaDetalleId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TipoEsquemaDetalleId",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @if (TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == @context.TipoEsquemaDetalleId) != null)
                            {
                                <RadzenLabel Text="@TipoEsquemaDetalle_entities.FirstOrDefault( c => c.Id == @context.TipoEsquemaDetalleId).Nombre" Component="TipoEsquemaDetalleId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="TipoEsquemaDetalleId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_TipoEsquemaDetalleId Data="@TipoEsquemaDetalle_TipoEsquemaDetalleId_filter" Change="OnSelectedFilter_TipoEsquemaDetalleId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Nombre" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Nombre",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Nombre",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Nombre",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Nombre",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Nombre",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Nombre",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Nombre",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Nombre",dataCustomizacionPagina.AtributosColumnas)>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Descripcion" Title=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Descripcion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Descripcion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Descripcion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Descripcion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Descripcion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Descripcion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Descripcion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Descripcion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Descripcion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Descripcion",dataCustomizacionPagina.AtributosColumnas)>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Valor" Title=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Valor",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Valor",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Valor",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Valor",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Valor",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Valor",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Valor",dataCustomizacionPagina.AtributosColumnas)>
                        <Template Context="data">
                            @switch (data.TipoEsquemaDetalleId)
                            {
                                case 1: //1=Color
                                    <span style='color:@data.Valor' />
                                    break;
                                case 2: //2=Fuente
                                    <span style='font-family:@data.Valor'>@data.Valor</span>
                                    break;
                                case 3: //3=Imagen
                                    <RadzenImage Path="@data.Valor" style="width: 40px; height: 40px; border-radius: 8px;">
                                    </RadzenImage>
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Imagen" Title=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Imagen",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Imagen",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Imagen",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Imagen",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Imagen",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Imagen",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Imagen",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Imagen",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Imagen",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Imagen",dataCustomizacionPagina.AtributosColumnas)>
                        <Template Context="data">
                            <RadzenImage Path="@data.Imagen" style="width: 40px; height: 40px; border-radius: 8px;">
                            </RadzenImage>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="Habilitado" FilterValue="@Habilitado_filter" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Habilitado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Habilitado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Habilitado",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                            </RadzenCheckBox>
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <div>
                                @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                            </div>
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="FechaCreacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Property="FechaModificacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <hr>
        }

        if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
        {
            <RadzenTemplateForm TItem="Depositary.Entities.Tables.Estilo.EsquemaDetalle" Data="@EsquemaDetalle_entity" @bind-Value="EsquemaDetalle_entity" Submit="Save" Visible="@(EsquemaDetalle_entity != null)">
                <ChildContent>
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(EsquemaDetalle_entity.Id)" Name="Id" Disabled="true">
                                </RadzenNumeric>
                            </div>
                        </div>
                    }
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMAID",dataLenguaje) Component="EsquemaId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-4">
                            <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@EsquemaId"
                                Data=@Esquema_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("APLICACIONID",dataLenguaje) Component="AplicacionId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-4">
                            @if ((@Aplicacion_entities.Count > 0 && @Aplicacion_entities.FirstOrDefault(c => c.Id == @EsquemaDetalle_entity.AplicacionId) != null) || crudMode != CrudMode.Delete)
                            {
                                var dataSet = crudMode == CrudMode.Add ? Aplicacion_entities.Where(x => x.Habilitado == true) : Aplicacion_entities.Where(x => x.Habilitado == true || x.Id == EsquemaDetalle_entity.AplicacionId);
                                <RadzenDropDown AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowClear="false" TValue="Int64" Class="w-100" @bind-Value="@(EsquemaDetalle_entity.AplicacionId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Disabled="@(crudMode==CrudMode.Delete || !EsDefault || estaProcesando)" />
                            }
                            else
                            {
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@Aplicacion_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="@(crudMode==CrudMode.Delete || !EsDefault || estaProcesando)" />
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOESQUEMADETALLEID",dataLenguaje) Component="TipoEsquemaDetalleId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-4">
                            @if ((@TipoEsquemaDetalle_entities.Count > 0 && @TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == @EsquemaDetalle_entity.TipoEsquemaDetalleId) != null) || crudMode != CrudMode.Delete)
                            {
                                var dataSet = crudMode == CrudMode.Add ? TipoEsquemaDetalle_entities.Where(x => x.Habilitado == true) : TipoEsquemaDetalle_entities.Where(x => x.Habilitado == true || x.Id == EsquemaDetalle_entity.TipoEsquemaDetalleId);
                                <RadzenDropDown AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowClear="false" TValue="Int64" Class="w-100" @bind-Value="@(EsquemaDetalle_entity.TipoEsquemaDetalleId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoEsquemaDetalleValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || !EsDefault || estaProcesando)" />
                            }
                            else
                            {
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@TipoEsquemaDetalle_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoEsquemaDetalleValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || !EsDefault || estaProcesando)" />
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="display: block" @bind-Value="@(EsquemaDetalle_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete || !EsDefault || estaProcesando)">
                            </RadzenTextBox>
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: initial">
                                </RadzenRequiredValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Component="Descripcion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="display: block" @bind-Value="@(EsquemaDetalle_entity.Descripcion)" Name="Descripcion" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                            </RadzenTextBox>
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Descripcion" Text="Descripcion is required" Style="position: initial">
                                </RadzenRequiredValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Component="Valor" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-auto">
                            @switch (EsquemaDetalle_entity.TipoEsquemaDetalleId)
                            {
                                case 1: //1=Color
                                    <RadzenColorPicker @bind-Value="@EsquemaDetalle_entity.Valor" Name="Valor" ShowButton="false" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)"></RadzenColorPicker>
                                    break;
                                case 2: //2=Fuente
                                    <RadzenDropDown AllowClear="false" TValue="string" Name="Valor" @bind-Value="@(EsquemaDetalle_entity.Valor)"
                                Data=@dataFonts TextProperty="Name" ValueProperty="Name" Style="width:50%"
                                Change=@(args => SelectFontValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                    break;
                                case 3: //3=Imagen
                                    <RadzenFileInput @bind-Value="@EsquemaDetalle_entity.Valor" Error="@ErrorFileInput" Style="width:50%" Name="Valor" TValue="string" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)" />
                                    break;
                                default:
                                    <RadzenTextBox style="display: block; width:50%" @bind-Value="@(EsquemaDetalle_entity.Descripcion)" Name="Valor" Disabled="@(crudMode==CrudMode.Delete || estaProcesando)">
                                    </RadzenTextBox>
                                    break;
                            }
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Valor" Text="Valor is required" Style="position: initial">
                                </RadzenRequiredValidator>
                                if (@EsquemaDetalle_entity.TipoEsquemaDetalleId == 2 && @EsquemaDetalle_entity.Valor != null)
                                {
                                    <RadzenLabel Text="Lorem Ipsum" Style="@estiloFuente">
                                    </RadzenLabel>
                                }
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Component="Imagen" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-auto">
                            <RadzenFileInput @bind-Value="@EsquemaDetalle_entity.Imagen" Error="@ErrorFileInput_Imagen" Disabled="@(!EsDefault || estaProcesando)" TValue="string" Class="w-100" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-9">
                            <RadzenCheckBox @bind-Value=@EsquemaDetalle_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @EsquemaDetalle_entity)) Disabled="@(crudMode == CrudMode.Delete || !EsDefault || estaProcesando)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col offset-sm-3">
                            <RadzenButton Disabled="@estaProcesando" ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                            <RadzenButton Disabled="@estaProcesando" ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
            <hr>
        }

        <RadzenNotification />
    }
    else
    {
        <p>@MultilenguajeController.ObtenerTextoPorClave("SIN_PERMISO_VISUALIZACION",dataLenguaje)</p>
    }
}


@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Estilo.EsquemaDetalle EsquemaDetalle_entity = new();
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> EsquemaDetalle_entities = null;

    private bool estaCargando = true;

    private bool estaProcesando = false;

    /// <summary>
    /// Variables to handle column filter for field Banco.Habilitado
    private bool? Habilitado_filter;

    /// <summary>
    /// Variables to multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    /// <summary>
    /// Variables to handle Relation between Cuenta.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between Cuenta.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    /// <summary>
    /// Variables to handle Relation between EsquemaDetalle.EsquemaId and Esquema.Id
    /// </summary>
    private Depositary.Entities.Tables.Estilo.Esquema Esquema_entity = new();
    private List<Depositary.Entities.Tables.Estilo.Esquema>? Esquema_entities;

    /// <summary>
    /// Variables to handle Relation between EsquemaDetalle.TipoEsquemaDetalleId and TipoEsquemaDetalle.Id
    /// </summary>
    private Depositary.Entities.Tables.Estilo.TipoEsquemaDetalle TipoEsquemaDetalle_entity = new();
    private List<Depositary.Entities.Tables.Estilo.TipoEsquemaDetalle>? TipoEsquemaDetalle_entities;
    private List<Depositary.Entities.Tables.Estilo.TipoEsquemaDetalle> TipoEsquemaDetalle_TipoEsquemaDetalleId_filter;
    private IEnumerable<Int64> selectedFilter_TipoEsquemaDetalleId;

    /// <summary>
    /// Variables to handle Relation between EsquemaDetalle.AplicacionId and Aplicacion.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Aplicacion Aplicacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Aplicacion>? Aplicacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Aplicacion> Aplicacion_AplicacionId_filter;
    private IEnumerable<Int64> selectedFilter_AplicacionId;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    string estiloFuente = "";

    string nombreAnteriorEstiloDetalle = "";

    [Parameter]
    public Int64 EsquemaId { get; set; }

    [Parameter]
    public bool EsDefault { get; set; }

    private List<FontFamily> dataFonts = new();

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Estilo", "EsquemaDetalle");
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        await Task.Run(LoadFonts);
        estaCargando = false;
        StateHasChanged();

    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "EstiloEsquemaDetalle", crudMode.ToString(), dataUsuario.Id);
        estaProcesando = false;
        Depositary.Business.Tables.Estilo.EsquemaDetalle entity = new Depositary.Business.Tables.Estilo.EsquemaDetalle();
        entity.Where.Add(Depositary.Business.Tables.Estilo.EsquemaDetalle.ColumnEnum.EsquemaId, Depositary.sqlEnum.OperandEnum.Equal, EsquemaId);
        EsquemaDetalle_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Estilo.Esquema Esquema_local = new();
        Esquema_entities = Esquema_local.Items();

        Depositary.Business.Tables.Estilo.TipoEsquemaDetalle TipoEsquemaDetalle_local = new();
        TipoEsquemaDetalle_entities = TipoEsquemaDetalle_local.Items();
        TipoEsquemaDetalle_TipoEsquemaDetalleId_filter = TipoEsquemaDetalle_entities.Where(x => EsquemaDetalle_entities.Select(x => x.TipoEsquemaDetalleId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Aplicacion Aplicacion_local = new();
        Aplicacion_entities = Aplicacion_local.Items();
        Aplicacion_AplicacionId_filter = Aplicacion_entities.Where(x => EsquemaDetalle_entities.Select(x => x.AplicacionId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => EsquemaDetalle_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => EsquemaDetalle_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();
    }

    /// <summary>
    /// Loads fonts dropdown
    /// </summary>
    private void LoadFonts()
    {
        using (InstalledFontCollection col = new InstalledFontCollection())
        {
            foreach (FontFamily fa in col.Families)
            {
                dataFonts.Add(fa);
            }
        }
    }

    #endregion

    private List<Depositary.Entities.Tables.Estilo.Esquema> ObtenerEsquemasRestantes()
    {
        List<Depositary.Entities.Tables.Estilo.Esquema> resultado = new();

        Depositary.Business.Tables.Estilo.Esquema oEsquema = new();
        oEsquema.Where.Add(Depositary.Business.Tables.Estilo.Esquema.ColumnEnum.Id, Depositary.sqlEnum.OperandEnum.NotEqual, EsquemaId);

        resultado = oEsquema.Items();

        return resultado;
    }

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> ObtenerDetallesEsquemas(string Nombre, Int64 pDetalleEsquemaId)
    {
        List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> resultado = new();

        Depositary.Business.Tables.Estilo.EsquemaDetalle oEsquemaDetalle = new();
        oEsquemaDetalle.Where.Add(Depositary.Business.Tables.Estilo.EsquemaDetalle.ColumnEnum.Id, Depositary.sqlEnum.OperandEnum.NotEqual, pDetalleEsquemaId);
        oEsquemaDetalle.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Tables.Estilo.EsquemaDetalle.ColumnEnum.Nombre, Depositary.sqlEnum.OperandEnum.Equal, Nombre);

        resultado = oEsquemaDetalle.Items();

        return resultado;
    }
    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        EsquemaDetalle_entity = new();
        //Relations entities initialization
        Esquema_entity = new();
        TipoEsquemaDetalle_entity = new();
        Aplicacion_entity = new();
        crudMode = CrudMode.Add;
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "EstiloEsquemaDetalle", crudMode.ToString(), dataUsuario.Id);
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Estilo.EsquemaDetalle item, bool delete)
    {
        EsquemaDetalle_entity = item;
        Esquema_entity = new()
            {
                Id = Esquema_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.EsquemaId).Id,
                Nombre = Esquema_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.EsquemaId).Nombre
            };
        TipoEsquemaDetalle_entity = new()
            {
                Id = TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.TipoEsquemaDetalleId).Id,
                Nombre = TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.TipoEsquemaDetalleId).Nombre
            };
        Aplicacion_entity = new()
            {
                Id = Aplicacion_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.AplicacionId).Id,
                Nombre = Aplicacion_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.AplicacionId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
        {
            crudMode = CrudMode.Edit;
            nombreAnteriorEstiloDetalle = EsquemaDetalle_entity.Nombre;
        }

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "EstiloEsquemaDetalle", crudMode.ToString() + " Id: " + item.Id, dataUsuario.Id);

    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        estaProcesando = true;
        await Task.Run(Procesar);
        estaProcesando = false;
    }

    private async Task Procesar()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Estilo.EsquemaDetalle crud = new();
        EsquemaDetalle_entity.EsquemaId = EsquemaId;
        foreach (var property in EsquemaDetalle_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.FechaModificacion = null;
                    }
                    else
                    {
                        EsquemaDetalle_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.UsuarioCreacion = dataUsuario.Id;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        EsquemaDetalle_entity.UsuarioModificacion = dataUsuario.Id;
                    }
                    break;
            }
        }

        switch (crudMode)
        {
            case CrudMode.Add:
                if (EsDefault)
                {
                    crud.BeginTransaction();
                    try
                    {

                        crud.Add(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);

                        //Obtenemos los ID de todos los esquemas existentes (salvo este) e insertamos el registro en ellos
                        var esquemasRestantes = ObtenerEsquemasRestantes();

                        if (esquemasRestantes.Count > 0)
                        {
                            foreach (var esquema in esquemasRestantes)
                            {
                                Depositary.Business.Tables.Estilo.EsquemaDetalle oEsquemaDetalle = new();
                                EsquemaDetalle_entity.EsquemaId = esquema.Id;
                                oEsquemaDetalle.Add(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                            }
                        }

                        crud.EndTransaction(true);
                        summary = "El registro se ha ";
                        actionInformation = "agregado a este esquema y a los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    catch (Exception ex)
                    {
                        crud.EndTransaction(false);
                        AuditController.Log(ex, dataUsuario.Id);
                        summary = "Error al procesar.";
                        actionInformation = ex.Message;
                        severityType = NotificationSeverity.Error;
                    }
                }
                break;
            case CrudMode.Edit:
                try
                {
                    //Si se modifica la plantilla default se arrastra el cambio (salvo el valor y la descripcion) al resto de los esquemas
                    if (EsDefault)
                    {
                        crud.Update(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);

                        //Obtenemos los ID de todos los detalles de esquemas existentes (salvo este)
                        var esquemasDetallesRestantes = ObtenerDetallesEsquemas(nombreAnteriorEstiloDetalle, EsquemaDetalle_entity.Id);

                        if (esquemasDetallesRestantes.Count > 0)
                        {
                            foreach (var esquemaDetalle in esquemasDetallesRestantes)
                            {
                                Depositary.Business.Tables.Estilo.EsquemaDetalle oEsquemaDetalle = new();

                                esquemaDetalle.TipoEsquemaDetalleId = EsquemaDetalle_entity.TipoEsquemaDetalleId;
                                esquemaDetalle.Nombre = EsquemaDetalle_entity.Nombre;
                                esquemaDetalle.AplicacionId = EsquemaDetalle_entity.AplicacionId;
                                esquemaDetalle.Imagen = EsquemaDetalle_entity.Imagen;
                                esquemaDetalle.FechaModificacion = DateTime.Now;
                                esquemaDetalle.UsuarioModificacion = dataUsuario.Id;
                                esquemaDetalle.Habilitado = EsquemaDetalle_entity.Habilitado;
                                oEsquemaDetalle.Update(esquemaDetalle, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                            }
                        }

                        summary = "El registro se ha ";
                        actionInformation = "modificado en este esquema y en los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    else
                    {
                        crud.Update(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                        summary = "El registro se ha ";
                        actionInformation = "modificado.";
                        severityType = NotificationSeverity.Success;
                    }
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    if (EsDefault)
                    {
                        EsquemaDetalle_entity.Habilitado = false;
                        crud.Update(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);

                        //Obtenemos los ID de todos los detalles de esquemas existentes (salvo este)
                        var esquemasDetallesRestantes = ObtenerDetallesEsquemas(EsquemaDetalle_entity.Nombre, EsquemaDetalle_entity.Id);

                        if (esquemasDetallesRestantes.Count > 0)
                        {
                            foreach (var esquemaDetalle in esquemasDetallesRestantes)
                            {
                                Depositary.Business.Tables.Estilo.EsquemaDetalle oEsquemaDetalle = new();

                                esquemaDetalle.Habilitado = false;
                                oEsquemaDetalle.Update(esquemaDetalle, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                            }
                        }

                        summary = "El registro se ha ";
                        actionInformation = "eliminado en este esquema y en los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    else
                    {
                        EsquemaDetalle_entity.Habilitado = false;
                        crud.Update(EsquemaDetalle_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                        summary = "El registro se ha ";
                        actionInformation = "eliminado.";
                        severityType = NotificationSeverity.Success;
                    }
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        //Recargamos los estilos y los guardamos en el session storage.
        await sessionStorage.RemoveItemAsync("DataEsquemaDetalle");
        await sessionStorage.SetItemAsync("DataEsquemaDetalle", EstiloController.ObtenerEsquemaDetalles(dataUsuario.Id));

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }

    #region Grid events

    private void esquemaDetalleCellRender(DataGridCellRenderEventArgs<Depositary.Entities.Tables.Estilo.EsquemaDetalle>
    args)
    {
        if (args.Column.Property == "Valor")
        {
            switch (args.Data.TipoEsquemaDetalleId)
            {
                case 1: //1=Color
                    args.Attributes.Add("style", $"background-color: {(args.Data.Valor)};");
                    break;

            }
        }

        if (!args.Data.Habilitado)
            args.Attributes.Add("class", "row-highlight-disabled");
        else
            args.Attributes.Add("class", "rz-datatable-even");
    }

    #endregion

    /// <summary>
    /// Crud mode cancellation and default mode
    ///
    ///</summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    ///
    ///</summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }

    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// EsquemaDetalle_entity.Imagen input error
    ///
    ///</summary>
    ///
    //<param name = "args" ></ param >
    private void ErrorFileInput_Imagen(UploadErrorEventArgs args)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al procesar archivo.",
                Detail = args.Message,
                Duration = 4000
            });
    }

    /// <summary>
    /// Esquema value changed
    ///
    ///</summary>
    ///
    //<param name="item"></param>
    private void SelectEsquemaValueChanged(object item)
    {
    }

    /// <summary>
    /// TipoEsquemaDetalle value changed
    ///
    ///</summary>
    ///
    //<param name="item"></param>
    private void SelectTipoEsquemaDetalleValueChanged(object item)
    {
        EsquemaDetalle_entity.Valor = null;
        StateHasChanged();
    }

    private void SelectFontValueChanged(object item)
    {
        estiloFuente = "position: absolute; font-family: " + item;
        StateHasChanged();
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    ///
    ///</summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Estilo.EsquemaDetalle item)
    {
        EsquemaDetalle_entity = item;
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_AplicacionId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_AplicacionId_Changed(object value)
    {
        if (selectedFilter_AplicacionId != null && !selectedFilter_AplicacionId.Any())
        {
            selectedFilter_AplicacionId = null;
        }
    }

    /// <summary>
    /// selectedFilter_TipoEsquemaDetalleId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_TipoEsquemaDetalleId_Changed(object value)
    {
        if (selectedFilter_TipoEsquemaDetalleId != null && !selectedFilter_TipoEsquemaDetalleId.Any())
        {
            selectedFilter_TipoEsquemaDetalleId = null;
        }
    }

    private void ErrorFileInput(UploadErrorEventArgs args)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al procesar archivo.",
                Detail = args.Message,
                Duration = 4000
            });
    }
    #endregion

    #region Export

    #endregion

    }
