@using Permaquim.Depositary.Web.Administration.Controllers;
@using System.Drawing.Text;
@using System.Drawing

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (estaCargando)
{
    <div class="spinner"></div>
}
@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle", dataFunciones, "PuedeVisualizar"))
    {
        switch (crudMode)
        {
            case CrudMode.Add:
                <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLE",dataLenguaje) </h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Delete:
                <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLE",dataLenguaje)? </h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Edit:
                <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLE",dataLenguaje) </h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.List:
                <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <div>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMADETALLE",dataLenguaje) </h4>
                        </div>
                    </ChildContent>
                </RadzenBadge>
                break;
        }
        <hr>
        if (crudMode == CrudMode.List)
        {
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" CellRender="@esquemaDetalleCellRender" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@EsquemaDetalle_entities" TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                        <HeaderTemplate>
                            <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("NEW_BUTTON",dataLenguaje) Click="Add">
                            </RadzenButton>
                        </HeaderTemplate>
                        <Template Context="element">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquemaDetalle",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Title=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMAID",dataLenguaje) Property="EsquemaId" Width="100px">
                        <Template>
                            @if (Esquema_entities.FirstOrDefault(c => c.Id == @context.EsquemaId) != null)
                            {
                                <RadzenLabel Text="@Esquema_entities.FirstOrDefault( c => c.Id == @context.EsquemaId).Nombre" Component="EsquemaId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="EsquemaId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Title=@MultilenguajeController.ObtenerTextoPorClave("TIPOESQUEMADETALLEID",dataLenguaje) Property="TipoEsquemaDetalleId" Width="100px">
                        <Template>
                            @if (TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == @context.TipoEsquemaDetalleId) != null)
                            {
                                <RadzenLabel Text="@TipoEsquemaDetalle_entities.FirstOrDefault( c => c.Id == @context.TipoEsquemaDetalleId).Nombre" Component="TipoEsquemaDetalleId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="TipoEsquemaDetalleId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Nombre" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Descripcion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Valor" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @switch (data.TipoEsquemaDetalleId)
                            {
                                case 1: //1=Color
                                    <span style='color:@data.Valor' />
                                    break;
                                case 2: //2=Fuente
                                    <span style='font-family:@data.Valor'>@data.Valor</span>
                                    break;
                                case 3: //3=Imagen
                                    <RadzenImage Path="@data.Valor" style="width: 40px; height: 40px; border-radius: 8px;">
                                    </RadzenImage>
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Imagen" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenImage Path="@data.Imagen" style="width: 40px; height: 40px; border-radius: 8px;">
                            </RadzenImage>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="Habilitado" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                            </RadzenCheckBox>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="UsuarioCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="UsuarioModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Property="FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <hr>
        }

        if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
        {
            <RadzenTemplateForm TItem="DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle" Data="@EsquemaDetalle_entity" @bind-Value="EsquemaDetalle_entity" Submit="Save" Visible="@(EsquemaDetalle_entity != null)">
                <ChildContent>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(EsquemaDetalle_entity.Id)" Name="Id" Disabled="true">
                            </RadzenNumeric>
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ESQUEMAID",dataLenguaje) Component="EsquemaId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@EsquemaId"
                                Data=@Esquema_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOESQUEMADETALLEID",dataLenguaje) Component="TipoEsquemaDetalleId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            @if ((@TipoEsquemaDetalle_entities.Count > 0 && @TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == @EsquemaDetalle_entity.TipoEsquemaDetalleId) != null) || crudMode != CrudMode.Delete)
                            {
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" @bind-Value="@(EsquemaDetalle_entity.TipoEsquemaDetalleId)"
                                Data=@TipoEsquemaDetalle_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoEsquemaDetalleValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                            }
                            else
                            {
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100"
                                Data=@TipoEsquemaDetalle_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoEsquemaDetalleValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="display: block" @bind-Value="@(EsquemaDetalle_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                            </RadzenTextBox>
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: initial">
                                </RadzenRequiredValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Component="Descripcion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="display: block" @bind-Value="@(EsquemaDetalle_entity.Descripcion)" Name="Descripcion" Disabled="@(crudMode==CrudMode.Delete)">
                            </RadzenTextBox>
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Descripcion" Text="Descripcion is required" Style="position: initial">
                                </RadzenRequiredValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Component="Valor" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-9">
                            @switch (EsquemaDetalle_entity.TipoEsquemaDetalleId)
                            {
                                case 1: //1=Color
                                    <RadzenColorPicker @bind-Value="@EsquemaDetalle_entity.Valor" Name="Valor" ShowButton="true" Disabled="@(crudMode==CrudMode.Delete)"></RadzenColorPicker>
                                    break;
                                case 2: //2=Fuente
                                    <RadzenDropDown AllowClear="false" TValue="string" Name="Valor" @bind-Value="@(EsquemaDetalle_entity.Valor)"
                                Data=@dataFonts TextProperty="Name" ValueProperty="Name" Style="width:50%"
                                Change=@(args => SelectFontValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                                    break;
                                case 3: //3=Imagen
                                    <RadzenFileInput @bind-Value="@EsquemaDetalle_entity.Valor" Error="@ErrorFileInput" Style="width:50%" Name="Valor" TValue="string" Disabled="@(crudMode==CrudMode.Delete)" />
                                    break;
                                default:
                                    <RadzenTextBox style="display: block; width:50%" @bind-Value="@(EsquemaDetalle_entity.Descripcion)" Name="Valor" Disabled="@(crudMode==CrudMode.Delete)">
                                    </RadzenTextBox>
                                    break;
                            }
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenRequiredValidator Component="Valor" Text="Valor is required" Style="position: initial">
                                </RadzenRequiredValidator>
                                if (@EsquemaDetalle_entity.TipoEsquemaDetalleId == 2 && @EsquemaDetalle_entity.Valor != null)
                                {
                                    <RadzenLabel Text="Lorem Ipsum" Style="@estiloFuente">
                                    </RadzenLabel>
                                }
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Component="Imagen" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-9">
                            <RadzenFileInput @bind-Value="@EsquemaDetalle_entity.Imagen" Error="@ErrorFileInput_Imagen" TValue="string" Class="w-100" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-9">
                            <RadzenCheckBox @bind-Value=@EsquemaDetalle_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @EsquemaDetalle_entity)) Disabled="@(crudMode == CrudMode.Delete)" />
                        </div>
                    </div>
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Component="UsuarioCreacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(EsquemaDetalle_entity.UsuarioCreacion)" Name="UsuarioCreacion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenNumeric>
                            </div>
                        </div>
                    }
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Component="FechaCreacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(EsquemaDetalle_entity.FechaCreacion)" Name="FechaCreacion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenDatePicker>
                            </div>
                        </div>
                    }
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Component="UsuarioModificacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenNumeric TValue="long?" style="display: block; width: 100%" @bind-Value="@(EsquemaDetalle_entity.UsuarioModificacion)" Name="UsuarioModificacion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenNumeric>
                            </div>
                        </div>
                    }
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Component="FechaModificacion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(EsquemaDetalle_entity.FechaModificacion)" Name="FechaModificacion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenDatePicker>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col offset-sm-3">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("ACCEPT_BUTTON",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("CANCEL_BUTTON",dataLenguaje) Click="Cancel">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
            <hr>
        }

        <RadzenNotification />
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}


@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle EsquemaDetalle_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle> EsquemaDetalle_entities = null;

    private bool estaCargando = true;


    /// <summary>
    /// Variables to multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    private List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();


    /// <summary>
    /// Variables to handle Relation between EsquemaDetalle.EsquemaId and Esquema.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Estilo.Esquema Esquema_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.Esquema>? Esquema_entities;

    /// <summary>
    /// Variables to handle Relation between EsquemaDetalle.TipoEsquemaDetalleId and TipoEsquemaDetalle.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Estilo.TipoEsquemaDetalle TipoEsquemaDetalle_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.TipoEsquemaDetalle>? TipoEsquemaDetalle_entities;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Int64? userId = null;

    string estiloFuente = "";

    [Parameter]
    public Int64 EsquemaId { get; set; }

    private List<FontFamily> dataFonts = new();

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFunciones = await sessionStorage.GetItemAsync<List<SeguridadEntities.FuncionRol>>("DataFunciones");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        await Task.Run(LoadFonts);
        estaCargando = false;
        StateHasChanged();
        userId = await sessionStorage.GetItemAsync<Int64?>("Id");
        if (userId == null)
            NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DepositarioAdminWeb.Business.Tables.Estilo.EsquemaDetalle entity = new DepositarioAdminWeb.Business.Tables.Estilo.EsquemaDetalle();
        entity.Where.Add(DepositarioAdminWeb.Business.Tables.Estilo.EsquemaDetalle.ColumnEnum.EsquemaId, DepositarioAdminWeb.sqlEnum.OperandEnum.Equal, EsquemaId);
        EsquemaDetalle_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        DepositarioAdminWeb.Business.Tables.Estilo.Esquema Esquema_local = new();
        Esquema_entities = Esquema_local.Items();

        DepositarioAdminWeb.Business.Tables.Estilo.TipoEsquemaDetalle TipoEsquemaDetalle_local = new();
        TipoEsquemaDetalle_entities = TipoEsquemaDetalle_local.Items();

    }

    /// <summary>
    /// Loads fonts dropdown
    /// </summary>
    private void LoadFonts()
    {
        using (InstalledFontCollection col = new InstalledFontCollection())
        {
            foreach (FontFamily fa in col.Families)
            {
                dataFonts.Add(fa);
            }
        }
    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        EsquemaDetalle_entity = new();
        //Relations entities initialization
        Esquema_entity = new();
        TipoEsquemaDetalle_entity = new();
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle item, bool delete)
    {
        EsquemaDetalle_entity = item;
        Esquema_entity = new()
            {
                Id = Esquema_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.EsquemaId).Id,
                Nombre = Esquema_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.EsquemaId).Nombre
            };
        TipoEsquemaDetalle_entity = new()
            {
                Id = TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.TipoEsquemaDetalleId).Id,
                Nombre = TipoEsquemaDetalle_entities.FirstOrDefault(c => c.Id == EsquemaDetalle_entity.TipoEsquemaDetalleId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        estaCargando = true;
        StateHasChanged();
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        DepositarioAdminWeb.Business.Tables.Estilo.EsquemaDetalle crud = new();
        EsquemaDetalle_entity.EsquemaId = EsquemaId;
        foreach (var property in EsquemaDetalle_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.FechaModificacion = null;
                    }
                    else
                    {
                        EsquemaDetalle_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.UsuarioCreacion = userId.Value;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        EsquemaDetalle_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        EsquemaDetalle_entity.UsuarioModificacion = userId.Value;
                    }
                    break;
            }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    crud.Add(EsquemaDetalle_entity);
                    summary = "El registro se ha ";
                    actionInformation = "agregado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    crud.Update(EsquemaDetalle_entity);
                    summary = "El registro se ha ";
                    actionInformation = "modificado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    EsquemaDetalle_entity.Habilitado = false;
                    crud.Update(EsquemaDetalle_entity);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        //Recargamos los estilos y los guardamos en el session storage.
        await sessionStorage.RemoveItemAsync("DataEsquemaDetalle");
        await sessionStorage.SetItemAsync("DataEsquemaDetalle", EstiloController.ObtenerEsquemaDetalles(userId.Value));

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
        estaCargando = false;
        StateHasChanged();
    }

    #region Grid events

    private void esquemaDetalleCellRender(DataGridCellRenderEventArgs<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle> args)
    {
        if (args.Column.Property == "Valor")
        {
            switch (args.Data.TipoEsquemaDetalleId)
            {
                case 1: //1=Color
                    args.Attributes.Add("style", $"background-color: {(args.Data.Valor)};");
                    break;

            }
        }
    }

    #endregion

    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// EsquemaDetalle_entity.Imagen input error
    /// </summary>
    /// <param name="args"></param>
    private void ErrorFileInput_Imagen(UploadErrorEventArgs args)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al procesar archivo.",
                Detail = args.Message,
                Duration = 4000
            });
    }

    /// <summary>
    /// Esquema value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectEsquemaValueChanged(object item)
    {
    }

    /// <summary>
    /// TipoEsquemaDetalle value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectTipoEsquemaDetalleValueChanged(object item)
    {
        EsquemaDetalle_entity.Valor = null;
        StateHasChanged();
    }

    private void SelectFontValueChanged(object item)
    {
        estiloFuente = "position: absolute; font-family: " + item;
        StateHasChanged();
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle item)
    {
        EsquemaDetalle_entity = item;
    }

    private void ErrorFileInput(UploadErrorEventArgs args)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al procesar archivo.",
                Detail = args.Message,
                Duration = 4000
            });
    }
    #endregion

    #region Export

    #endregion

    }
