@page "/EstiloEsquemaCustomCrud"
@using Permaquim.Depositary.Web.Administration.Components.CustomCrud
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("EstiloEsquema", dataFunciones, "PuedeVisualizar"))
    {
        @if (Esquema_entities == null)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else
        {
            switch (crudMode)
            {
                case CrudMode.Add:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMA",dataLenguaje) </h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Delete:
                    <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMA",dataLenguaje)? </h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Edit:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMA",dataLenguaje) </h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.List:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <div>
                                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_TITLE",dataLenguaje)  @MultilenguajeController.ObtenerTextoPorClave("ESQUEMA",dataLenguaje) </h4>
                            </div>
                        </ChildContent>
                    </RadzenBadge>
                    break;
            }
            <hr>
            if (crudMode == CrudMode.List)
            {
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" RowExpand="@expandirEsquema" RowRender="@esquemaRowRender" RowCollapse="@colapsarEsquema" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Esquema_entities" TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                            <HeaderTemplate>
                                <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquema",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("NEW_BUTTON",dataLenguaje) Click="Add">
                                </RadzenButton>
                            </HeaderTemplate>
                            <Template Context="element">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquema",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("EstiloEsquema",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="Nombre" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="Descripcion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="Habilitado" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="UsuarioCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="UsuarioModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Property="FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                    </Columns>
                    <Template Context="esquema">
                        <EsquemaDetalle_Crud EsquemaId="@(esquema.Id)"></EsquemaDetalle_Crud>
                    </Template>
                </RadzenDataGrid>
                <hr>
            }

            if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
            {
                <RadzenTemplateForm TItem="DepositarioAdminWeb.Entities.Tables.Estilo.Esquema" Data="@Esquema_entity" @bind-Value="Esquema_entity" Submit="Save" Visible="@(Esquema_entity != null)">
                    <ChildContent>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(Esquema_entity.Id)" Name="Id" Disabled="true">
                                </RadzenNumeric>
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Esquema_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("DESCRIPCION",dataLenguaje) Component="Descripcion" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(Esquema_entity.Descripcion)" Name="Descripcion" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Descripcion" Text="Descripcion is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@Esquema_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @Esquema_entity)) Disabled="@(crudMode == CrudMode.Delete)" />
                            </div>
                        </div>
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(Esquema_entity.UsuarioCreacion)" Name="UsuarioCreacion" Disabled="@(crudMode==CrudMode.Delete)">
                                    </RadzenNumeric>
                                </div>
                            </div>
                        }
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Component="FechaCreacion" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(Esquema_entity.FechaCreacion)" Name="FechaCreacion" Disabled="@(crudMode==CrudMode.Delete)">
                                    </RadzenDatePicker>
                                </div>
                            </div>
                        }
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenNumeric TValue="long?" style="display: block; width: 100%" @bind-Value="@(Esquema_entity.UsuarioModificacion)" Name="UsuarioModificacion" Disabled="@(crudMode==CrudMode.Delete)">
                                    </RadzenNumeric>
                                </div>
                            </div>
                        }
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Component="FechaModificacion" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(Esquema_entity.FechaModificacion)" Name="FechaModificacion" Disabled="@(crudMode==CrudMode.Delete)">
                                    </RadzenDatePicker>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("ACCEPT_BUTTON",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("CANCEL_BUTTON",dataLenguaje) Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
                <hr>
            }

            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Estilo.Esquema Esquema_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.Esquema> Esquema_entities = null;

    private List<DepositarioAdminWeb.Entities.Tables.Estilo.Esquema> rowsEsquemasExpandidos = new List<DepositarioAdminWeb.Entities.Tables.Estilo.Esquema>();

    /// <summary>
    /// Variables to multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<Entities.FuncionRol> dataFunciones;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Int64? userId = null;

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFunciones = await sessionStorage.GetItemAsync<List<Entities.FuncionRol>>("DataFunciones");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        userId = await sessionStorage.GetItemAsync<Int64?>("Id");
        if (userId == null)
            NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DepositarioAdminWeb.Business.Tables.Estilo.Esquema entity = new();
        Esquema_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Esquema_entity = new();
        //Relations entities initialization
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(DepositarioAdminWeb.Entities.Tables.Estilo.Esquema item, bool delete)
    {
        Esquema_entity = item;
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        DepositarioAdminWeb.Business.Tables.Estilo.Esquema crud = new();
        foreach (var property in Esquema_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Esquema_entity.FechaModificacion = null;
                    }
                    else
                    {
                        Esquema_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Esquema_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Esquema_entity.UsuarioCreacion = userId.Value;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Esquema_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        Esquema_entity.UsuarioModificacion = userId.Value;
                    }
                    break;
            }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    crud.Add(Esquema_entity);
                    summary = "El registro se ha ";
                    actionInformation = "agregado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    crud.Update(Esquema_entity);
                    summary = "El registro se ha ";
                    actionInformation = "modificado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    Esquema_entity.Habilitado = false;
                    crud.Update(Esquema_entity);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }

    #region Grid events

    protected async Task expandirEsquema(DepositarioAdminWeb.Entities.Tables.Estilo.Esquema args)
    {
        rowsEsquemasExpandidos.Add(args);
    }

    protected async Task colapsarEsquema(DepositarioAdminWeb.Entities.Tables.Estilo.Esquema args)
    {
        rowsEsquemasExpandidos.RemoveAll(x => x.Id == args.Id);
    }

    void esquemaRowRender(RowRenderEventArgs<DepositarioAdminWeb.Entities.Tables.Estilo.Esquema> args)
    {
        if (rowsEsquemasExpandidos.Where(x => x.Id == args.Data.Id).ToList().Count > 0)
        {
            args.Attributes.Add("class", "row-highlight");
        }
        else
        {
            args.Attributes.Add("class", "rz-datatable-even");
        }
    }

    #endregion

    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, DepositarioAdminWeb.Entities.Tables.Estilo.Esquema item)
    {
        Esquema_entity = item;
    }
    #endregion

    #region Export

    #endregion

}
