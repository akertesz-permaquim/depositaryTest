@page "/ValorDenominacionCustomCrud"

@using Permaquim.Depositary.Web.Administration.Controllers

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (Denominacion_entities == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    switch (crudMode)
    {
        case CrudMode.Add:
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                <ChildContent>
                    <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_TITLE",dataLenguaje) </h4>
                </ChildContent>
            </RadzenBadge>
            break;
        case CrudMode.Delete:
            <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                <ChildContent>
                    <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_TITLE",dataLenguaje) </h4>
                </ChildContent>
            </RadzenBadge>
            break;
        case CrudMode.Edit:
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                <ChildContent>
                    <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_TITLE",dataLenguaje) </h4>
                </ChildContent>
            </RadzenBadge>
            break;
        case CrudMode.List:
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                <ChildContent>
                    <div>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_TITLE",dataLenguaje) </h4>
                    </div>
                </ChildContent>
            </RadzenBadge>
            break;
    }
    <hr>
    if (crudMode == CrudMode.List)
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Denominacion_entities" TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                    <HeaderTemplate>
                        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Text=@MultilenguajeController.ObtenerTextoPorClave("NEW_BUTTON",dataLenguaje) Click="Add">
                        </RadzenButton>
                    </HeaderTemplate>
                    <Template Context="element">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Nombre" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Title=@MultilenguajeController.ObtenerTextoPorClave("TIPOVALORID",dataLenguaje) Property="TipoValorId" Width="100px">
                    <Template>
                        @if (Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == @context.TipoValorId) != null)
                        {
                            <RadzenLabel Text="@Tipo_TipoValorId_entities.FirstOrDefault( c => c.Id == @context.TipoValorId).Nombre" Component="TipoValorId" style="width: 100%">
                            </RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel Text="No data available" Component="TipoValorId" style="width: 100%">
                            </RadzenLabel>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Title=@MultilenguajeController.ObtenerTextoPorClave("MONEDAID",dataLenguaje) Property="MonedaId" Width="100px">
                    <Template>
                        @if (Moneda_MonedaId_entities.FirstOrDefault(c => c.Id == @context.MonedaId) != null)
                        {
                            <RadzenLabel Text="@Moneda_MonedaId_entities.FirstOrDefault( c => c.Id == @context.MonedaId).Nombre" Component="MonedaId" style="width: 100%">
                            </RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel Text="No data available" Component="MonedaId" style="width: 100%">
                            </RadzenLabel>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Unidades" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("UNIDADES",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Imagen" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenImage Path="@data.Imagen" style="width: 40px; height: 40px; border-radius: 8px;">
                        </RadzenImage>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="CodigoCcTalk" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("CODIGOCCTALK",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Posicion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("POSICION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="Habilitado" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                        </RadzenCheckBox>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px">
                    <Template>
                        @if (Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion) != null)
                        {
                            <RadzenLabel Text="@Usuario_UsuarioCreacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioCreacion).NickName" Component="UsuarioCreacion" style="width: 100%">
                            </RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                            </RadzenLabel>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px">
                    <Template>
                        @if (Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion) != null)
                        {
                            <RadzenLabel Text="@Usuario_UsuarioModificacion_entities.FirstOrDefault( c => c.Id == @context.UsuarioModificacion).NickName" Component="UsuarioModificacion" style="width: 100%">
                            </RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                            </RadzenLabel>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Property="FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <hr>
    }

    if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
    {
        <RadzenTemplateForm TItem="DepositarioAdminWeb.Entities.Tables.Valor.Denominacion" Data="@Denominacion_entity" @bind-Value="Denominacion_entity" Submit="Save" Visible="@(Denominacion_entity != null)">
            <ChildContent>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(Denominacion_entity.Id)" Name="Id" Disabled="true">
                        </RadzenNumeric>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("NOMBRE",dataLenguaje) Component="Nombre" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="display: block" @bind-Value="@(Denominacion_entity.Nombre)" Name="Nombre" Disabled="@(crudMode==CrudMode.Delete)">
                        </RadzenTextBox>
                        @if (@crudMode != CrudMode.Delete)
                        {
                            <RadzenRequiredValidator Component="Nombre" Text="Nombre is required" Style="position: absolute">
                            </RadzenRequiredValidator>
                        }
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOVALORID",dataLenguaje) Component="TipoValorId" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        @if ((@Tipo_TipoValorId_entities.Count > 0 && @Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == @Denominacion_entity.TipoValorId) != null) || crudMode != CrudMode.Delete)
                        {
                            <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(Denominacion_entity.TipoValorId)"
                                Data=@Tipo_TipoValorId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipo_TipoValorIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                        }
                        else
                        {
                            <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@Tipo_TipoValorId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipo_TipoValorIdValueChanged(args))
                                Disabled="@(crudMode==CrudMode.Delete)" />
                        }
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("MONEDAID",dataLenguaje) Component="MonedaId" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" Value="@MonedaId"
                                Data=@Moneda_MonedaId_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("UNIDADES",dataLenguaje) Component="Unidades" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenNumeric TValue="decimal" style="display: block; width: 100%" @bind-Value="@(Denominacion_entity.Unidades)" Name="Unidades" Disabled="@(crudMode==CrudMode.Delete)">
                        </RadzenNumeric>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("IMAGEN",dataLenguaje) Component="Imagen" Style="margin-left: 0px; vertical-align: middle;" />
                    </div>
                    <div class="col-md-9">
                        <RadzenFileInput @bind-Value="@Denominacion_entity.Imagen" TValue="string" Class="w-100" />
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("CODIGOCCTALK",dataLenguaje) Component="CodigoCcTalk" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="display: block" @bind-Value="@(Denominacion_entity.CodigoCcTalk)" Name="CodigoCcTalk" Disabled="@(crudMode==CrudMode.Delete)">
                        </RadzenTextBox>
                        @if (@crudMode != CrudMode.Delete)
                        {
                            <RadzenRequiredValidator Component="CodigoCcTalk" Text="CodigoCcTalk is required" Style="position: absolute">
                            </RadzenRequiredValidator>
                        }
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("POSICION",dataLenguaje) Component="Posicion" style="width: 100%">
                        </RadzenLabel>
                    </div>
                    <div class="col-md-9">
                        <RadzenNumeric TValue="int" style="display: block; width: 100%" @bind-Value="@(Denominacion_entity.Posicion)" Name="Posicion" Disabled="@(crudMode==CrudMode.Delete)">
                        </RadzenNumeric>
                    </div>
                </div>
                <div style="margin-bottom: 1rem" class="row">
                    <div class="col-md-3">
                        <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                    </div>
                    <div class="col-md-9">
                        <RadzenCheckBox @bind-Value=@Denominacion_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @Denominacion_entity)) Disabled="@(crudMode == CrudMode.Delete)" />
                    </div>
                </div>
                @if (crudMode != CrudMode.Add)
                {
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Component="UsuarioCreacion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            @if ((@Usuario_UsuarioCreacion_entities.Count > 0 && @Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @Denominacion_entity.UsuarioCreacion) != null) || crudMode != CrudMode.Delete)
                            {
                                <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(Denominacion_entity.UsuarioCreacion)"
                                Data=@Usuario_UsuarioCreacion_entities TextProperty="NickName" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                Disabled="true" />
                            }
                            else
                            {
                                <RadzenDropDown AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@Usuario_UsuarioCreacion_entities TextProperty="NickName" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioCreacionValueChanged(args))
                                Disabled="true" />
                            }
                        </div>
                    </div>
                }
                @if (crudMode != CrudMode.Add)
                {
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Component="FechaCreacion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(Denominacion_entity.FechaCreacion)" Name="FechaCreacion" Disabled="true">
                            </RadzenDatePicker>
                        </div>
                    </div>
                }
                @if (crudMode != CrudMode.Add)
                {
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Component="UsuarioModificacion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            @if ((@Usuario_UsuarioModificacion_entities.Count > 0 && @Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @Denominacion_entity.UsuarioModificacion) != null) || crudMode != CrudMode.Delete)
                            {
                                <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100" @bind-Value="@(Denominacion_entity.UsuarioModificacion)"
                                Data=@Usuario_UsuarioModificacion_entities TextProperty="NickName" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                Disabled="true" />
                            }
                            else
                            {
                                <RadzenDropDown AllowClear="true" TValue="Int64?" Class="w-100"
                                Data=@Usuario_UsuarioModificacion_entities TextProperty="NickName" ValueProperty="Id"
                                Change=@(args => SelectUsuario_UsuarioModificacionValueChanged(args))
                                Disabled="true" />
                            }
                        </div>
                    </div>
                }
                @if (crudMode != CrudMode.Add)
                {
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Component="FechaModificacion" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-9">
                            <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="width: 25%" @bind-Value="@(Denominacion_entity.FechaModificacion)" Name="FechaModificacion" Disabled="true">
                            </RadzenDatePicker>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col offset-sm-3">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("ACCEPT_BUTTON",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("CANCEL_BUTTON",dataLenguaje) Click="Cancel">
                        </RadzenButton>
                    </div>
                </div>
            </ChildContent>
        </RadzenTemplateForm>
        <hr>
    }

    <RadzenNotification />
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Valor.Denominacion Denominacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Valor.Denominacion> Denominacion_entities = null;

    /// <summary>
    /// Variables to multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to handle Relation between Denominacion.TipoValorId and Tipo.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Valor.Tipo Tipo_TipoValorId_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Valor.Tipo>? Tipo_TipoValorId_entities;

    /// <summary>
    /// Variables to handle Relation between Denominacion.MonedaId and Moneda.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Valor.Moneda Moneda_MonedaId_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Valor.Moneda>? Moneda_MonedaId_entities;

    /// <summary>
    /// Variables to handle Relation between Denominacion.UsuarioCreacion and Usuario.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;

    /// <summary>
    /// Variables to handle Relation between Denominacion.UsuarioModificacion and Usuario.Id
    /// </summary>
    private DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<DepositarioAdminWeb.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Int64? userId = null;

    [Parameter]
    public Int64 MonedaId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        userId = await sessionStorage.GetItemAsync<Int64?>("Id");
        if (userId == null)
            NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DepositarioAdminWeb.Business.Tables.Valor.Denominacion entity = new();
        entity.Where.Add(DepositarioAdminWeb.Business.Tables.Valor.Denominacion.ColumnEnum.MonedaId, DepositarioAdminWeb.sqlEnum.OperandEnum.Equal, MonedaId);
        Denominacion_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        DepositarioAdminWeb.Business.Tables.Valor.Tipo Tipo_TipoValorId_local = new();
        Tipo_TipoValorId_entities = Tipo_TipoValorId_local.Items();

        DepositarioAdminWeb.Business.Tables.Valor.Moneda Moneda_MonedaId_local = new();
        Moneda_MonedaId_entities = Moneda_MonedaId_local.Items();

        DepositarioAdminWeb.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();

        DepositarioAdminWeb.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();

    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Denominacion_entity = new();
        //Relations entities initialization
        Tipo_TipoValorId_entity = new();
        Moneda_MonedaId_entity = new();
        Usuario_UsuarioCreacion_entity = new();
        Usuario_UsuarioModificacion_entity = new();
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(DepositarioAdminWeb.Entities.Tables.Valor.Denominacion item, bool delete)
    {
        Denominacion_entity = item;
        Tipo_TipoValorId_entity = new()
            {
                Id = Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == Denominacion_entity.TipoValorId).Id,
                Nombre = Tipo_TipoValorId_entities.FirstOrDefault(c => c.Id == Denominacion_entity.TipoValorId).Nombre
            };
        Moneda_MonedaId_entity = new()
            {
                Id = Moneda_MonedaId_entities.FirstOrDefault(c => c.Id == Denominacion_entity.MonedaId).Id,
                Nombre = Moneda_MonedaId_entities.FirstOrDefault(c => c.Id == Denominacion_entity.MonedaId).Nombre
            };
        Usuario_UsuarioCreacion_entity = new()
            {
                Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == Denominacion_entity.UsuarioCreacion).Id,
                Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == Denominacion_entity.UsuarioCreacion).Nombre
            };
        if (Usuario_UsuarioModificacion_entities.Exists(c => c.Id == Denominacion_entity.UsuarioModificacion))
        {
            Usuario_UsuarioModificacion_entity = new()
                {
                    Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == Denominacion_entity.UsuarioModificacion).Id,
                    Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == Denominacion_entity.UsuarioModificacion).Nombre
                };
        }
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        DepositarioAdminWeb.Business.Tables.Valor.Denominacion crud = new();
        foreach (var property in Denominacion_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Denominacion_entity.FechaModificacion = null;
                    }
                    else
                    {
                        Denominacion_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Denominacion_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Denominacion_entity.UsuarioCreacion = userId.Value;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        Denominacion_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        Denominacion_entity.UsuarioModificacion = userId.Value;
                    }
                    break;
            }
        }
        Denominacion_entity.MonedaId = MonedaId;
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    crud.Add(Denominacion_entity);
                    summary = "El registro se ha ";
                    actionInformation = "agregado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    crud.Update(Denominacion_entity);
                    summary = "El registro se ha ";
                    actionInformation = "modificado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    Denominacion_entity.Habilitado = false;
                    crud.Update(Denominacion_entity);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// Tipo_TipoValorId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectTipo_TipoValorIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Moneda_MonedaId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectMoneda_MonedaIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, DepositarioAdminWeb.Entities.Tables.Valor.Denominacion item)
    {
        Denominacion_entity = item;
    }
    #endregion

    #region Export

    #endregion

}
