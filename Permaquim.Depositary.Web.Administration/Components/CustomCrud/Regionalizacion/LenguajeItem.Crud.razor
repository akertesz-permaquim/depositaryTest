@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (dataFunciones != null)
{
    @if (SeguridadController.VerificarPermisoFuncion("RegionalizacionLenguajeItem", dataFunciones, "PuedeVisualizar"))
    {
        @if (LenguajeItem_entities == null)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        }
        else
        {
            switch (crudMode)
            {
                case CrudMode.Add:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Regionalizacion.LenguajeItem",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Delete:
                    <RadzenBadge BadgeStyle="BadgeStyle.Warning">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Regionalizacion.LenguajeItem",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.Edit:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Regionalizacion.LenguajeItem",dataLenguaje)</h4>
                        </ChildContent>
                    </RadzenBadge>
                    break;
                case CrudMode.List:
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary">
                        <ChildContent>
                            <div>
                                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Regionalizacion.LenguajeItem",dataLenguaje)</h4>
                            </div>
                        </ChildContent>
                    </RadzenBadge>
                    break;
            }
            <hr>
            if (crudMode == CrudMode.List)
            {
                <RadzenDataGrid RowRender="@LenguajeItemRowRender" PageSizeOptions="@(new int[]{10,20,50,100})" AllowColumnPicking="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@LenguajeItem_entities" TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                            <HeaderTemplate>
                                <RadzenButton Icon="add_circle_outline" Disabled="@(!EsDefault)" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("RegionalizacionLenguajeItem",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                                </RadzenButton>
                            </HeaderTemplate>
                            <Template Context="element">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("RegionalizacionLenguajeItem",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete" Disabled="@(!EsDefault)" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("RegionalizacionLenguajeItem",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="Id" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Visible="false" Pickable="false" TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Title=@MultilenguajeController.ObtenerTextoPorClave("LENGUAJEID",dataLenguaje) Property="LenguajeId" Width="100px">
                            <Template>
                                @if (Lenguaje_LenguajeId_entities.FirstOrDefault(c => c.Id == @context.LenguajeId) != null)
                                {
                                    <RadzenLabel Text="@Lenguaje_LenguajeId_entities.FirstOrDefault( c => c.Id == @context.LenguajeId).Nombre" Component="LenguajeId" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="LenguajeId" style="width: 100%">
                                    </RadzenLabel>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="Clave" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("CLAVE",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="Texto" Filterable="true" Title=@MultilenguajeController.ObtenerTextoPorClave("TEXTO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="Habilitado" Filterable="true" FilterValue="@Habilitado_filter" Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                                </RadzenCheckBox>
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <div>
                                    @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                    <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                                </div>
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="LargoMaximo" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("LARGOMAXIMO",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                    if (usuario != null)
                                    {
                                        var usuarioTexto = usuario.Nombre + " " + usuario.Apellido;

                                        <RadzenLabel Text=@usuarioTexto Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="FechaCreacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Width="100px" Visible="false" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Template>
                                @{
                                    var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                    if (usuario != null)
                                    {
                                        var usuarioTexto = usuario.Nombre + " " + usuario.Apellido;

                                        <RadzenLabel Text=@usuarioTexto Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                    else
                                    {
                                        <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                        </RadzenLabel>
                                    }
                                }
                            </Template>
                            <FilterTemplate>
                                <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                                <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                            </FilterTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Property="FechaModificacion" Filterable="false" Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" Width="50px" TextAlign="TextAlign.Center" Visible="false">
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <hr>
            }

            if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
            {
                <RadzenTemplateForm TItem="Depositary.Entities.Tables.Regionalizacion.LenguajeItem" Data="@LenguajeItem_entity" @bind-Value="LenguajeItem_entity" Submit="Save" Visible="@(LenguajeItem_entity != null)">
                    <ChildContent>
                        @if (crudMode != CrudMode.Add)
                        {
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(LenguajeItem_entity.Id)" Name="Id" Disabled="true">
                                    </RadzenNumeric>
                                </div>
                            </div>
                        }
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("LENGUAJEID",dataLenguaje) Component="LenguajeId" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-4">
                                <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@LenguajeId"
                                Data=@Lenguaje_LenguajeId_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("CLAVE",dataLenguaje) Component="Clave" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(LenguajeItem_entity.Clave)" Name="Clave" Disabled="@(crudMode==CrudMode.Delete || !EsDefault)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Clave" Text="Clave is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TEXTO",dataLenguaje) Component="Texto" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenTextBox style="display: block" @bind-Value="@(LenguajeItem_entity.Texto)" Name="Texto" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenTextBox>
                                @if (@crudMode != CrudMode.Delete)
                                {
                                    <RadzenRequiredValidator Component="Texto" Text="Texto is required" Style="position: absolute">
                                    </RadzenRequiredValidator>
                                }
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                            </div>
                            <div class="col-md-9">
                                <RadzenCheckBox @bind-Value=@LenguajeItem_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @LenguajeItem_entity)) Disabled="@(crudMode == CrudMode.Delete || !EsDefault)" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("LARGOMAXIMO",dataLenguaje) Component="LargoMaximo" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-9">
                                <RadzenNumeric TValue="int" style="display: block; width: 100%" @bind-Value="@(LenguajeItem_entity.LargoMaximo)" Name="LargoMaximo" Disabled="@(crudMode==CrudMode.Delete)">
                                </RadzenNumeric>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col offset-sm-3">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
                <hr>
            }

            <RadzenNotification />
        }
    }
    else
    {
        <p>No tiene permisos para visualizar los registros.</p>
    }
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Regionalizacion.LenguajeItem LenguajeItem_entity = new();
    private List<Depositary.Entities.Tables.Regionalizacion.LenguajeItem> LenguajeItem_entities = null;

    /// <summary>
    /// Variables to handle column filter for field Banco.Habilitado
    private bool? Habilitado_filter;

    /// <summary>
    /// Variables to multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    /// <summary>
    /// Variables to handle Relation between LenguajeItem.LenguajeId and Lenguaje.Id
    /// </summary>
    private Depositary.Entities.Tables.Regionalizacion.Lenguaje Lenguaje_LenguajeId_entity = new();
    private List<Depositary.Entities.Tables.Regionalizacion.Lenguaje>? Lenguaje_LenguajeId_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between LenguajeItem.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    /// <summary>
    /// Variables to handle Relation between LenguajeItem.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    string claveAnteriorLenguajeItem = "";

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    [Parameter]
    public Int64 LenguajeId { get; set; }

    [Parameter]
    public bool EsDefault { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataFunciones = await sessionStorage.GetItemAsync<List<SeguridadEntities.FuncionRol>>("DataFunciones");
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        Depositary.Business.Tables.Regionalizacion.LenguajeItem entity = new Depositary.Business.Tables.Regionalizacion.LenguajeItem();
        entity.Where.Add(Depositary.Business.Tables.Regionalizacion.LenguajeItem.ColumnEnum.LenguajeId, Depositary.sqlEnum.OperandEnum.Equal, LenguajeId);
        LenguajeItem_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Regionalizacion.Lenguaje Lenguaje_LenguajeId_local = new();
        Lenguaje_LenguajeId_entities = Lenguaje_LenguajeId_local.Items();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => LenguajeItem_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => LenguajeItem_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();
    }

    #endregion

    private List<Depositary.Entities.Tables.Regionalizacion.Lenguaje> ObtenerLenguajesRestantes()
    {
        List<Depositary.Entities.Tables.Regionalizacion.Lenguaje> resultado = new();

        Depositary.Business.Tables.Regionalizacion.Lenguaje oLenguaje = new();
        oLenguaje.Where.Add(Depositary.Business.Tables.Regionalizacion.Lenguaje.ColumnEnum.Id, Depositary.sqlEnum.OperandEnum.NotEqual, LenguajeId);

        resultado = oLenguaje.Items();

        return resultado;
    }

    private List<Depositary.Entities.Tables.Regionalizacion.LenguajeItem> ObtenerItemsLenguajes(string Clave, Int64 pLenguajeItemId)
    {
        List<Depositary.Entities.Tables.Regionalizacion.LenguajeItem> resultado = new();

        Depositary.Business.Tables.Regionalizacion.LenguajeItem oLenguajeItem = new();
        oLenguajeItem.Where.Add(Depositary.Business.Tables.Regionalizacion.LenguajeItem.ColumnEnum.Id, Depositary.sqlEnum.OperandEnum.NotEqual, pLenguajeItemId);
        oLenguajeItem.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Tables.Regionalizacion.LenguajeItem.ColumnEnum.Clave, Depositary.sqlEnum.OperandEnum.Equal, Clave);

        resultado = oLenguajeItem.Items();

        return resultado;
    }

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        LenguajeItem_entity = new();
        //Relations entities initialization
        Lenguaje_LenguajeId_entity = new();
        Usuario_UsuarioCreacion_entity = new();
        Usuario_UsuarioModificacion_entity = new();
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Regionalizacion.LenguajeItem item, bool delete)
    {
        LenguajeItem_entity = item;
        Lenguaje_LenguajeId_entity = new()
            {
                Id = Lenguaje_LenguajeId_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.LenguajeId).Id,
                Nombre = Lenguaje_LenguajeId_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.LenguajeId).Nombre
            };
        Usuario_UsuarioCreacion_entity = new()
            {
                Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.UsuarioCreacion).Id,
                Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.UsuarioCreacion).Nombre
            };
        if (Usuario_UsuarioModificacion_entities.Exists(c => c.Id == LenguajeItem_entity.UsuarioModificacion))
        {
            Usuario_UsuarioModificacion_entity = new()
                {
                    Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.UsuarioModificacion).Id,
                    Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == LenguajeItem_entity.UsuarioModificacion).Nombre
                };
        }
        if (delete)
            crudMode = CrudMode.Delete;
        else
        {
            crudMode = CrudMode.Edit;
            claveAnteriorLenguajeItem = LenguajeItem_entity.Clave;
        }
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Regionalizacion.LenguajeItem crud = new();
        foreach (var property in LenguajeItem_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        LenguajeItem_entity.FechaModificacion = null;
                    }
                    else
                    {
                        LenguajeItem_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        LenguajeItem_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        LenguajeItem_entity.UsuarioCreacion = dataUsuario.Id;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        LenguajeItem_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        LenguajeItem_entity.UsuarioModificacion = dataUsuario.Id;
                    }
                    break;
            }
        }

        LenguajeItem_entity.LenguajeId = LenguajeId;

        switch (crudMode)
        {
            case CrudMode.Add:
                if (EsDefault)
                {
                    //TODO: Revisar transaccion en este caso
                    //crud.BeginTransaction();
                    try
                    {

                        crud.Add(LenguajeItem_entity);

                        //Obtenemos los ID de todos los lenguajes existentes (salvo este) e insertamos el registro en ellos
                        var lenguajesRestantes = ObtenerLenguajesRestantes();

                        if (lenguajesRestantes.Count > 0)
                        {
                            foreach (var lenguaje in lenguajesRestantes)
                            {
                                Depositary.Business.Tables.Regionalizacion.LenguajeItem oLenguajeItem = new();
                                LenguajeItem_entity.LenguajeId = lenguaje.Id;
                                oLenguajeItem.Add(LenguajeItem_entity);
                            }
                        }

                        //crud.EndTransaction(true);
                        summary = "El registro se ha ";
                        actionInformation = "agregado a este lenguaje y a los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    catch (Exception ex)
                    {
                        //crud.EndTransaction(false);
                        summary = "Error al procesar.";
                        actionInformation = ex.Message;
                        severityType = NotificationSeverity.Error;
                    }
                }
                break;
            case CrudMode.Edit:
                try
                {
                    //Si se modifica el lenguaje default se arrastra el cambio (salvo el texto) al resto de los lenguajes
                    if (EsDefault)
                    {
                        crud.Update(LenguajeItem_entity);

                        //Obtenemos los ID de todos los items de lenguajes existentes (salvo este)
                        var itemsLenguajesRestantes = ObtenerItemsLenguajes(claveAnteriorLenguajeItem, LenguajeItem_entity.Id);

                        if (itemsLenguajesRestantes.Count > 0)
                        {
                            foreach (var lenguajeItem in itemsLenguajesRestantes)
                            {
                                Depositary.Business.Tables.Regionalizacion.LenguajeItem oLenguajeItem = new();

                                lenguajeItem.Clave = LenguajeItem_entity.Clave;
                                lenguajeItem.FechaModificacion = DateTime.Now;
                                lenguajeItem.UsuarioModificacion = dataUsuario.Id;
                                lenguajeItem.Habilitado = LenguajeItem_entity.Habilitado;
                                oLenguajeItem.Update(lenguajeItem);
                            }
                        }

                        summary = "El registro se ha ";
                        actionInformation = "modificado en este lenguaje y en los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    else
                    {
                        crud.Update(LenguajeItem_entity);
                        summary = "El registro se ha ";
                        actionInformation = "modificado.";
                        severityType = NotificationSeverity.Success;
                    }
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    if (EsDefault)
                    {
                        crud.Update(LenguajeItem_entity);

                        //Obtenemos los ID de todos los detalles de esquemas existentes (salvo este)
                        var itemsLenguajesRestantes = ObtenerItemsLenguajes(LenguajeItem_entity.Clave, LenguajeItem_entity.Id);

                        if (itemsLenguajesRestantes.Count > 0)
                        {
                            foreach (var lenguajeItem in itemsLenguajesRestantes)
                            {
                                Depositary.Business.Tables.Regionalizacion.LenguajeItem oLenguajeItem = new();

                                lenguajeItem.Habilitado = false;
                                oLenguajeItem.Update(lenguajeItem);
                            }
                        }

                        summary = "El registro se ha ";
                        actionInformation = "eliminado en este lenguaje y en los restantes.";
                        severityType = NotificationSeverity.Success;
                    }
                    else
                    {
                        LenguajeItem_entity.Habilitado = false;
                        crud.Update(LenguajeItem_entity);
                        summary = "El registro se ha ";
                        actionInformation = "eliminado.";
                        severityType = NotificationSeverity.Success;
                    }
                }
                catch (Exception ex)
                {
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        //Recargamos el set de datos del lenguaje en el session storage.
        await sessionStorage.RemoveItemAsync("DataLenguaje");
        dataLenguaje = MultilenguajeController.ObtenerTextosLenguaje(dataUsuario.Id);
        await sessionStorage.SetItemAsync("DataLenguaje", dataLenguaje);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events
    /// <summary>
    /// Lenguaje_LenguajeId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectLenguaje_LenguajeIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Regionalizacion.LenguajeItem item)
    {
        LenguajeItem_entity = item;
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// LenguajeItemRowRender event
    /// </summary>
    /// <param name="args"></param>
    private void LenguajeItemRowRender(RowRenderEventArgs<Depositary.Entities.Tables.Regionalizacion.LenguajeItem> args)
    {
        if (!args.Data.Habilitado)
            args.Attributes.Add("class", "row-highlight-disabled");
        else
            args.Attributes.Add("class", "rz-datatable-even");
    }
    #endregion

    #region Export

    #endregion

}
