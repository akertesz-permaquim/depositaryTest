@using Permaquim.Depositary.Web.Administration.Controllers
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (estaProcesando)
{
    <div class="spinnerCentrado"></div>
}

@if (dataFunciones != null)
{
    @if (ConfiguracionDepositario_entities == null)
    {
        <div style="height:80px;">
            <div class="spinnerCentradoLateralRelativo"></div>
        </div>
    }
    else
    {
        switch (crudMode)
        {
            case CrudMode.Add:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_A_NAME_Dispositivo.ConfiguracionDepositario",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Delete:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadgeBorrar", false) BadgeStyle="BadgeStyle.Warning">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_D_NAME_Dispositivo.ConfiguracionDepositario",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.Edit:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_M_NAME_Dispositivo.ConfiguracionDepositario",dataLenguaje)</h4>
                    </ChildContent>
                </RadzenBadge>
                break;
            case CrudMode.List:
                <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
                    <ChildContent>
                        <div>
                            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("ABM_L_NAME_Dispositivo.ConfiguracionDepositario",dataLenguaje)</h4>
                        </div>
                    </ChildContent>
                </RadzenBadge>
                break;
        }
        <hr>
        if (crudMode == CrudMode.List)
        {
            <RadzenDataGrid @bind-Settings="@GridSettings" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" CellRender="@ConfiguracionDepositarioCellRender" PageSizeOptions="@(new int[]{10,20,50,100})" FilterMode="FilterMode.Advanced" PageSize="@CustomizadorController.ObtenerPaginadoDefault(dataUsuario.EmpresaId, dataCustomizacionPagina.AtributosTabla)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)
                Data="@ConfiguracionDepositario_entities" TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">@MultilenguajeController.ObtenerTextoPorClave("SIN_REGISTROS", dataLenguaje)</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" TextAlign="TextAlign.Center" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TemplateABM",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TemplateABM",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TemplateABM",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TemplateABM",dataCustomizacionPagina.AtributosColumnas)>
                        <HeaderTemplate>
                            <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Visible=@SeguridadController.VerificarPermisoFuncion("DispositivoConfiguracionDepositario",dataFunciones,"PuedeAgregar") Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_NUEVO",dataLenguaje) Click="Add">
                            </RadzenButton>
                        </HeaderTemplate>
                        <Template Context="element">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Visible=@SeguridadController.VerificarPermisoFuncion("DispositivoConfiguracionDepositario",dataFunciones,"PuedeModificar") Class="m-1" Click="@(args => Edit(element,false))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="delete" Disabled="@(!element.Habilitado)" ButtonStyle="ButtonStyle.Danger" Visible=@SeguridadController.VerificarPermisoFuncion("DispositivoConfiguracionDepositario",dataFunciones,"PuedeEliminar") Class="m-1" Click="@(args => Edit(element,true))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Property="Id" Title=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Id",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Id",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Id",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Id",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Id",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Id",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Id",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Id",dataCustomizacionPagina.AtributosColumnas)>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Title=@MultilenguajeController.ObtenerTextoPorClave("TIPOID",dataLenguaje) Property="TipoId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_TipoId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TipoId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TipoId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TipoId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TipoId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TipoId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TipoId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TipoId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TipoId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TipoId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TipoId",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @if (TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(c => c.Id == @context.TipoId) != null)
                            {
                                <RadzenLabel Text="@TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault( c => c.Id == @context.TipoId).Nombre" Component="TipoId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="TipoId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_TipoId Data="@TipoConfiguracionDepositario_TipoId_filter" Change="OnSelectedFilter_TipoId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Title=@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIOID",dataLenguaje) Property="DepositarioId" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_DepositarioId" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("DepositarioId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("DepositarioId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("DepositarioId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("DepositarioId",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @if (Depositario_DepositarioId_entities.FirstOrDefault(c => c.Id == @context.DepositarioId) != null)
                            {
                                <RadzenLabel Text="@Depositario_DepositarioId_entities.FirstOrDefault( c => c.Id == @context.DepositarioId).Nombre" Component="DepositarioId" style="width: 100%">
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel Text="No data available" Component="DepositarioId" style="width: 100%">
                                </RadzenLabel>
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_DepositarioId Data="@Depositario_DepositarioId_filter" Change="OnSelectedFilter_DepositarioId_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="Nombre" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Property="Valor" Title=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center"
                              Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Valor",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Valor",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Valor",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Valor",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Valor",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Valor",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Valor",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Valor",dataCustomizacionPagina.AtributosColumnas)>
                        <Template>
                            @{
                                var tipoConfiguracionDepositario = TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(x => x.Id == context.TipoId);

                                if (tipoConfiguracionDepositario != null)
                                {
                                    var validacionDato = ConfiguracionValidacionDato_ValidacionDatoId_entities.FirstOrDefault(x => x.Id == tipoConfiguracionDepositario.ValidacionDatoId);

                                    switch (validacionDato.TipoDatoId)
                                    {
                                        case (Int64)AplicacionEntities.TipoDato.Bool:
                                            Boolean valor = Convert.ToBoolean(context.Valor);
                                            <RadzenCheckBox Value="valor" Disabled="true">
                                            </RadzenCheckBox>
                                            break;
                                        default:
                                            <span>@context.Valor</span>
                                            break;
                                    }
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Property="Habilitado" FilterValue="@Habilitado_filter" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Habilitado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Habilitado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Habilitado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Habilitado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Habilitado",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox TValue="bool" Value=@data.Habilitado Disabled="true">
                            </RadzenCheckBox>
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <div>
                                @MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje)
                                <RadzenCheckBox Style="margin-bottom: 2%;" @bind-Value="Habilitado_filter" TriState="true" />
                            </div>
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOCREACION",dataLenguaje) Property="UsuarioCreacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioCreacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioCreacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioCreacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioCreacion Data="@Usuario_UsuarioCreacion_filter" Change="OnSelectedFilter_UsuarioCreacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Property="FechaCreacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCreacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHACREACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("UsuarioModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("USUARIOMODIFICACION",dataLenguaje) Property="UsuarioModificacion" Type="typeof(IEnumerable<Int64>)" FilterValue="@selectedFilter_UsuarioModificacion" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.And">
                        <Template>
                            @{
                                var usuario = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == @context.UsuarioModificacion);
                                if (usuario != null)
                                {
                                    <RadzenLabel Text=@(usuario.NombreApellido) Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                                else
                                {
                                    <RadzenLabel Text="No data available" Component="UsuarioModificacion" style="width: 100%">
                                    </RadzenLabel>
                                }
                            }
                        </Template>
                        <FilterTemplate>
                            <div style="margin-top: 1rem;font-weight: 600">Filter</div>
                            <RadzenDropDown @bind-Value=@selectedFilter_UsuarioModificacion Data="@Usuario_UsuarioModificacion_filter" Change="OnSelectedFilter_UsuarioModificacion_Changed" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ValueProperty="Id" TextProperty="NombreApellido" AllowClear="true" Multiple="true" />
                        </FilterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Property="FechaModificacion" Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaModificacion",dataCustomizacionPagina.AtributosColumnas) Title=@MultilenguajeController.ObtenerTextoPorClave("FECHAMODIFICACION",dataLenguaje) Frozen="false" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <hr>
        }

        if (crudMode == CrudMode.Add || crudMode == CrudMode.Edit || crudMode == CrudMode.Delete)
        {
            <RadzenTemplateForm TItem="Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario" Data="@ConfiguracionDepositario_entity" @bind-Value="ConfiguracionDepositario_entity" Submit="Save" Visible="@(ConfiguracionDepositario_entity != null)">
                <ChildContent>
                    @if (crudMode != CrudMode.Add)
                    {
                        <div style="margin-bottom: 1rem" class="row">
                            <div class="col-md-3">
                                <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje) Component="Id" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col-md-auto">
                                <RadzenNumeric TValue="long" style="display: block; width: 100%" @bind-Value="@(ConfiguracionDepositario_entity.Id)" Name="Id" Disabled="true">
                                </RadzenNumeric>
                            </div>
                        </div>
                    }
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("TIPOID",dataLenguaje) Component="TipoId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-4">
                            @if ((@TipoConfiguracionDepositario_TipoId_entities.Count > 0 && @TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(c => c.Id == @ConfiguracionDepositario_entity.TipoId) != null) || crudMode != CrudMode.Delete)
                            {
                                var dataSet = crudMode == CrudMode.Add ? TipoConfiguracionDepositario_TipoId_entities.Where(x => x.Habilitado == true) : TipoConfiguracionDepositario_TipoId_entities.Where(x => x.Habilitado == true || x.Id == ConfiguracionDepositario_entity.TipoId);
                                <RadzenDropDown Name="TipoId" AllowFiltering="true" FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="Int64" Class="w-100" @bind-Value="@(ConfiguracionDepositario_entity.TipoId)"
                                Data=@dataSet TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoConfiguracionDepositario_TipoIdValueChanged(args))
                                Disabled="@(crudMode!=CrudMode.Add || estaProcesando)" />
                            }
                            else
                            {
                                <RadzenDropDown Name="TipoId" AllowClear="true" TValue="Int64" Class="w-100"
                                Data=@TipoConfiguracionDepositario_TipoId_entities TextProperty="Nombre" ValueProperty="Id"
                                Change=@(args => SelectTipoConfiguracionDepositario_TipoIdValueChanged(args))
                                Disabled="@(crudMode!=CrudMode.Add || estaProcesando)" />
                            }
                            @if (@crudMode != CrudMode.Delete)
                            {
                                <RadzenNumericRangeValidator Min="@(TipoConfiguracionDepositario_TipoId_entities.Count > 0 ? TipoConfiguracionDepositario_TipoId_entities.Min(x => x.Id) : 1)" Component="TipoId" Text="TipoId is required" Style="position: relative">
                                </RadzenNumericRangeValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIOID",dataLenguaje) Component="DepositarioId" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-4">
                            <RadzenDropDown AllowClear="false" TValue="Int64" Class="w-100" Value="@DepositarioId"
                                Data=@Depositario_DepositarioId_entities TextProperty="Nombre" ValueProperty="Id"
                                Disabled="true" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("VALOR",dataLenguaje) Component="Valor" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col-md-auto">
                            @{
                                //En funcion de la validacion a aplicar cargamos el tipo de control que tendra el dato.
                                var tipoConfiguracionDepositario = TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(x => x.Id == ConfiguracionDepositario_entity.TipoId);

                                if (tipoConfiguracionDepositario != null)
                                {
                                    var validacionDato = ConfiguracionValidacionDato_ValidacionDatoId_entities.FirstOrDefault(x => x.Id == tipoConfiguracionDepositario.ValidacionDatoId);

                                    if (validacionDato != null)
                                    {
                                        string claveTextoValidacion = "VALIDACION_" + validacionDato.Nombre.ToUpper().Replace(" ", "");
                                        switch (validacionDato.TipoDatoId)
                                        {
                                            case (Int64)AplicacionEntities.TipoDato.Bool:
                                                bool conversionBool;
                                                if (bool.TryParse(ConfiguracionDepositario_entity.Valor, out conversionBool))
                                                {
                                                    <RadzenCheckBox TValue="bool" @bind-Value="@valorBool" Disabled="@(crudMode == CrudMode.Delete || estaProcesando)" Change=@(args => ValorBoolChange(args))>
                                                    </RadzenCheckBox>
                                                    <RadzenRegexValidator Component="Valor" Text="@MultilenguajeController.ObtenerTextoPorClave(claveTextoValidacion,dataLenguaje)" Pattern="@(validacionDato.ExpresionRegular)" />
                                                    <RadzenTextBox Visible="false" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor">
                                                    </RadzenTextBox>
                                                }
                                                break;
                                            case (Int64)AplicacionEntities.TipoDato.String:
                                                <RadzenTextBox style="display: block" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor" Disabled="@(crudMode == CrudMode.Delete || estaProcesando)">
                                                </RadzenTextBox>
                                                <RadzenRegexValidator Component="Valor" Text="@MultilenguajeController.ObtenerTextoPorClave(claveTextoValidacion,dataLenguaje)" Pattern="@(validacionDato.ExpresionRegular)" />
                                                break;
                                            case (Int64)AplicacionEntities.TipoDato.Decimal:
                                                decimal conversionDecimal;
                                                if (decimal.TryParse(ConfiguracionDepositario_entity.Valor, out conversionDecimal))
                                                {
                                                    <RadzenNumeric Step="0.01" TValue="decimal" Format="N2" style="display: block" @bind-Value="@valorDecimal" Change=@(args => ValorDecimalChange(args)) Disabled="@(crudMode == CrudMode.Delete || estaProcesando)">
                                                    </RadzenNumeric>
                                                    <RadzenTextBox Visible="false" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor">
                                                    </RadzenTextBox>
                                                    <RadzenRegexValidator Component="Valor" Text="@MultilenguajeController.ObtenerTextoPorClave(claveTextoValidacion,dataLenguaje)" Pattern="@(validacionDato.ExpresionRegular)" />
                                                }
                                                break;
                                            case (Int64)AplicacionEntities.TipoDato.Int:
                                                int conversionInt;
                                                if (int.TryParse(ConfiguracionDepositario_entity.Valor, out conversionInt))
                                                {
                                                    <RadzenNumeric style="display: block" TValue="int" @bind-Value="@valorInt" Change=@(args => ValorIntChange(args)) Disabled="@(crudMode == CrudMode.Delete || estaProcesando)">
                                                    </RadzenNumeric>
                                                    <RadzenTextBox Visible="false" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor">
                                                    </RadzenTextBox>
                                                    <RadzenRegexValidator Component="Valor" Text="@MultilenguajeController.ObtenerTextoPorClave(claveTextoValidacion,dataLenguaje)" Pattern="@(validacionDato.ExpresionRegular)" />
                                                }
                                                break;
                                            case (Int64)AplicacionEntities.TipoDato.DateTime:
                                                DateTime conversionDateTime;
                                                if (DateTime.TryParse(ConfiguracionDepositario_entity.Valor, out conversionDateTime))
                                                {
                                                    <RadzenDatePicker @bind-Value=@(ConfiguracionDepositario_entity.Valor) Disabled="@(crudMode == CrudMode.Delete || estaProcesando)" Name="Valor" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                                    <RadzenRegexValidator Component="Valor" Text="@MultilenguajeController.ObtenerTextoPorClave(claveTextoValidacion,dataLenguaje)" Pattern="@(validacionDato.ExpresionRegular)" />
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        <RadzenTextBox style="display: block" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor" Disabled="@(crudMode == CrudMode.Delete || estaProcesando)">
                                        </RadzenTextBox>
                                    }

                                }
                                else
                                {
                                    <RadzenTextBox style="display: block" @bind-Value="@(ConfiguracionDepositario_entity.Valor)" Name="Valor" Disabled="@(crudMode == CrudMode.Delete || estaProcesando)">
                                    </RadzenTextBox>
                                }
                                <RadzenRequiredValidator Component="Valor" Text="Valor is required" Style="position: absolute">
                                </RadzenRequiredValidator>
                            }
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div class="col-md-3">
                            <RadzenLabel Text=@MultilenguajeController.ObtenerTextoPorClave("HABILITADO",dataLenguaje) Component="Habilitado" Style="margin-left: 0px; vertical-align: middle;" />
                        </div>
                        <div class="col-md-9">
                            <RadzenCheckBox @bind-Value=@ConfiguracionDepositario_entity.Habilitado Name="HabilitadoCheckBox" TValue="bool" Change=@(args => HabilitadoChange(args, @ConfiguracionDepositario_entity)) Disabled="@(crudMode == CrudMode.Delete || estaProcesando)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col offset-sm-3">
                            <RadzenButton Disabled="@estaProcesando" ButtonType="ButtonType.Submit" Icon="save" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_ACEPTAR",dataLenguaje) ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                            <RadzenButton Disabled="@estaProcesando" ButtonStyle="ButtonStyle.Secondary" Icon="save" style="margin-left: 1rem" Text=@MultilenguajeController.ObtenerTextoPorClave("BOTON_CANCELAR",dataLenguaje) Click="Cancel">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
            <hr>
        }

        <RadzenNotification />
    }
}
else
{
    <div style="height:80px;">
        <div class="spinnerCentradoLateralRelativo"></div>
    </div>
}

@code {
    [Parameter]
    public Int64 DepositarioId { get; set; }

    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }

    private bool valorBool { get; set; } = false;
    private decimal valorDecimal { get; set; } = 0;
    private int valorInt { get; set; } = 0;
    private DateTime valorDateTime { get; set; } = DateTime.Now.Date;

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    private bool estaProcesando = false;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario ConfiguracionDepositario_entity = new();
    private List<Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario> ConfiguracionDepositario_entities = null;

    /// <summary>
    /// Variables to handle Relation between ConfiguracionDepositario.TipoId and TipoConfiguracionDepositario.Id
    /// </summary>
    private Depositary.Entities.Tables.Dispositivo.TipoConfiguracionDepositario TipoConfiguracionDepositario_TipoId_entity = new();
    private List<Depositary.Entities.Tables.Dispositivo.TipoConfiguracionDepositario>? TipoConfiguracionDepositario_TipoId_entities;
    private List<Depositary.Entities.Tables.Dispositivo.TipoConfiguracionDepositario> TipoConfiguracionDepositario_TipoId_filter;
    private IEnumerable<Int64> selectedFilter_TipoId;

    /// <summary>
    /// Variables to handle Relation between Configuracion.ValidacionDatoId and ConfiguracionValidacionDato.Id
    /// </summary>
    private Depositary.Entities.Tables.Aplicacion.ConfiguracionValidacionDato ConfiguracionValidacionDato_ValidacionDatoId_entity = new();
    private List<Depositary.Entities.Tables.Aplicacion.ConfiguracionValidacionDato>? ConfiguracionValidacionDato_ValidacionDatoId_entities;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    private Depositary.Entities.Tables.Seguridad.Rol? usuarioRol = new();

    /// <summary>
    /// Variables to handle column filter for field Banco.Habilitado
    private bool? Habilitado_filter;

    /// <summary>
    /// Variables to store permissions
    /// </summary>
    private List<SeguridadEntities.FuncionRol> dataFunciones;

    /// <summary>
    /// Variables to handle Relation between ConfiguracionDepositario.DepositarioId and Depositario.Id
    /// </summary>
    private Depositary.Entities.Tables.Dispositivo.Depositario Depositario_DepositarioId_entity = new();
    private List<Depositary.Entities.Tables.Dispositivo.Depositario>? Depositario_DepositarioId_entities;
    private List<Depositary.Entities.Tables.Dispositivo.Depositario> Depositario_DepositarioId_filter;
    private IEnumerable<Int64> selectedFilter_DepositarioId;

    /// <summary>
    /// Variables to handle Relation between ConfiguracionDepositario.UsuarioCreacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioCreacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioCreacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioCreacion;

    /// <summary>
    /// Variables to handle Relation between ConfiguracionDepositario.UsuarioModificacion and Usuario.Id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_entity = new();
    private List<Depositary.Entities.Tables.Seguridad.Usuario>? Usuario_UsuarioModificacion_entities;
    private List<Depositary.Entities.Tables.Seguridad.Usuario> Usuario_UsuarioModificacion_filter;
    private IEnumerable<Int64> selectedFilter_UsuarioModificacion;

    /// <summary>
    ///  Page crud mode {List,Add,Edit,Delete}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        await sessionStorage.RemoveItemAsync("DataFunciones");
        await sessionStorage.RemoveItemAsync("RolId");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Dispositivo", "ConfiguracionDepositario");
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        usuarioRol = SeguridadController.ObtenerRolesPorUsuario(dataUsuario.Id);
        dataFunciones = SeguridadController.ObtenerFuncionesPorRol(usuarioRol.Id);
        await sessionStorage.SetItemAsync("RolId", usuarioRol.Id);
        await sessionStorage.SetItemAsync("DataFunciones", dataFunciones);
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DispositivoConfiguracionDepositario", crudMode.ToString(), dataUsuario.Id);
        estaProcesando = false;
        Depositary.Business.Tables.Dispositivo.ConfiguracionDepositario entity = new();
        entity.Where.Add(Depositary.Business.Tables.Dispositivo.ConfiguracionDepositario.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
        ConfiguracionDepositario_entities = entity.Items();
    }
    /// <summary>
    /// Loads Type Tables data
    /// </summary>
    private void LoadTypesData()
    {
        Depositary.Business.Tables.Dispositivo.TipoConfiguracionDepositario TipoConfiguracionDepositario_TipoId_local = new();
        TipoConfiguracionDepositario_TipoId_entities = TipoConfiguracionDepositario_TipoId_local.Items();
        TipoConfiguracionDepositario_TipoId_filter = TipoConfiguracionDepositario_TipoId_entities.Where(x => ConfiguracionDepositario_entities.Select(x => x.TipoId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Aplicacion.ConfiguracionValidacionDato ConfiguracionValidacionDato_ValidacionDatoId_local = new();
        ConfiguracionValidacionDato_ValidacionDatoId_entities = ConfiguracionValidacionDato_ValidacionDatoId_local.Items();

        Depositary.Business.Tables.Dispositivo.Depositario Depositario_DepositarioId_local = new();
        Depositario_DepositarioId_entities = Depositario_DepositarioId_local.Items();
        Depositario_DepositarioId_filter = Depositario_DepositarioId_entities.Where(x => ConfiguracionDepositario_entities.Select(x => x.DepositarioId).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioCreacion_local = new();
        Usuario_UsuarioCreacion_entities = Usuario_UsuarioCreacion_local.Items();
        Usuario_UsuarioCreacion_filter = Usuario_UsuarioCreacion_entities.Where(x => ConfiguracionDepositario_entities.Select(x => x.UsuarioCreacion).Distinct().Contains(x.Id)).ToList();

        Depositary.Business.Tables.Seguridad.Usuario Usuario_UsuarioModificacion_local = new();
        Usuario_UsuarioModificacion_entities = Usuario_UsuarioModificacion_local.Items();
        Usuario_UsuarioModificacion_filter = Usuario_UsuarioModificacion_entities.Where(x => ConfiguracionDepositario_entities.Select(x => x.UsuarioModificacion).Distinct().Contains(x.Id)).ToList();

    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        ConfiguracionDepositario_entity = new();
        //Relations entities initialization
        Depositario_DepositarioId_entity = new();
        ConfiguracionValidacionDato_ValidacionDatoId_entity = new();
        Usuario_UsuarioCreacion_entity = new();
        Usuario_UsuarioModificacion_entity = new();
        crudMode = CrudMode.Add;
        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DispositivoConfiguracionDepositario", crudMode.ToString(), dataUsuario.Id);

        SetearControlValor(ConfiguracionDepositario_entity.TipoId);

        StateHasChanged();
    }
    /// <summary>
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario item, bool delete)
    {
        ConfiguracionDepositario_entity = item;
        Depositario_DepositarioId_entity = new()
            {
                Id = Depositario_DepositarioId_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.DepositarioId).Id,
                Nombre = Depositario_DepositarioId_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.DepositarioId).Nombre
            };

        Usuario_UsuarioCreacion_entity = new()
            {
                Id = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.UsuarioCreacion).Id,
                Nombre = Usuario_UsuarioCreacion_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.UsuarioCreacion).Nombre
            };
        if (Usuario_UsuarioModificacion_entities.Exists(c => c.Id == ConfiguracionDepositario_entity.UsuarioModificacion))
        {
            Usuario_UsuarioModificacion_entity = new()
                {
                    Id = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.UsuarioModificacion).Id,
                    Nombre = Usuario_UsuarioModificacion_entities.FirstOrDefault(c => c.Id == ConfiguracionDepositario_entity.UsuarioModificacion).Nombre
                };
        }
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "DispositivoConfiguracionDepositario", crudMode.ToString() + " Id: " + item.Id, dataUsuario.Id);

        var tipoConfiguracionDepositario = TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(x => x.Id == ConfiguracionDepositario_entity.TipoId);

        if (tipoConfiguracionDepositario != null)
        {
            var validacionConfiguracion = ConfiguracionValidacionDato_ValidacionDatoId_entities.FirstOrDefault(x => x.Id == tipoConfiguracionDepositario.ValidacionDatoId);

            if (validacionConfiguracion != null)
            {
                //Cargamos los valores en funcion del tipo de dato de la validacion
                switch (validacionConfiguracion.TipoDatoId)
                {
                    case (Int64)AplicacionEntities.TipoDato.Bool:
                        valorBool = bool.Parse(item.Valor);
                        break;
                    case (Int64)AplicacionEntities.TipoDato.String:
                        break;
                    case (Int64)AplicacionEntities.TipoDato.Decimal:
                        valorDecimal = decimal.Parse(item.Valor);
                        break;
                    case (Int64)AplicacionEntities.TipoDato.Int:
                        valorInt = int.Parse(item.Valor);
                        break;
                    case (Int64)AplicacionEntities.TipoDato.DateTime:
                        valorDateTime = DateTime.Parse(item.Valor);
                        break;
                }
            }
        }

    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private async Task Save()
    {
        estaProcesando = true;
        await Task.Run(Procesar);
        estaProcesando = false;
    }

    private async Task Procesar()
    {
        string actionInformation = string.Empty;
        NotificationSeverity severityType = NotificationSeverity.Error;
        string summary = string.Empty;
        Depositary.Business.Tables.Dispositivo.ConfiguracionDepositario crud = new();
        ConfiguracionDepositario_entity.DepositarioId = DepositarioId;
        foreach (var property in ConfiguracionDepositario_entity.GetType().GetProperties())
        {
            switch (property.Name)
            {
                case "FechaModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        ConfiguracionDepositario_entity.FechaModificacion = null;
                    }
                    else
                    {
                        ConfiguracionDepositario_entity.FechaModificacion = DateTime.Now;
                    }
                    break;
                case "FechaCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        ConfiguracionDepositario_entity.FechaCreacion = DateTime.Now;
                    }
                    break;
                case "UsuarioCreacion":
                    if (crudMode == CrudMode.Add)
                    {
                        ConfiguracionDepositario_entity.UsuarioCreacion = dataUsuario.Id;
                    }
                    break;
                case "UsuarioModificacion":
                    if (crudMode == CrudMode.Add)
                    {
                        ConfiguracionDepositario_entity.UsuarioModificacion = null;
                    }
                    else
                    {
                        ConfiguracionDepositario_entity.UsuarioModificacion = dataUsuario.Id;
                    }
                    break;
            }
        }
        switch (crudMode)
        {
            case CrudMode.Add:
                try
                {
                    crud.Add(ConfiguracionDepositario_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                    summary = "El registro se ha ";
                    actionInformation = "agregado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Edit:
                try
                {
                    crud.Update(ConfiguracionDepositario_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                    summary = "El registro se ha ";
                    actionInformation = "modificado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
            case CrudMode.Delete:
                try
                {
                    ConfiguracionDepositario_entity.Habilitado = false;
                    crud.Update(ConfiguracionDepositario_entity, (long)SeguridadEntities.Aplicacion.AdministradorWeb);
                    summary = "El registro se ha ";
                    actionInformation = "eliminado.";
                    severityType = NotificationSeverity.Success;
                }
                catch (Exception ex)
                {
                    AuditController.Log(ex, dataUsuario.Id);
                    summary = "Error al procesar.";
                    actionInformation = ex.Message;
                    severityType = NotificationSeverity.Error;
                }
                break;
        }

        // Sets Crud mode to List
        crudMode = CrudMode.List;

        ShowNotification(new NotificationMessage
            {
                Severity = severityType,
                Summary = summary,
                Detail = actionInformation,
                Duration = 4000
            });

        await Task.Run(LoadMainEntityData);
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;
        LoadMainEntityData();
    }

    private void SetearControlValor(Int64 TipoConfiguracionDepositarioId)
    {
        var tipoConfiguracionDepositario = TipoConfiguracionDepositario_TipoId_entities.FirstOrDefault(x => x.Id == TipoConfiguracionDepositarioId);
        ConfiguracionDepositario_entity.Valor = "";

        if (tipoConfiguracionDepositario != null)
        {
            var validacionDato = ConfiguracionValidacionDato_ValidacionDatoId_entities.FirstOrDefault(x => x.Id == tipoConfiguracionDepositario.ValidacionDatoId);

            switch (validacionDato.TipoDatoId)
            {
                case (Int64)AplicacionEntities.TipoDato.Bool:
                    ConfiguracionDepositario_entity.Valor = "false";
                    break;
                case (Int64)AplicacionEntities.TipoDato.Int:
                    ConfiguracionDepositario_entity.Valor = "0";
                    break;
                case (Int64)AplicacionEntities.TipoDato.Decimal:
                    ConfiguracionDepositario_entity.Valor = "0.00";
                    break;
                case (Int64)AplicacionEntities.TipoDato.DateTime:
                    ConfiguracionDepositario_entity.Valor = DateTime.Now.Date.ToString();
                    break;
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }
    #region Notifications
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

    #endregion
    #region Selection events

    void ValorBoolChange(bool value)
    {
        if (value)
            ConfiguracionDepositario_entity.Valor = "true";
        else
            ConfiguracionDepositario_entity.Valor = "false";
    }

    void ValorDecimalChange(decimal value)
    {
        ConfiguracionDepositario_entity.Valor = value.ToString();
    }

    void ValorIntChange(int value)
    {
        ConfiguracionDepositario_entity.Valor = value.ToString();
    }

    /// <summary>
    /// selectedFilter_TipoId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_TipoId_Changed(object value)
    {
        if (selectedFilter_TipoId != null && !selectedFilter_TipoId.Any())
        {
            selectedFilter_TipoId = null;
        }
    }

    /// <summary>
    /// Depositario_DepositarioId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectDepositario_DepositarioIdValueChanged(object item)
    {
    }

    /// <summary>
    /// Depositario_TipoId value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectTipoConfiguracionDepositario_TipoIdValueChanged(object item)
    {
        SetearControlValor((Int64)item);
    }

    /// <summary>
    /// selectedFilter_DepositarioId value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_DepositarioId_Changed(object value)
    {
        if (selectedFilter_DepositarioId != null && !selectedFilter_DepositarioId.Any())
        {
            selectedFilter_DepositarioId = null;
        }
    }

    /// <summary>
    /// Usuario_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioCreacionValueChanged(object item)
    {
    }

    /// <summary>
    /// selectedFilter_UsuarioCreacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioCreacion_Changed(object value)
    {
        if (selectedFilter_UsuarioCreacion != null && !selectedFilter_UsuarioCreacion.Any())
        {
            selectedFilter_UsuarioCreacion = null;
        }
    }

    /// <summary>
    /// Usuario_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectUsuario_UsuarioModificacionValueChanged(object item)
    {
    }

    /// <summary>
    /// selectedFilter_UsuarioModificacion value changed
    /// </summary>
    /// <param name="item"></param>
    private void OnSelectedFilter_UsuarioModificacion_Changed(object value)
    {
        if (selectedFilter_UsuarioModificacion != null && !selectedFilter_UsuarioModificacion.Any())
        {
            selectedFilter_UsuarioModificacion = null;
        }
    }

    /// <summary>
    /// Entity is binded, however it sets anyway.
    /// </summary>
    /// <returns></returns>
    void HabilitadoChange(bool? value, Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario item)
    {
        ConfiguracionDepositario_entity = item;
    }

    /// <summary>
    /// ConfiguracionDepositarioCellRender event
    /// </summary>
    /// <param name="args"></param>
    private void ConfiguracionDepositarioCellRender(DataGridCellRenderEventArgs<Depositary.Entities.Tables.Dispositivo.ConfiguracionDepositario> args)
    {
        if (!args.Data.Habilitado)
            args.Attributes.Add("class", "row-highlight-disabled");
        else
            args.Attributes.Add("class", "rz-datatable-even");
    }
    #endregion

    #region Export

    #endregion

    }
