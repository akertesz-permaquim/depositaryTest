@page "/ReporteTurnosView"
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

@if (estaCargandoParametrosReporte)
{
    <div class="spinner"></div>
}
else
{
    <RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
        <ChildContent>
            <div>
                <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("TITULO_REPORTE_TURNOS",dataLenguaje)</h4>
            </div>
        </ChildContent>
    </RadzenBadge>
    <hr>

    <RadzenTemplateForm TItem="parametros" Data="@parametrosTurnosView" @bind-Value="parametrosTurnosView" Submit="LoadMainEntityData">
        <ChildContent>
            <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
                <HeaderTemplate>
                    <h4 class="m-0 d-flex align-items-center">
                        <RadzenIcon Icon="account_box" Class="mr-1" /><b>@MultilenguajeController.ObtenerTextoPorClave("TITULO_PARAMETROSBUSQUEDA",dataLenguaje)</b>
                    </h4>
                </HeaderTemplate>
                <ChildContent>
                    <table class="table table-borderless w-auto" style="vertical-align: middle">
                        <tbody>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHADESDE",dataLenguaje)" Component="fechaDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaDesde) Max="@(parametrosTurnosView.fechaHasta)" Name="fechaDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaHasta.HasValue) Value=@(parametrosTurnosView.fechaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_MENOR_FECHAHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAHASTA",dataLenguaje)" Component="fechaHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaHasta) Min="@(parametrosTurnosView.fechaDesde)" Name="fechaHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaDesde.HasValue) Value=@(parametrosTurnosView.fechaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_MAYOR_FECHADESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAAPERTURADESDE",dataLenguaje)" Component="fechaAperturaDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaAperturaDesde) Max="@(parametrosTurnosView.fechaAperturaHasta)" Name="fechaAperturaDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaAperturaHasta.HasValue) Value=@(parametrosTurnosView.fechaAperturaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaAperturaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURADESDE_MENOR_FECHAAPERTURAHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAAPERTURAHASTA",dataLenguaje)" Component="fechaAperturaHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaAperturaHasta) Min="@(parametrosTurnosView.fechaAperturaDesde)" Name="fechaAperturaHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaAperturaDesde.HasValue) Value=@(parametrosTurnosView.fechaAperturaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaAperturaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURAHASTA_MAYOR_FECHAAPERTURADESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHACIERREDESDE",dataLenguaje)" Component="fechaCierreDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaCierreDesde) Max="@(parametrosTurnosView.fechaCierreHasta)" Name="fechaCierreDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaCierreHasta.HasValue) Value=@(parametrosTurnosView.fechaCierreHasta) Operator="CompareOperator.LessThanEqual" Component="fechaCierreDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHACIERREDESDE_MENOR_FECHACIERREHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHACIERREHASTA",dataLenguaje)" Component="fechaCierreHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosTurnosView.fechaCierreHasta) Min="@(parametrosTurnosView.fechaCierreDesde)" Name="fechaCierreHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosTurnosView.fechaCierreDesde.HasValue) Value=@(parametrosTurnosView.fechaCierreDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaCierreHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHACIERREHASTA_MAYOR_FECHACIERREDESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_EMPRESAS",dataLenguaje)" Component="dropDownEmpresas" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosTurnosView.empresaSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_EMPRESA",dataLenguaje)" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                                    Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SUCURSALES",dataLenguaje)" Component="dropDownSucursales" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosTurnosView.sucursalSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SUCURSAL",dataLenguaje)" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                                    Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SECTORES",dataLenguaje)" Component="dropDownSectores" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosTurnosView.sectorSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SECTOR",dataLenguaje)" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                                    Change=@(args => OnChangeSector(args)) Class="w-100" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_DEPOSITARIOS",dataLenguaje)" Component="dropDownDepositarios" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownDepositarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosTurnosView.depositarioSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_DEPOSITARIOS",dataLenguaje)" Data=@dataDepositariosCombo TextProperty="DepositarioNombre" ValueProperty="DepositarioId"
                                                        Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_TURNOS",dataLenguaje)" Component="dropDownTurnos" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownTurnos" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosTurnosView.turnosSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_TURNOS",dataLenguaje)" Data=@dataTurnos TextProperty="Nombre" ValueProperty="TurnoEsquemaDetalleId"
                                                        Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_CODIGOTURNO",dataLenguaje)" Component="txtcodigoTurno" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenTextBox @bind-Value=@(parametrosTurnosView.codigoTurno) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_CODIGOTURNO",dataLenguaje)" Name="txtcodigoTurno"></RadzenTextBox>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </ChildContent>
            </RadzenPanel>
            <br />
            <div style="margin-bottom: 1rem" class="row justify-content-center">
                <div class="col col-md-auto">
                    <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_LIMPIAR",dataLenguaje)" ButtonStyle="ButtonStyle.Secondary">
                    </RadzenButton>
                </div>
                <div class="col col-md-auto">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_BUSCAR",dataLenguaje)" ButtonStyle="ButtonStyle.Primary">
                    </RadzenButton>
                </div>
            </div>
        </ChildContent>
    </RadzenTemplateForm>
}

<div>
    @if (dataTurnosView != null)
    {
        <br />
        if (gridTurnosView != null)
        {
            if (dataTurnosView.Count > 0)
            {
                <GridExport T="ResultReporte" Grid="@gridTurnosView" TituloBoton="@MultilenguajeController.ObtenerTextoPorClave("BOTON_EXPORTAR_EXCEL",dataLenguaje)" NombreArchivo="@MultilenguajeController.ObtenerTextoPorClave("NOMBRE_ARCHIVO_REPORTE_TURNOS",dataLenguaje)"></GridExport>
            }
        }
        <RadzenDataGrid @ref="@gridTurnosView" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" PageSizeOptions="@(new int[]{10,20,50,100})" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" PageSize="@CustomizadorController.ObtenerPaginadoDefault(dataUsuario.EmpresaId, dataCustomizacionPagina.AtributosTabla)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        id="gridTurnosView" Data="@dataTurnosView" Render="@ReportRender" TItem="ResultReporte" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Settings="@GridSettings"
                    AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)>
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">@MultilenguajeController.ObtenerTextoPorClave("SIN_REGISTROS", dataLenguaje)</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TurnoId" Title="@MultilenguajeController.ObtenerTextoPorClave("ID",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TurnoId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TurnoId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TurnoId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TurnoId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TurnoId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TurnoId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TurnoId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TurnoId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TurnoId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TurnoId",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Fecha" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHA",dataLenguaje)" FormatString="{0:dd/MM/yyyy}" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Fecha",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Fecha",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Fecha",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Fecha",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Fecha",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Fecha",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Fecha",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CodigoTurno" Title="@MultilenguajeController.ObtenerTextoPorClave("CODIGOTURNO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CodigoTurno",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CodigoTurno",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaApertura" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHAAPERTURA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaApertura",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaApertura",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaApertura",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Secuencia" Title="@MultilenguajeController.ObtenerTextoPorClave("SECUENCIA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Secuencia",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Secuencia",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Secuencia",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Secuencia",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Secuencia",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Turno" Title="@MultilenguajeController.ObtenerTextoPorClave("TURNO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Turno",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Turno",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Turno",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Turno",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Turno",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Turno",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Turno",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Empresa" Title="@MultilenguajeController.ObtenerTextoPorClave("EMPRESA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Empresa",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Empresa",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Empresa",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Empresa",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Empresa",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Empresa",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Empresa",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sucursal" Title="@MultilenguajeController.ObtenerTextoPorClave("SUCURSAL",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sucursal",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sucursal",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sucursal",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sector" Title="@MultilenguajeController.ObtenerTextoPorClave("SECTOR",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sector",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sector",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sector",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sector",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sector",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sector",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sector",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaCierre" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHACIERRE",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCierre",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCierre",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCierre",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CierreDiario" Title="@MultilenguajeController.ObtenerTextoPorClave("CIERREDIARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CierreDiario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CierreDiario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CierreDiario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CierreDiario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Depositario" Title="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Depositario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Depositario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Depositario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Depositario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Depositario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Depositario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Depositario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CantidadTransacciones" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDADTRANSACCIONES",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Moneda" Title="@MultilenguajeController.ObtenerTextoPorClave("MONEDA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Moneda",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Moneda",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Moneda",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Moneda",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Moneda",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Moneda",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Moneda",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalValidado" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTALVALIDADO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TotalValidado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TotalValidado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TotalValidado",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalAValidar" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTALAVALIDAR",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TotalAValidar",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Total" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTAL",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Total",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Total",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Total",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Total",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Total",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Total",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Total",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
<hr>

<RadzenNotification />

@code {
    public class parametros
    {
        public DateTime? fechaDesde { get; set; }
        public DateTime? fechaHasta { get; set; }
        public DateTime? fechaAperturaDesde { get; set; }
        public DateTime? fechaAperturaHasta { get; set; }
        public DateTime? fechaCierreDesde { get; set; }
        public DateTime? fechaCierreHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public Int64? depositarioSeleccionado { get; set; }
        public IEnumerable<Int64> turnosSeleccionados = new Int64[] { };
        public string codigoTurno { get; set; }
    }

    //Clase creada para sortear algunas cuestiones de la vista que traemos de SQL
    public class ResultReporte
    {
        public Int64 TurnoId { get; set; }
        public DateTime Fecha { get; set; }
        public DateTime? FechaApertura { get; set; }
        public DateTime? FechaCierre { get; set; }
        public int Secuencia { get; set; }
        public string Moneda { get; set; }
        public double TotalValidado { get; set; }
        public double TotalAValidar { get; set; }
        public double Total
        {
            get
            {
                return TotalValidado + TotalAValidar;
            }
        }
        public int CantidadTransacciones { get; set; }
        public string CierreDiario { get; set; }
        public string Turno { get; set; }
        public string Sector { get; set; }
        public string Empresa { get; set; }
        public string Sucursal { get; set; }
        public string Depositario { get; set; }
        public string CodigoTurno { get; set; }
    }

    RadzenDataGrid<ResultReporte> gridTurnosView;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private List<ResultReporte> dataTurnosView;

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    //Datasource para dropdown
    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();
    private List<DispositivoEntities.Depositario> depositariosUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();
    private List<DispositivoEntities.Depositario> dataDepositariosCombo = new();

    private List<TurnoEntities.TurnoComboReporte> dataTurnos = new();

    private bool estaCargandoGrillaReporte = false;
    private bool estaCargandoParametrosReporte = true;

    private parametros parametrosTurnosView = new();

    protected override void OnInitialized()
    {
        //Verificamos si se tiene licencia full y no esta vencida para acceder a este menu:
        if (LicenseController.ReadAdditonalLicenseInformation("TYPE") != "FULL")
        {
            NavManager.NavigateTo("RequerimientoLicencia/ReporteTurnosView", true);
        }

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);

        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Reporte", "Turnos");
        await Task.Run(CargarCombosBusqueda);
        parametrosTurnosView.fechaDesde = DateTime.Today;
        parametrosTurnosView.fechaHasta = DateTime.Today;
        estaCargandoParametrosReporte = false;

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "ReporteTurnosView", "", dataUsuario.Id);
    }

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
        {
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        }
        else
        {
            dataSucursalesCombo = new();
            parametrosTurnosView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosTurnosView.sectorSeleccionado = null;

            dataDepositariosCombo = depositariosUsuario;
            parametrosTurnosView.depositarioSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosTurnosView.sectorSeleccionado = null;

            if (parametrosTurnosView.empresaSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == parametrosTurnosView.empresaSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();

            parametrosTurnosView.depositarioSeleccionado = null;
        }

    }

    void OnChangeSector(object value)
    {
        if (value != null)
        {
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SectorId == (Int64)value).ToList();
        }
        else
        {
            if (parametrosTurnosView.sucursalSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == parametrosTurnosView.sucursalSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();
        }

    }

    void resetParametros()
    {
        parametrosTurnosView = new();
        dataSectoresCombo = new();
        dataSucursalesCombo = new();
        dataDepositariosCombo = depositariosUsuario;
    }

    #endregion

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        sucursalesUsuario = ReportController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = ReportController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        depositariosUsuario = ReportController.ObtenerListadoDepositariosPorPerfil(dataUsuario.Id);
        dataDepositariosCombo = depositariosUsuario; //En principio vemos todos los depositarios accesibles por perfil.
        dataTurnos = ReportController.ObtenerTurnos();
    }
    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        //if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
        //    AuditController.Log(AuditController.LogTypeEnum.Navigation, "Busqueda en " + "ReporteTurnosView", , dataUsuario.Id);

        estaCargandoGrillaReporte = true;
        dataTurnosView = new();
        Depositary.Business.Views.Reporte.Turnos entity = new();
        List<Depositary.Entities.Views.Reporte.Turnos> turnos = new();

        //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
        if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
        {
            dataTurnosView = new();
        }
        else
        {
            //Construimos el where general segun las empresas/sucursales/sectores/depositarios que puede ver el usuario
            //entity.Where.OpenParentheses();

            if (sectoresUsuario.Count > 0)
            {
                entity.Where.OpenParentheses();
                for (int i = 0; i < sectoresUsuario.Count; i++)
                {
                    if (i > 0)
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                    entity.Where.OpenParentheses();
                    entity.Where.Add(Business.Views.Reporte.Turnos.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                    var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                    if (sucursal != null)
                    {
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Turnos.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                        var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                        if (empresa != null)
                            entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Turnos.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                    }
                    entity.Where.CloseParentheses();
                }

                entity.Where.CloseParentheses();
            }

            //Construimos el where segun los parametros de los controles
            if (parametrosTurnosView.empresaSeleccionada.HasValue || parametrosTurnosView.sucursalSeleccionada.HasValue || parametrosTurnosView.sectorSeleccionado.HasValue || parametrosTurnosView.depositarioSeleccionado.HasValue)
            {
                if (entity.Where.Count > 0)
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                entity.Where.OpenParentheses();

                int cantidadFiltrosCustom = 0;

                if (parametrosTurnosView.empresaSeleccionada.HasValue)
                {
                        entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.empresaSeleccionada.Value);
                    cantidadFiltrosCustom++;
                }

                if (parametrosTurnosView.sucursalSeleccionada.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.sucursalSeleccionada.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.sucursalSeleccionada.Value);
                }

                if (parametrosTurnosView.sectorSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.sectorSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.sectorSeleccionado.Value);
                }

                if (parametrosTurnosView.depositarioSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.depositarioSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTurnosView.depositarioSeleccionado.Value);
                }

                entity.Where.CloseParentheses();
            }

            //entity.Where.CloseParentheses();

            if (parametrosTurnosView.fechaDesde.HasValue)
            {
                parametrosTurnosView.fechaDesde = new DateTime(parametrosTurnosView.fechaDesde.Value.Year, parametrosTurnosView.fechaDesde.Value.Month, parametrosTurnosView.fechaDesde.Value.Day, 0, 0, 0);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaDesde.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaDesde.Value);
            }

            if (parametrosTurnosView.fechaHasta.HasValue)
            {
                parametrosTurnosView.fechaHasta = new DateTime(parametrosTurnosView.fechaHasta.Value.Year, parametrosTurnosView.fechaHasta.Value.Month, parametrosTurnosView.fechaHasta.Value.Day, 23, 59, 59);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaHasta.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaHasta.Value);

            }

            if (parametrosTurnosView.fechaAperturaDesde.HasValue)
            {
                parametrosTurnosView.fechaAperturaDesde = new DateTime(parametrosTurnosView.fechaAperturaDesde.Value.Year, parametrosTurnosView.fechaAperturaDesde.Value.Month, parametrosTurnosView.fechaAperturaDesde.Value.Day, 0, 0, 0);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaAperturaDesde.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaAperturaDesde.Value);

            }

            if (parametrosTurnosView.fechaAperturaHasta.HasValue)
            {
                parametrosTurnosView.fechaAperturaHasta = new DateTime(parametrosTurnosView.fechaAperturaHasta.Value.Year, parametrosTurnosView.fechaAperturaHasta.Value.Month, parametrosTurnosView.fechaAperturaHasta.Value.Day, 23, 59, 59);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaAperturaHasta.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaAperturaHasta.Value);
            }

            if (parametrosTurnosView.fechaCierreDesde.HasValue)
            {
                parametrosTurnosView.fechaCierreDesde = new DateTime(parametrosTurnosView.fechaCierreDesde.Value.Year, parametrosTurnosView.fechaCierreDesde.Value.Month, parametrosTurnosView.fechaCierreDesde.Value.Day, 0, 0, 0);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaCierreDesde.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTurnosView.fechaCierreDesde.Value);
            }

            if (parametrosTurnosView.fechaCierreHasta.HasValue)
            {
                parametrosTurnosView.fechaCierreHasta = new DateTime(parametrosTurnosView.fechaCierreHasta.Value.Year, parametrosTurnosView.fechaCierreHasta.Value.Month, parametrosTurnosView.fechaCierreHasta.Value.Day, 23, 59, 59);

                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaCierreHasta.Value);
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTurnosView.fechaCierreHasta.Value);
            }

            if (parametrosTurnosView.turnosSeleccionados == null)
                parametrosTurnosView.turnosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosTurnosView.turnosSeleccionados.Count() > 0)
                {
                    if (entity.Where.Count > 0)
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int turnosFiltrados = 0;

                    foreach (var turno in parametrosTurnosView.turnosSeleccionados)
                    {
                        if (turnosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                        turnosFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosTurnosView.codigoTurno != string.Empty && parametrosTurnosView.codigoTurno != null)
            {
                if (entity.Where.Count > 0)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Turnos.ColumnEnum.CodigoTurno, Depositary.sqlEnum.OperandEnum.Like, "%" + parametrosTurnosView.codigoTurno + "%");
                else
                    entity.Where.Add(Depositary.Business.Views.Reporte.Turnos.ColumnEnum.CodigoTurno, Depositary.sqlEnum.OperandEnum.Like, "%" + parametrosTurnosView.codigoTurno + "%");

            }


            turnos = entity.Items();

            if (turnos.Count > 0)
            {
                foreach (var turno in turnos)
                {
                    ResultReporte resultReporte = new();
                    resultReporte.CierreDiario = turno.CierreDiario;
                    resultReporte.Depositario = turno.Depositario;
                    resultReporte.Empresa = turno.Empresa;
                    resultReporte.Sucursal = turno.Sucursal;
                    resultReporte.Sector = turno.Sector;
                    resultReporte.Fecha = turno.Fecha;
                    resultReporte.Secuencia = turno.Secuencia;
                    resultReporte.FechaApertura = turno.FechaApertura.Year == 1 ? null : turno.FechaApertura;
                    resultReporte.FechaCierre = turno.FechaCierre.Year == 1 ? null : turno.FechaCierre;
                    resultReporte.Moneda = turno.Moneda;
                    resultReporte.TotalAValidar = turno.TotalAValidar;
                    resultReporte.CantidadTransacciones = turno.CantidadTransacciones;
                    resultReporte.TotalValidado = turno.TotalValidado;
                    resultReporte.Turno = turno.Turno;
                    resultReporte.TurnoId = turno.TurnoId;
                    resultReporte.CodigoTurno = turno.CodigoTurno;

                    dataTurnosView.Add(resultReporte);
                }
            }
        }
    }

    /// <summary>
    /// FuncionRender event
    /// </summary>
    /// <param name="args"></param>
    private void ReportRender(DataGridRenderEventArgs<ResultReporte> args)
    {
        if (args.FirstRender)
        {
            if (dataTurnosView != null)
            {
                if (dataTurnosView.Count > 0)
                {
                    StateHasChanged();
                }
            }
        }
    }
    #endregion


}
