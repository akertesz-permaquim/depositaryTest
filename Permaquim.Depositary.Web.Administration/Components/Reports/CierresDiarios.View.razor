@page "/ReporteCierresDiariosView"
@using Permaquim.Depositary.Web.Administration.Controllers;
@using Radzen.Blazor.GridExportOptions;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
    <ChildContent>
        <div>
            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("TITULO_REPORTE_CIERRESDIARIOS",dataLenguaje)</h4>
        </div>
    </ChildContent>
</RadzenBadge>
<hr>


@if (estaCargandoParametrosReporte)
{
    <div class="spinner"></div>
}
else
{
    <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
        <HeaderTemplate>
            <h4 class="m-0 d-flex align-items-center">
                <RadzenIcon Icon="account_box" Class="mr-1" /><b>@MultilenguajeController.ObtenerTextoPorClave("TITULO_PARAMETROSBUSQUEDA",dataLenguaje)</b>
            </h4>
        </HeaderTemplate>
        <ChildContent>
            <RadzenTemplateForm TItem="parametros" Data="@parametrosCierresDiariosView" @bind-Value="parametrosCierresDiariosView" Submit="LoadMainEntityData">
                <ChildContent>
                    <table class="table table-borderless w-auto">
                        <tbody>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHADESDE",dataLenguaje)" Component="fechaDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosCierresDiariosView.fechaDesde) Max="@(parametrosCierresDiariosView.fechaHasta)" Name="fechaDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosCierresDiariosView.fechaHasta.HasValue) Value=@(parametrosCierresDiariosView.fechaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_MENOR_FECHAHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAHASTA",dataLenguaje)" Component="fechaHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosCierresDiariosView.fechaHasta) Min="@(parametrosCierresDiariosView.fechaDesde)" Name="fechaHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosCierresDiariosView.fechaDesde.HasValue) Value=@(parametrosCierresDiariosView.fechaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_MAYOR_FECHADESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_EMPRESAS",dataLenguaje)" Component="dropDownEmpresas" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.empresaSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_EMPRESA",dataLenguaje)" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                                    Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SUCURSALES",dataLenguaje)" Component="dropDownSucursales" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.sucursalSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SUCURSAL",dataLenguaje)" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                                    Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SECTORES",dataLenguaje)" Component="dropDownSectores" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.sectorSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SECTOR",dataLenguaje)" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                                    Change=@(args => OnChangeSector(args)) Class="w-100" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_TURNOS",dataLenguaje)" Component="dropDownTurnos" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownTurnos" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.turnosSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_TURNOS",dataLenguaje)" Data=@dataTurnos TextProperty="Nombre" ValueProperty="TurnoEsquemaDetalleId"
                                                    Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_USUARIOS",dataLenguaje)" Component="dropDownUsuarios" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownUsuarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.usuariosSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_USUARIOS",dataLenguaje)" Data=@dataUsuarios TextProperty="NombreyApellido" ValueProperty="UsuarioId"
                                                    Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_DEPOSITARIOS",dataLenguaje)" Component="dropDownDepositarios" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownDepositarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosCierresDiariosView.depositarioSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_DEPOSITARIOS",dataLenguaje)" Data=@dataDepositariosCombo TextProperty="DepositarioNombre" ValueProperty="DepositarioId"
                                                    Class="w-100" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_CODIGOCIERREDIARIO",dataLenguaje)" Component="txtCodigoOperacion" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenTextBox @bind-Value=@(parametrosCierresDiariosView.codigoCierreDiario) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_CODIGOCIERREDIARIO",dataLenguaje)" Name="txtCodigoOperacion"></RadzenTextBox>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div style="margin-bottom: 1rem" class="row justify-content-center">
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_BUSCAR",dataLenguaje)" ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_LIMPIAR",dataLenguaje)" ButtonStyle="ButtonStyle.Secondary">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
        </ChildContent>
    </RadzenPanel>
}

<div>
    @if (dataCierresDiariosView != null)
    {
        <br />
        <br />
        if (gridCierresDiariosView != null)
        {
            if (dataCierresDiariosView.Count > 0)
            {
                <RadzenGridExportOptions ReportName="@MultilenguajeController.ObtenerTextoPorClave("NOMBRE_ARCHIVO_REPORTE_CIERRESDIARIOS",dataLenguaje)" GridId="gridCierresDiariosView" Grid="@gridCierresDiariosView" TItem="ResultReporte" ExcelButtonCssStyle="background-color:green" NotExportableClass="exclude-from-radzen-export" ExcelTitle="@MultilenguajeController.ObtenerTextoPorClave("BOTON_EXPORTAR_EXCEL",dataLenguaje)" DateTimeFormat="dd/MM/yyyy" CsvExport="false"></RadzenGridExportOptions>
            }
        }
        <RadzenDataGrid @ref="@gridCierresDiariosView"
                    @bind-Settings="@GridSettings"
                    AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)
                    FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    id="gridCierresDiariosView" Render="@ReportRender" Data="@dataCierresDiariosView" TItem="ResultReporte" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Fecha" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHA",dataLenguaje)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Fecha",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Fecha",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Fecha",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Fecha",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Fecha",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Fecha",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Fecha",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Fecha",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CodigoCierreDiario" Title="@MultilenguajeController.ObtenerTextoPorClave("CODIGOCIERREDIARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CodigoCierreDiario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Turno" Title="@MultilenguajeController.ObtenerTextoPorClave("TURNO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Turno",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Turno",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Turno",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Turno",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Turno",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Turno",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Turno",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Turno",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Empresa" Title="@MultilenguajeController.ObtenerTextoPorClave("EMPRESA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Empresa",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Empresa",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Empresa",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Empresa",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Empresa",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Empresa",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Empresa",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sucursal" Title="@MultilenguajeController.ObtenerTextoPorClave("SUCURSAL",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sucursal",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sucursal",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sucursal",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sector" Title="@MultilenguajeController.ObtenerTextoPorClave("SECTOR",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sector",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sector",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sector",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sector",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sector",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sector",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sector",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Depositario" Title="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Depositario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Depositario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Depositario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Depositario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Depositario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Depositario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Depositario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Usuario" Title="@MultilenguajeController.ObtenerTextoPorClave("USUARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Usuario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Usuario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Usuario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Usuario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Usuario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Usuario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Usuario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Usuario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Usuario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Usuario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Moneda" Title="@MultilenguajeController.ObtenerTextoPorClave("MONEDA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Moneda",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Moneda",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Moneda",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Moneda",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Moneda",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Moneda",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Moneda",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Moneda",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalValidado" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTALVALIDADO",dataLenguaje)" Frozen="false" TextAlign="TextAlign.Right"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TotalValidado",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TotalValidado",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TotalValidado",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TotalValidado",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalAValidar" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTALAVALIDAR",dataLenguaje)" Frozen="false" TextAlign="TextAlign.Right"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("TotalAValidar",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("TotalAValidar",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Total" Title="@MultilenguajeController.ObtenerTextoPorClave("TOTAL",dataLenguaje)" Frozen="false" TextAlign="TextAlign.Right"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Total",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Total",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Total",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Total",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Total",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Total",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Total",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Total",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
<hr>

<RadzenNotification />

@code {
    RadzenDataGrid<ResultReporte> gridCierresDiariosView;

    public class parametros
    {
        public DateTime? fechaDesde { get; set; }
        public DateTime? fechaHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public Int64? depositarioSeleccionado { get; set; }
        public IEnumerable<Int64> usuariosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> turnosSeleccionados = new Int64[] { };
        public string codigoCierreDiario { get; set; }
    }

    //Clase creada para sortear algunas cuestiones de la vista que traemos de SQL
    public class ResultReporte
    {
        public Int64 CierreDiarioId { get; set; }
        public string Usuario { get; set; }
        public DateTime? Fecha { get; set; }
        public string Moneda { get; set; }
        public double TotalValidado { get; set; }
        public double TotalAValidar { get; set; }
        public double Total
        {
            get
            {
                return TotalValidado + TotalAValidar;
            }
        }
        public string Sector { get; set; }
        public string Turno { get; set; }
        public string Empresa { get; set; }
        public string Sucursal { get; set; }
        public string Depositario { get; set; }
        public string CodigoCierreDiario { get; set; }
    }

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private List<Depositary.Entities.Views.Reporte.CierresDiarios>? CierresDiarios_entities;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private List<ResultReporte> dataCierresDiariosView;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    //Datasource para dropdown
    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();
    private List<DispositivoEntities.Depositario> depositariosUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();
    private List<DispositivoEntities.Depositario> dataDepositariosCombo = new();

    private List<SeguridadEntities.Usuario> dataUsuarios = new();
    private List<TurnoEntities.TurnoComboReporte> dataTurnos = new();

    private bool estaCargandoGrillaReporte = false;
    private bool estaCargandoParametrosReporte = true;

    private parametros parametrosCierresDiariosView = new();

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);

        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Reporte", "CierresDiarios");
        await Task.Run(CargarCombosBusqueda);
        parametrosCierresDiariosView.fechaDesde = DateTime.Today;
        parametrosCierresDiariosView.fechaHasta = DateTime.Today;
        estaCargandoParametrosReporte = false;

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "ReporteCierresDiariosView", "", dataUsuario.Id);
    }

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
        {
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        }
        else
        {
            dataSucursalesCombo = new();
            parametrosCierresDiariosView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosCierresDiariosView.sectorSeleccionado = null;

            dataDepositariosCombo = depositariosUsuario;
            parametrosCierresDiariosView.depositarioSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosCierresDiariosView.sectorSeleccionado = null;

            if (parametrosCierresDiariosView.empresaSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == parametrosCierresDiariosView.empresaSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();

            parametrosCierresDiariosView.depositarioSeleccionado = null;
        }

    }

    void OnChangeSector(object value)
    {
        if (value != null)
        {
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SectorId == (Int64)value).ToList();
        }
        else
        {
            if (parametrosCierresDiariosView.sucursalSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == parametrosCierresDiariosView.sucursalSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();
        }

    }

    void resetParametros()
    {
        parametrosCierresDiariosView = new();
        dataSectoresCombo = new();
        dataSucursalesCombo = new();
        dataDepositariosCombo = depositariosUsuario;
    }

    #endregion

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        sucursalesUsuario = ReportController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = ReportController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        depositariosUsuario = ReportController.ObtenerListadoDepositariosPorPerfil(dataUsuario.Id);
        dataDepositariosCombo = depositariosUsuario; //En principio vemos todos los depositarios accesibles por perfil.
        dataUsuarios = ReportController.ObtenerUsuarios(false);
        dataTurnos = ReportController.ObtenerTurnos();
    }
    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        estaCargandoGrillaReporte = true;
        dataCierresDiariosView = new();
        Depositary.Business.Views.Reporte.CierresDiarios entity = new();
        List<Depositary.Entities.Views.Reporte.CierresDiarios> cierresDiarios = new();

        //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
        if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
        {
            dataCierresDiariosView = new();
        }
        else
        {
            //Construimos el where general segun las empresas/sucursales/sectores/depositarios que puede ver el usuario
            entity.Where.OpenParentheses();
            entity.Where.OpenParentheses();

            for (int i = 0; i < sectoresUsuario.Count; i++)
            {
                if (i > 0)
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                entity.Where.OpenParentheses();
                entity.Where.Add(Business.Views.Reporte.CierresDiarios.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                if (sucursal != null)
                {
                    entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.CierresDiarios.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                    var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                    if (empresa != null)
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.CierresDiarios.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                }
                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            //Construimos el where segun los parametros de los controles
            if (parametrosCierresDiariosView.empresaSeleccionada.HasValue || parametrosCierresDiariosView.sucursalSeleccionada.HasValue || parametrosCierresDiariosView.sectorSeleccionado.HasValue || parametrosCierresDiariosView.depositarioSeleccionado.HasValue)
            {
                entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                entity.Where.OpenParentheses();

                int cantidadFiltrosCustom = 0;

                if (parametrosCierresDiariosView.empresaSeleccionada.HasValue)
                {
                    entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.empresaSeleccionada.Value);
                    cantidadFiltrosCustom++;
                }

                if (parametrosCierresDiariosView.sucursalSeleccionada.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.sucursalSeleccionada.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.sucursalSeleccionada.Value);
                }

                if (parametrosCierresDiariosView.sectorSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.sectorSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.sectorSeleccionado.Value);
                }

                if (parametrosCierresDiariosView.depositarioSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.depositarioSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosCierresDiariosView.depositarioSeleccionado.Value);
                }

                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            if (parametrosCierresDiariosView.fechaDesde.HasValue)
            {
                parametrosCierresDiariosView.fechaDesde = new DateTime(parametrosCierresDiariosView.fechaDesde.Value.Year, parametrosCierresDiariosView.fechaDesde.Value.Month, parametrosCierresDiariosView.fechaDesde.Value.Day, 0, 0, 0);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosCierresDiariosView.fechaDesde.Value);
            }

            if (parametrosCierresDiariosView.fechaHasta.HasValue)
            {
                parametrosCierresDiariosView.fechaHasta = new DateTime(parametrosCierresDiariosView.fechaHasta.Value.Year, parametrosCierresDiariosView.fechaHasta.Value.Month, parametrosCierresDiariosView.fechaHasta.Value.Day, 23, 59, 59);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.Fecha, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosCierresDiariosView.fechaHasta.Value);
            }

            if (parametrosCierresDiariosView.usuariosSeleccionados == null)
                parametrosCierresDiariosView.usuariosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosCierresDiariosView.usuariosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int usuariosFiltrados = 0;

                    foreach (var usuarioId in parametrosCierresDiariosView.usuariosSeleccionados)
                    {
                        if (usuariosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);

                        usuariosFiltrados++;
                    }
                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosCierresDiariosView.turnosSeleccionados == null)
                parametrosCierresDiariosView.turnosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosCierresDiariosView.turnosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int turnosFiltrados = 0;

                    foreach (var turno in parametrosCierresDiariosView.turnosSeleccionados)
                    {
                        if (turnosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.TurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.TurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                        turnosFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosCierresDiariosView.codigoCierreDiario != string.Empty && parametrosCierresDiariosView.codigoCierreDiario != null)
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.CierresDiarios.ColumnEnum.CodigoCierreDiario, Depositary.sqlEnum.OperandEnum.Like, "%" + parametrosCierresDiariosView.codigoCierreDiario + "%");

            cierresDiarios = entity.Items();

            if (cierresDiarios.Count > 0)
            {
                foreach (var cierreDiario in cierresDiarios)
                {
                    ResultReporte resultReporte = new();
                    resultReporte.Moneda = cierreDiario.Moneda;
                    resultReporte.Sector = cierreDiario.Sector;
                    resultReporte.TotalAValidar = cierreDiario.TotalAValidar;
                    resultReporte.TotalValidado = cierreDiario.TotalValidado;
                    resultReporte.Usuario = cierreDiario.Usuario;
                    resultReporte.Turno = cierreDiario.Turno;
                    resultReporte.Empresa = cierreDiario.Empresa;
                    resultReporte.Sucursal = cierreDiario.Sucursal;
                    resultReporte.Depositario = cierreDiario.Depositario;
                    resultReporte.CodigoCierreDiario = cierreDiario.CodigoCierreDiario;
                    resultReporte.Fecha = cierreDiario.Fecha;
                    dataCierresDiariosView.Add(resultReporte);
                }
            }
        }
    }

    /// <summary>
    /// FuncionRender event
    /// </summary>
    /// <param name="args"></param>
    private void ReportRender(DataGridRenderEventArgs<ResultReporte> args)
    {
        if (args.FirstRender)
        {
            if (dataCierresDiariosView != null)
            {
                if (dataCierresDiariosView.Count > 0)
                {
                    StateHasChanged();
                }
            }
        }
    }

    #endregion
}
