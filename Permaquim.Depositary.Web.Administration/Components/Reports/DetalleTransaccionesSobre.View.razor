@page "/ReporteDetalleTransaccionesSobreView"
@using Permaquim.Depositary.Web.Administration.Controllers;
@using Radzen.Blazor.GridExportOptions;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<RadzenBadge BadgeStyle="BadgeStyle.Secondary">
    <ChildContent>
        <div>
            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("TITULO_REPORTE_DETALLETRANSACCIONESSOBRE",dataLenguaje)</h4>
        </div>
    </ChildContent>
</RadzenBadge>
<hr>

@if (!TransaccionId.HasValue)
{
    @if (estaCargandoParametrosReporte)
    {
        <div class="spinner"></div>
    }
    else
    {
        <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
            <HeaderTemplate>
                <h4 class="m-0 d-flex align-items-center">
                    <RadzenIcon Icon="account_box" Class="mr-1" /><b>@MultilenguajeController.ObtenerTextoPorClave("TITULO_PARAMETROSBUSQUEDA",dataLenguaje)</b>
                </h4>
            </HeaderTemplate>
            <ChildContent>
                <RadzenTemplateForm TItem="parametros" Data="@parametrosDetalleTransaccionesSobreView" @bind-Value="parametrosDetalleTransaccionesSobreView" Submit="LoadMainEntityData">
                    <ChildContent>
                        <table class="table table-borderless w-auto">
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHADESDE",dataLenguaje)" Component="fechaDesdeDatePicker" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td colspan="2">
                                        <div>
                                            <RadzenDatePicker @bind-Value=@(parametrosDetalleTransaccionesSobreView.fechaDesde) Max="@(parametrosDetalleTransaccionesSobreView.fechaHasta)" Name="fechaDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                            <RadzenRequiredValidator Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                            <RadzenCompareValidator Visible=@(parametrosDetalleTransaccionesSobreView.fechaHasta.HasValue) Value=@(parametrosDetalleTransaccionesSobreView.fechaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHADESDE_MENOR_FECHAHASTA",dataLenguaje)" Style="position: inherit" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAHASTA",dataLenguaje)" Component="fechaHastaDatePicker" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td colspan="2">
                                        <div>
                                            <RadzenDatePicker @bind-Value=@(parametrosDetalleTransaccionesSobreView.fechaHasta) Min="@(parametrosDetalleTransaccionesSobreView.fechaDesde)" Name="fechaHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                            <RadzenRequiredValidator Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                            <RadzenCompareValidator Visible=@(parametrosDetalleTransaccionesSobreView.fechaDesde.HasValue) Value=@(parametrosDetalleTransaccionesSobreView.fechaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAHASTA_MAYOR_FECHADESDE",dataLenguaje)" Style="position: inherit" />
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_EMPRESAS",dataLenguaje)" Component="dropDownEmpresas" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.empresaSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_EMPRESA",dataLenguaje)" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                                    Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SUCURSALES",dataLenguaje)" Component="dropDownSucursales" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.sucursalSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SUCURSAL",dataLenguaje)" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                                    Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SECTORES",dataLenguaje)" Component="dropDownSectores" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.sectorSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SECTOR",dataLenguaje)" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                                    Change=@(args => OnChangeSector(args)) Class="w-100" />
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_CONTENEDORES",dataLenguaje)" Component="dropDownContenedores" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownContenedores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.contenedoresSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_CONTENEDORES",dataLenguaje)" Data=@dataContenedores TextProperty="NombreIdentificador" ValueProperty="ContenedorId"
                                                    Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_TURNOS",dataLenguaje)" Component="dropDownTurnos" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownTurnos" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.turnosSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_TURNOS",dataLenguaje)" Data=@dataTurnos TextProperty="Nombre" ValueProperty="TurnoEsquemaDetalleId"
                                                    Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_USUARIOS",dataLenguaje)" Component="dropDownUsuarios" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownUsuarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.usuariosSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_USUARIOS",dataLenguaje)" Data=@dataUsuarios TextProperty="NombreyApellido" ValueProperty="UsuarioId"
                                                    Class="w-100" />
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_DEPOSITARIOS",dataLenguaje)" Component="dropDownDepositarios" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownDepositarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.depositarioSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_DEPOSITARIOS",dataLenguaje)" Data=@dataDepositariosCombo TextProperty="DepositarioNombre" ValueProperty="DepositarioId"
                                                    Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_ORIGENES",dataLenguaje)" Component="dropDownOrigenes" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenDropDown AllowClear="true" Name="dropDownOrigenes" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosDetalleTransaccionesSobreView.origenesSeleccionados) Multiple="true" Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_ORIGENES",dataLenguaje)" Data=@dataOrigenes TextProperty="OrigenNombre" ValueProperty="OrigenId"
                                                    Class="w-100" />
                                        </div>
                                    </td>
                                    <td>
                                        <div style="font-weight:bold;align-self:center;">
                                            <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_CODIGOOPERACION",dataLenguaje)" Component="txtCodigoOperacion" style="width: 100%">
                                            </RadzenLabel>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <RadzenTextBox @bind-Value=@(parametrosDetalleTransaccionesSobreView.codigoOperacion) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_CODIGOOPERACION",dataLenguaje)" Name="txtCodigoOperacion"></RadzenTextBox>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div style="margin-bottom: 1rem" class="row justify-content-center">
                            <div class="col col-md-auto">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_BUSCAR",dataLenguaje)" ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_LIMPIAR",dataLenguaje)" ButtonStyle="ButtonStyle.Secondary">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
            </ChildContent>
        </RadzenPanel>
    }
}

@if (DetalleTransaccionesSobre_entities != null)
{
    <br />
    <br />
    if (gridDetalleTransaccionesSobreView != null)
    {
        if (DetalleTransaccionesSobre_entities.Count > 0)
        {
            <RadzenGridExportOptions ReportName="@MultilenguajeController.ObtenerTextoPorClave("NOMBRE_ARCHIVO_REPORTE_DETALLETRANSACCIONESSOBRE",dataLenguaje)" GridId="gridDetalleTransaccionesSobreView" Grid="@gridDetalleTransaccionesSobreView" TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" ExcelButtonCssStyle="background-color:green" NotExportableClass="exclude-from-radzen-export" ExcelTitle="@MultilenguajeController.ObtenerTextoPorClave("BOTON_EXPORTAR_EXCEL",dataLenguaje)" DateTimeFormat="dd/MM/yyyy" CsvExport="false"></RadzenGridExportOptions>
        }
    }
    <RadzenDataGrid @ref="@gridDetalleTransaccionesSobreView" Render="@ReportRender" id="gridDetalleTransaccionesSobreView" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)" AllowColumnResize="true" AllowSorting="true" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DetalleTransaccionesSobre_entities" TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
        </EmptyTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="TransaccionId" Title="@MultilenguajeController.ObtenerTextoPorClave("TRANSACCIONID",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="FechaTransaccion" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHATRANSACCION",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="CodigoOperacion" Title="@MultilenguajeController.ObtenerTextoPorClave("CODIGOOPERACION",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Empresa" Title="@MultilenguajeController.ObtenerTextoPorClave("EMPRESA",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Sucursal" Title="@MultilenguajeController.ObtenerTextoPorClave("SUCURSAL",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Sector" Title="@MultilenguajeController.ObtenerTextoPorClave("SECTOR",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Depositario" Title="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIO",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Usuario" Title="@MultilenguajeController.ObtenerTextoPorClave("USUARIO",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Turno" Title="@MultilenguajeController.ObtenerTextoPorClave("TURNO",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Contenedor" Title="@MultilenguajeController.ObtenerTextoPorClave("CONTENEDOR",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="10%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Origen" Title="@MultilenguajeController.ObtenerTextoPorClave("ORIGEN",dataLenguaje)" Visible="@(!TransaccionId.HasValue)" Frozen="false" Sortable="true" Width="10%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="CodigoSobre" Title="@MultilenguajeController.ObtenerTextoPorClave("CODIGOSOBRE",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="UsuarioId" Title="@MultilenguajeController.ObtenerTextoPorClave("USUARIOID",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="ContenedorId" Title="@MultilenguajeController.ObtenerTextoPorClave("CONTENEDORID",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Moneda" Title="@MultilenguajeController.ObtenerTextoPorClave("MONEDA",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="TipoValor" Title="@MultilenguajeController.ObtenerTextoPorClave("TIPOVALOR",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre" Property="Cantidad" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDAD",dataLenguaje)" Frozen="false" Sortable="true" Width="60px">
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}
<hr>

<RadzenNotification />

@code {
    RadzenDataGrid<Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre> gridDetalleTransaccionesSobreView;

    [Parameter]
    public Int64? TransaccionId { get; set; }

    public class parametros
    {
        public DateTime? fechaDesde { get; set; }
        public DateTime? fechaHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public Int64? depositarioSeleccionado { get; set; }
        public IEnumerable<Int64> usuariosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> contenedoresSeleccionados = new Int64[] { };
        public IEnumerable<Int64> turnosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> origenesSeleccionados = new Int64[] { };
        public string codigoOperacion { get; set; }
    }


    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();
    private List<DispositivoEntities.Depositario> depositariosUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();
    private List<DispositivoEntities.Depositario> dataDepositariosCombo = new();

    private List<Entities.Origen> dataOrigenes = new();
    private List<TransaccionEntities.Contenedor> dataContenedores = new();
    private List<SeguridadEntities.Usuario> dataUsuarios = new();
    private List<TurnoEntities.TurnoComboReporte> dataTurnos = new();

    private parametros parametrosDetalleTransaccionesSobreView = new();
    private bool estaCargandoParametrosReporte = true;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre DetalleTransaccionesSobre_entity = new();
    private List<Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre>? DetalleTransaccionesSobre_entities;

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        if (TransaccionId == null)
        {
            await Task.Run(CargarCombosBusqueda);
            //Por defecto las fechas desde y hasta son dia de hoy.
            parametrosDetalleTransaccionesSobreView.fechaDesde = DateTime.Today;
            parametrosDetalleTransaccionesSobreView.fechaHasta = DateTime.Today;
            estaCargandoParametrosReporte = false;
        }
        else
            await Task.Run(LoadMainEntityData);
    }

    #region Loading entities data

    #endregion

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
        {
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        }
        else
        {
            dataSucursalesCombo = new();
            parametrosDetalleTransaccionesSobreView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosDetalleTransaccionesSobreView.sectorSeleccionado = null;

            dataDepositariosCombo = depositariosUsuario;
            parametrosDetalleTransaccionesSobreView.depositarioSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosDetalleTransaccionesSobreView.sectorSeleccionado = null;

            if (parametrosDetalleTransaccionesSobreView.empresaSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == parametrosDetalleTransaccionesSobreView.empresaSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();

            parametrosDetalleTransaccionesSobreView.depositarioSeleccionado = null;
        }

    }

    void OnChangeSector(object value)
    {
        if (value != null)
        {
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SectorId == (Int64)value).ToList();
        }
        else
        {
            if (parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();
        }

    }

    void resetParametros()
    {
        parametrosDetalleTransaccionesSobreView = new();
    }

    #endregion

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        sucursalesUsuario = ReportController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = ReportController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        depositariosUsuario = ReportController.ObtenerListadoDepositariosPorPerfil(dataUsuario.Id);
        dataDepositariosCombo = depositariosUsuario; //En principio vemos todos los depositarios accesibles por perfil.
        dataUsuarios = ReportController.ObtenerUsuarios(false);
        dataContenedores = ReportController.ObtenerContenedores(false);
        dataOrigenes = ReportController.ObtenerOrigenes(false);
        dataTurnos = ReportController.ObtenerTurnos();
    }

    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        DetalleTransaccionesSobre_entities = new();
        Depositary.Business.Views.Reporte.DetalleTransaccionesSobre entity = new();

        if (TransaccionId.HasValue)
        {
            entity.Where.Add(Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.TransaccionId, sqlEnum.OperandEnum.Equal, TransaccionId.Value);
            DetalleTransaccionesSobre_entities = entity.Items();
        }
        else
        {
            //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
            if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
            {
                DetalleTransaccionesSobre_entities = new();
            }
            else
            {
                //Construimos el where general segun las empresas/sucursales/sectores/depositarios que puede ver el usuario
                entity.Where.OpenParentheses();
                entity.Where.OpenParentheses();

                for (int i = 0; i < sectoresUsuario.Count; i++)
                {
                    if (i > 0)
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                    entity.Where.OpenParentheses();
                    entity.Where.Add(Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                    var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                    if (sucursal != null)
                    {
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                        var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                        if (empresa != null)
                            entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                    }
                    entity.Where.CloseParentheses();
                }

                entity.Where.CloseParentheses();

                //Construimos el where segun los parametros de los controles
                if (parametrosDetalleTransaccionesSobreView.empresaSeleccionada.HasValue || parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.HasValue || parametrosDetalleTransaccionesSobreView.sectorSeleccionado.HasValue || parametrosDetalleTransaccionesSobreView.depositarioSeleccionado.HasValue)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int cantidadFiltrosCustom = 0;

                    if (parametrosDetalleTransaccionesSobreView.empresaSeleccionada.HasValue)
                    {
                        entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.empresaSeleccionada.Value);
                        cantidadFiltrosCustom++;
                    }

                    if (parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.HasValue)
                    {
                        if (cantidadFiltrosCustom > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.Value);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.sucursalSeleccionada.Value);
                    }

                    if (parametrosDetalleTransaccionesSobreView.sectorSeleccionado.HasValue)
                    {
                        if (cantidadFiltrosCustom > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.sectorSeleccionado.Value);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.sectorSeleccionado.Value);
                    }

                    if (parametrosDetalleTransaccionesSobreView.depositarioSeleccionado.HasValue)
                    {
                        if (cantidadFiltrosCustom > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.depositarioSeleccionado.Value);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesSobreView.depositarioSeleccionado.Value);
                    }

                    entity.Where.CloseParentheses();
                }

                entity.Where.CloseParentheses();

                if (parametrosDetalleTransaccionesSobreView.fechaDesde.HasValue)
                {
                    parametrosDetalleTransaccionesSobreView.fechaDesde = new DateTime(parametrosDetalleTransaccionesSobreView.fechaDesde.Value.Year, parametrosDetalleTransaccionesSobreView.fechaDesde.Value.Month, parametrosDetalleTransaccionesSobreView.fechaDesde.Value.Day, 0, 0, 0);
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosDetalleTransaccionesSobreView.fechaDesde.Value);
                }

                if (parametrosDetalleTransaccionesSobreView.fechaHasta.HasValue)
                {
                    parametrosDetalleTransaccionesSobreView.fechaHasta = new DateTime(parametrosDetalleTransaccionesSobreView.fechaHasta.Value.Year, parametrosDetalleTransaccionesSobreView.fechaHasta.Value.Month, parametrosDetalleTransaccionesSobreView.fechaHasta.Value.Day, 23, 59, 59);
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosDetalleTransaccionesSobreView.fechaHasta.Value);
                }

                if (parametrosDetalleTransaccionesSobreView.usuariosSeleccionados == null)
                    parametrosDetalleTransaccionesSobreView.usuariosSeleccionados = new Int64[] { };
                else
                {
                    if (parametrosDetalleTransaccionesSobreView.usuariosSeleccionados.Count() > 0)
                    {
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                        entity.Where.OpenParentheses();

                        int usuariosFiltrados = 0;

                        foreach (var usuarioId in parametrosDetalleTransaccionesSobreView.usuariosSeleccionados)
                        {
                            if (usuariosFiltrados > 0)
                                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);
                            else
                                entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);

                            usuariosFiltrados++;
                        }
                        entity.Where.CloseParentheses();
                    }
                }

                if (parametrosDetalleTransaccionesSobreView.contenedoresSeleccionados == null)
                    parametrosDetalleTransaccionesSobreView.contenedoresSeleccionados = new Int64[] { };
                else
                {
                    if (parametrosDetalleTransaccionesSobreView.contenedoresSeleccionados.Count() > 0)
                    {
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                        entity.Where.OpenParentheses();

                        int contenedoresFiltrados = 0;

                        foreach (var contenedor in parametrosDetalleTransaccionesSobreView.contenedoresSeleccionados)
                        {
                            if (contenedoresFiltrados > 0)
                                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);
                            else
                                entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);

                            contenedoresFiltrados++;
                        }

                        entity.Where.CloseParentheses();
                    }
                }

                if (parametrosDetalleTransaccionesSobreView.turnosSeleccionados == null)
                    parametrosDetalleTransaccionesSobreView.turnosSeleccionados = new Int64[] { };
                else
                {
                    if (parametrosDetalleTransaccionesSobreView.turnosSeleccionados.Count() > 0)
                    {
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                        entity.Where.OpenParentheses();

                        int turnosFiltrados = 0;

                        foreach (var turno in parametrosDetalleTransaccionesSobreView.turnosSeleccionados)
                        {
                            if (turnosFiltrados > 0)
                                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                            else
                                entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                            turnosFiltrados++;
                        }

                        entity.Where.CloseParentheses();
                    }
                }

                if (parametrosDetalleTransaccionesSobreView.origenesSeleccionados == null)
                    parametrosDetalleTransaccionesSobreView.origenesSeleccionados = new Int64[] { };
                else
                {
                    if (parametrosDetalleTransaccionesSobreView.origenesSeleccionados.Count() > 0)
                    {
                        entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                        entity.Where.OpenParentheses();

                        int origenesFiltrados = 0;

                        foreach (var turno in parametrosDetalleTransaccionesSobreView.origenesSeleccionados)
                        {
                            if (origenesFiltrados > 0)
                                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.OrigenId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                            else
                                entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.OrigenId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                            origenesFiltrados++;
                        }

                        entity.Where.CloseParentheses();
                    }
                }

                if (parametrosDetalleTransaccionesSobreView.codigoOperacion != string.Empty && parametrosDetalleTransaccionesSobreView.codigoOperacion != null)
                    entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransaccionesSobre.ColumnEnum.CodigoOperacion, Depositary.sqlEnum.OperandEnum.Like, "%" + parametrosDetalleTransaccionesSobreView.codigoOperacion + "%");


                DetalleTransaccionesSobre_entities = entity.Items();
            }
        }

    }

    /// <summary>
    /// FuncionRender event
    /// </summary>
    /// <param name="args"></param>
    private void ReportRender(DataGridRenderEventArgs<Depositary.Entities.Views.Reporte.DetalleTransaccionesSobre> args)
    {
        if (args.FirstRender)
        {
            if (DetalleTransaccionesSobre_entities != null)
            {
                if (DetalleTransaccionesSobre_entities.Count > 0)
                {
                    StateHasChanged();
                }
            }
        }
    }
    #endregion
}
