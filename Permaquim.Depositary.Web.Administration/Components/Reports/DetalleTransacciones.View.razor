@page "/ReporteDetalleTransaccionesView"
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager


<RadzenBadge BadgeStyle="BadgeStyle.Secondary">
    <ChildContent>
        <div>
            <h4 style="color:white;">Informe detalle de transacciones por fecha</h4>
        </div>
    </ChildContent>
</RadzenBadge>
<hr>

@if (!TransaccionId.HasValue)
{
    @if (estaCargandoParametrosReporte)
    {
        <div class="spinner"></div>
    }
    else
    {
        <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
            <HeaderTemplate>
                <h4 class="m-0 d-flex align-items-center">
                    <RadzenIcon Icon="account_box" Class="mr-1" /><b>Parametros de busqueda</b>
                </h4>
            </HeaderTemplate>
            <ChildContent>
                <RadzenTemplateForm TItem="parametros" Data="@parametrosDetalleTransaccionesView" @bind-Value="parametrosDetalleTransaccionesView" Submit="LoadMainEntityData">
                    <ChildContent>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Fecha desde:" Component="fechaDesdeDatePicker" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenDatePicker @bind-Value=@(parametrosDetalleTransaccionesView.fechaDesde) Max="@(parametrosDetalleTransaccionesView.fechaHasta)" Name="fechaDesdeDatePicker" AllowClear="true" DateFormat="d" Class="w-100" />
                                <RadzenRequiredValidator Component="fechaDesdeDatePicker" Text="Fecha desde is required" Style="position: inherit" />
                                <RadzenCompareValidator Visible=@(parametrosDetalleTransaccionesView.fechaHasta.HasValue) Value=@(parametrosDetalleTransaccionesView.fechaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="La fecha desde debe ser menor a la fecha hasta" Style="position: inherit" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Fecha hasta:" Component="fechaHastaDatePicker" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-3">
                                <RadzenDatePicker @bind-Value=@(parametrosDetalleTransaccionesView.fechaHasta) Min="@(parametrosDetalleTransaccionesView.fechaDesde)" Name="fechaHastaDatePicker" AllowClear="true" DateFormat="d" Class="w-100" />
                                <RadzenRequiredValidator Component="fechaHastaDatePicker" Text="Fecha hasta is required" Style="position: inherit" />
                                <RadzenCompareValidator Visible=@(parametrosDetalleTransaccionesView.fechaDesde.HasValue) Value=@(parametrosDetalleTransaccionesView.fechaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="La fecha hasta debe ser mayor a la fecha desde" Style="position: inherit" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Empresas :" Component="dropDownEmpresas" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.empresaSeleccionada) Placeholder="Seleccione empresa" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                        Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Sucursales :" Component="dropDownSucursales" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.sucursalSeleccionada) Placeholder="Seleccione sucursal" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                        Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Sectores :" Component="dropDownSectores" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.sectorSeleccionado) Placeholder="Seleccione sector" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                        Class="w-100" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Contenedores :" Component="dropDownContenedores" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownContenedores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.contenedoresSeleccionados) Multiple="true" Placeholder="Seleccione contenedores" Data=@dataContenedores TextProperty="NombreIdentificador" ValueProperty="ContenedorId"
                                        Class="w-100" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Turnos :" Component="dropDownTurnos" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownTurnos" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.turnosSeleccionados) Multiple="true" Placeholder="Seleccione turnos" Data=@dataTurnos TextProperty="Nombre" ValueProperty="TurnoEsquemaDetalleId"
                                        Class="w-100" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Usuarios :" Component="dropDownUsuarios" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownUsuarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.usuariosSeleccionados) Multiple="true" Placeholder="Seleccione usuarios" Data=@dataUsuarios TextProperty="NombreyApellido" ValueProperty="UsuarioId"
                                        Class="w-100" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row">
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Depositarios :" Component="dropDownDepositarios" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownDepositarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.depositarioSeleccionado) Placeholder="Seleccione depositario" Data=@dataDepositariosCombo TextProperty="DepositarioNombre" ValueProperty="DepositarioId"
                                        Class="w-100" />
                            </div>
                            <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                                <RadzenLabel Text="Origenes :" Component="dropDownOrigenes" style="width: 100%">
                                </RadzenLabel>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenDropDown AllowClear="true" Name="dropDownOrigenes" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosDetalleTransaccionesView.origenesSeleccionados) Multiple="true" Placeholder="Seleccione origenes" Data=@dataOrigenes TextProperty="OrigenNombre" ValueProperty="OrigenId"
                                        Class="w-100" />
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem" class="row justify-content-center">
                            <div class="col col-md-auto">
                                <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="Buscar" ButtonStyle="ButtonStyle.Primary">
                                </RadzenButton>
                            </div>
                            <div class="col col-md-auto">
                                <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="Limpiar" ButtonStyle="ButtonStyle.Secondary">
                                </RadzenButton>
                            </div>
                        </div>
                    </ChildContent>
                </RadzenTemplateForm>
            </ChildContent>
        </RadzenPanel>
    }
}

@if (DetalleTransacciones_entities != null)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DetalleTransacciones_entities" TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
        </EmptyTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="TransaccionId" Title="TransaccionId" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="FechaTransaccion" Title="FechaTransaccion" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Empresa" Title="Empresa" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Sucursal" Title="Sucursal" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Sector" Title="Sector" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Depositario" Title="Depositario" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Usuario" Title="Usuario" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Turno" Title="Turno" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Contenedor" Title="Contenedor" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="10%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Origen" Title="Origen" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="10%">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Moneda" Title="Moneda" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Denominacion" Title="Denominacion" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="CodigoMoneda" Title="CodigoMoneda" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Depositary.Entities.Views.Reporte.DetalleTransacciones" Property="Total" Title="Total" Frozen="false" Sortable="true" Filterable="true" Width="60px">
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<hr>

<RadzenNotification />

@code {
    [Parameter]
    public Int64? TransaccionId { get; set; }

    public class parametros
    {
        public DateTime? fechaDesde { get; set; }
        public DateTime? fechaHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public Int64? depositarioSeleccionado { get; set; }
        public IEnumerable<Int64> usuariosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> contenedoresSeleccionados = new Int64[] { };
        public IEnumerable<Int64> turnosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> origenesSeleccionados = new Int64[] { };
    }

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;

    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();


    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();
    private List<DispositivoEntities.Depositario> depositariosUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();
    private List<DispositivoEntities.Depositario> dataDepositariosCombo = new();

    private List<Entities.Origen> dataOrigenes = new();
    private List<TransaccionEntities.Contenedor> dataContenedores = new();
    private List<SeguridadEntities.Usuario> dataUsuarios = new();
    private List<TurnoEntities.TurnoComboReporte> dataTurnos = new();

    private parametros parametrosDetalleTransaccionesView = new();

    private bool estaCargandoGrillaReporte = false;
    private bool estaCargandoParametrosReporte = true;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private List<Depositary.Entities.Views.Reporte.DetalleTransacciones>? DetalleTransacciones_entities;

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        if (TransaccionId == null)
        {
            await Task.Run(CargarCombosBusqueda);
            //Por defecto las fechas desde y hasta son dia de hoy.
            parametrosDetalleTransaccionesView.fechaDesde = DateTime.Today;
            parametrosDetalleTransaccionesView.fechaHasta = DateTime.Today;
            estaCargandoParametrosReporte = false;
        }
        else
            await Task.Run(LoadMainEntityData);
    }

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
        {
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        }
        else
        {
            dataSucursalesCombo = new();
            parametrosDetalleTransaccionesView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosDetalleTransaccionesView.sectorSeleccionado = null;

            dataDepositariosCombo = new();
            parametrosDetalleTransaccionesView.depositarioSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosDetalleTransaccionesView.sectorSeleccionado = null;

            dataDepositariosCombo = new();
            parametrosDetalleTransaccionesView.depositarioSeleccionado = null;
        }

    }

    void resetParametros()
    {
        parametrosDetalleTransaccionesView = new();
    }

    #endregion

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        sucursalesUsuario = ReportController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = ReportController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        depositariosUsuario = ReportController.ObtenerListadoDepositariosPorPerfil(dataUsuario.Id);
        dataDepositariosCombo = depositariosUsuario; //En principio vemos todos los depositarios accesibles por perfil.
        dataUsuarios = ReportController.ObtenerUsuarios(false);
        dataContenedores = ReportController.ObtenerContenedores(false);
        dataOrigenes = ReportController.ObtenerOrigenes(false);
        dataTurnos = ReportController.ObtenerTurnos();
    }
    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        estaCargandoGrillaReporte = true;
        DetalleTransacciones_entities = new();
        Depositary.Business.Views.Reporte.DetalleTransacciones entity = new();
        List<Depositary.Entities.Views.Reporte.DetalleTransacciones> transacciones = new();

        //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
        if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
        {
            DetalleTransacciones_entities = new();
        }
        else
        {
            //Construimos el where general segun las empresas/sucursales/sectores/depositarios que puede ver el usuario
            entity.Where.OpenParentheses();
            entity.Where.OpenParentheses();

            for (int i = 0; i < sectoresUsuario.Count; i++)
            {
                if (i > 0)
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                entity.Where.OpenParentheses();
                entity.Where.Add(Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                if (sucursal != null)
                {
                    entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                    var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                    if (empresa != null)
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.DetalleTransacciones.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                }
                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            //Construimos el where segun los parametros de los controles
            if (parametrosDetalleTransaccionesView.empresaSeleccionada.HasValue || parametrosDetalleTransaccionesView.sucursalSeleccionada.HasValue || parametrosDetalleTransaccionesView.sectorSeleccionado.HasValue || parametrosDetalleTransaccionesView.depositarioSeleccionado.HasValue)
            {
                entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                entity.Where.OpenParentheses();

                int cantidadFiltrosCustom = 0;

                if (parametrosDetalleTransaccionesView.empresaSeleccionada.HasValue)
                {
                    entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.empresaSeleccionada.Value);
                    cantidadFiltrosCustom++;
                }

                if (parametrosDetalleTransaccionesView.sucursalSeleccionada.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.sucursalSeleccionada.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.sucursalSeleccionada.Value);
                }

                if (parametrosDetalleTransaccionesView.sectorSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.sectorSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.sectorSeleccionado.Value);
                }

                if (parametrosDetalleTransaccionesView.depositarioSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.depositarioSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosDetalleTransaccionesView.depositarioSeleccionado.Value);
                }

                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            if (parametrosDetalleTransaccionesView.fechaDesde.HasValue)
            {
                parametrosDetalleTransaccionesView.fechaDesde = new DateTime(parametrosDetalleTransaccionesView.fechaDesde.Value.Year, parametrosDetalleTransaccionesView.fechaDesde.Value.Month, parametrosDetalleTransaccionesView.fechaDesde.Value.Day, 0, 0, 0);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosDetalleTransaccionesView.fechaDesde.Value);
            }

            if (parametrosDetalleTransaccionesView.fechaHasta.HasValue)
            {
                parametrosDetalleTransaccionesView.fechaHasta = new DateTime(parametrosDetalleTransaccionesView.fechaHasta.Value.Year, parametrosDetalleTransaccionesView.fechaHasta.Value.Month, parametrosDetalleTransaccionesView.fechaHasta.Value.Day, 23, 59, 59);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosDetalleTransaccionesView.fechaHasta.Value);
            }

            if (parametrosDetalleTransaccionesView.usuariosSeleccionados == null)
                parametrosDetalleTransaccionesView.usuariosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosDetalleTransaccionesView.usuariosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int usuariosFiltrados = 0;

                    foreach (var usuarioId in parametrosDetalleTransaccionesView.usuariosSeleccionados)
                    {
                        if (usuariosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);

                        usuariosFiltrados++;
                    }
                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosDetalleTransaccionesView.contenedoresSeleccionados == null)
                parametrosDetalleTransaccionesView.contenedoresSeleccionados = new Int64[] { };
            else
            {
                if (parametrosDetalleTransaccionesView.contenedoresSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int contenedoresFiltrados = 0;

                    foreach (var contenedor in parametrosDetalleTransaccionesView.contenedoresSeleccionados)
                    {
                        if (contenedoresFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);

                        contenedoresFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosDetalleTransaccionesView.turnosSeleccionados == null)
                parametrosDetalleTransaccionesView.turnosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosDetalleTransaccionesView.turnosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int turnosFiltrados = 0;

                    foreach (var turno in parametrosDetalleTransaccionesView.turnosSeleccionados)
                    {
                        if (turnosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                        turnosFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosDetalleTransaccionesView.origenesSeleccionados == null)
                parametrosDetalleTransaccionesView.origenesSeleccionados = new Int64[] { };
            else
            {
                if (parametrosDetalleTransaccionesView.origenesSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int origenesFiltrados = 0;

                    foreach (var turno in parametrosDetalleTransaccionesView.origenesSeleccionados)
                    {
                        if (origenesFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.OrigenId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.DetalleTransacciones.ColumnEnum.OrigenId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                        origenesFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            transacciones = entity.Items();
        }

    }
    #endregion
}
