@page "/ReporteContenedoresView"
@using Permaquim.Depositary.Web.Administration.Controllers;
@using Radzen.Blazor.GridExportOptions;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager


<RadzenBadge Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoTituloBadge", false) BadgeStyle="BadgeStyle.Secondary">
    <ChildContent>
        <div>
            <h4 style="color:white;">@MultilenguajeController.ObtenerTextoPorClave("TITULO_REPORTE_CONTENEDORES",dataLenguaje)</h4>
        </div>
    </ChildContent>
</RadzenBadge>
<hr>

@if (estaCargandoParametrosReporte)
{
    <div class="spinner"></div>
}
else
{
    <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
        <HeaderTemplate>
            <h4 class="m-0 d-flex align-items-center">
                <RadzenIcon Icon="account_box" Class="mr-1" /><b>@MultilenguajeController.ObtenerTextoPorClave("TITULO_PARAMETROSBUSQUEDA",dataLenguaje)</b>
            </h4>
        </HeaderTemplate>
        <ChildContent>
            <RadzenTemplateForm TItem="parametros" Data="@parametrosContenedoresView" @bind-Value="parametrosContenedoresView" Submit="LoadMainEntityData">
                <ChildContent>
                    <table class="table table-borderless w-auto" style="vertical-align: middle">
                        <tbody>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAAPERTURADESDE",dataLenguaje)" Component="fechaAperturaDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosContenedoresView.fechaAperturaDesde) Max="@(parametrosContenedoresView.fechaAperturaHasta)" Name="fechaAperturaDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaAperturaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURADESDE_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosContenedoresView.fechaAperturaHasta.HasValue) Value=@(parametrosContenedoresView.fechaAperturaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaAperturaDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURADESDE_MENOR_FECHAAPERTURAHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHAAPERTURAHASTA",dataLenguaje)" Component="fechaAperturaHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosContenedoresView.fechaAperturaHasta) Min="@(parametrosContenedoresView.fechaAperturaDesde)" Name="fechaAperturaHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenRequiredValidator Component="fechaAperturaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURAHASTA_REQUERIDA",dataLenguaje)" Style="position: inherit" />
                                        <RadzenCompareValidator Visible=@(parametrosContenedoresView.fechaAperturaDesde.HasValue) Value=@(parametrosContenedoresView.fechaAperturaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaAperturaHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHAAPERTURAHASTA_MAYOR_FECHAAPERTURADESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHACIERREDESDE",dataLenguaje)" Component="fechaCierreDesdeDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosContenedoresView.fechaCierreDesde) Max="@(parametrosContenedoresView.fechaCierreHasta)" Name="fechaCierreDesdeDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosContenedoresView.fechaCierreHasta.HasValue) Value=@(parametrosContenedoresView.fechaCierreHasta) Operator="CompareOperator.LessThanEqual" Component="fechaCierreDesdeDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHACIERREDESDE_MENOR_FECHACIERREHASTA",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_FECHACIERREHASTA",dataLenguaje)" Component="fechaCierreHastaDatePicker" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDatePicker @bind-Value=@(parametrosContenedoresView.fechaCierreHasta) Min="@(parametrosContenedoresView.fechaCierreDesde)" Name="fechaCierreHastaDatePicker" AllowClear="true" DateFormat="dd/MM/yyyy" Class="w-100" />
                                        <RadzenCompareValidator Visible=@(parametrosContenedoresView.fechaCierreDesde.HasValue) Value=@(parametrosContenedoresView.fechaCierreDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaCierreHastaDatePicker" Text="@MultilenguajeController.ObtenerTextoPorClave("VALIDACION_FECHACIERREHASTA_MAYOR_FECHACIERREDESDE",dataLenguaje)" Style="position: inherit" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_EMPRESAS",dataLenguaje)" Component="dropDownEmpresas" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosContenedoresView.empresaSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_EMPRESA",dataLenguaje)" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                                    Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SUCURSALES",dataLenguaje)" Component="dropDownSucursales" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosContenedoresView.sucursalSeleccionada) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SUCURSAL",dataLenguaje)" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                                    Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_SECTORES",dataLenguaje)" Component="dropDownSectores" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosContenedoresView.sectorSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_SECTOR",dataLenguaje)" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                                    Change=@(args => OnChangeSector(args)) Class="w-100" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_DEPOSITARIOS",dataLenguaje)" Component="dropDownDepositarios" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenDropDown AllowClear="true" Name="dropDownDepositarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@(parametrosContenedoresView.depositarioSeleccionado) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_DEPOSITARIOS",dataLenguaje)" Data=@dataDepositariosCombo TextProperty="DepositarioNombre" ValueProperty="DepositarioId"
                                                    Class="w-100" />
                                    </div>
                                </td>
                                <td>
                                    <div style="font-weight:bold;align-self:center;">
                                        <RadzenLabel Text="@MultilenguajeController.ObtenerTextoPorClave("PARAMETRO_IDENTIFICADOR",dataLenguaje)" Component="txtIdentificador" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                </td>
                                <td colspan="2">
                                    <div>
                                        <RadzenTextBox Style="width:100%" @bind-Value=@(parametrosContenedoresView.identificador) Placeholder="@MultilenguajeController.ObtenerTextoPorClave("PLACEHOLDER_IDENTIFICADOR",dataLenguaje)" Name="txtIdentificador"></RadzenTextBox>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div style="margin-bottom: 1rem" class="row justify-content-center">
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_BUSCAR",dataLenguaje)" ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="@MultilenguajeController.ObtenerTextoPorClave("BOTON_LIMPIAR",dataLenguaje)" ButtonStyle="ButtonStyle.Secondary">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
        </ChildContent>
    </RadzenPanel>
}

<div>
    @if (dataContenedoresView != null)
    {
        <br />
        <br />
        if (gridContenedoresView != null)
        {
            if (dataContenedoresView.Count > 0)
            {
                <RadzenGridExportOptions ReportName="@MultilenguajeController.ObtenerTextoPorClave("NOMBRE_ARCHIVO_REPORTE_CONTENEDORES",dataLenguaje)" GridId="gridContenedoresView" Grid="@gridContenedoresView" TItem="ResultReporte" ExcelButtonCssStyle="background-color:green" NotExportableClass="exclude-from-radzen-export" ExcelTitle="@MultilenguajeController.ObtenerTextoPorClave("BOTON_EXPORTAR_EXCEL",dataLenguaje)" DateTimeFormat="dd/MM/yyyy" CsvExport="false"></RadzenGridExportOptions>
            }
        }
        <RadzenDataGrid @ref="@gridContenedoresView" id="gridContenedoresView" FilterText="@MultilenguajeController.ObtenerTextoPorClave("CABECERA_FILTRO",dataLenguaje)" IsEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_VACIO",dataLenguaje)" IsNotNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_NULO",dataLenguaje)" IsNullText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_ES_NULO",dataLenguaje)" LessThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A",dataLenguaje)" LessThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MENOR_A_O_IGUAL",dataLenguaje)" NotEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_EQUIVALE",dataLenguaje)" IsNotEmptyText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_VACIO",dataLenguaje)" OrOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_OR",dataLenguaje)" GreaterThanText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A",dataLenguaje)" GreaterThanOrEqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_MAYOR_A_O_IGUAL",dataLenguaje)" AndOperatorText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_OPERADOR_AND",dataLenguaje)" AllColumnsText="@MultilenguajeController.ObtenerTextoPorClave("MOSTRAR_TODAS_COLUMNAS",dataLenguaje)" ContainsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_CONTIENE",dataLenguaje)" DoesNotContainText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_NO_CONTIENE",dataLenguaje)" ClearFilterText="@MultilenguajeController.ObtenerTextoPorClave("LIMPIAR_FILTRO",dataLenguaje)" ApplyFilterText="@MultilenguajeController.ObtenerTextoPorClave("APLICAR_FILTRO",dataLenguaje)" EqualsText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_EXACTO",dataLenguaje)" EndsWithText="@MultilenguajeController.ObtenerTextoPorClave("FILTRO_TERMINA_CON",dataLenguaje)" PageSizeText="@MultilenguajeController.ObtenerTextoPorClave("REGISTROS_POR_PAGINA",dataLenguaje)" StartsWithText="@MultilenguajeController.ObtenerTextoPorClave("EMPIEZA_CON",dataLenguaje)" ColumnsShowingText="@MultilenguajeController.ObtenerTextoPorClave("COLUMNAS_OPCIONALES",dataLenguaje)"
                    @bind-Settings="@GridSettings"
                    AllowColumnReorder=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarMovilidad",dataCustomizacionPagina.AtributosTabla) AllowColumnPicking=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarColumnasOpcionales",dataCustomizacionPagina.AtributosTabla) AllowFiltering=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarFiltrado",dataCustomizacionPagina.AtributosTabla) AllowColumnResize=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarRedimensionamiento",dataCustomizacionPagina.AtributosTabla) AllowSorting=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarOrdenamiento",dataCustomizacionPagina.AtributosTabla) AllowPaging=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarPaginado",dataCustomizacionPagina.AtributosTabla) AllowGrouping=@CustomizadorController.ObtenerPropiedadGrilla("HabilitarAgrupamiento",dataCustomizacionPagina.AtributosTabla)
                    Render="@ReportRender" PageSize="@EstiloController.ObtenerPaginadoDefault(dataUsuario.EmpresaId)" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@dataContenedoresView" TItem="ResultReporte" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Empresa" Title="@MultilenguajeController.ObtenerTextoPorClave("EMPRESA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Empresa",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Empresa",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Empresa",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Empresa",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Empresa",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Empresa",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Empresa",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Empresa",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sucursal" Title="@MultilenguajeController.ObtenerTextoPorClave("SUCURSAL",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sucursal",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sucursal",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sucursal",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sucursal",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sucursal",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sector" Title="@MultilenguajeController.ObtenerTextoPorClave("SECTOR",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Sector",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Sector",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Sector",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Sector",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Sector",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Sector",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Sector",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Sector",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Depositario" Title="@MultilenguajeController.ObtenerTextoPorClave("DEPOSITARIO",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Depositario",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Depositario",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Depositario",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Depositario",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Depositario",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Depositario",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Depositario",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Depositario",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="ContenedorId" Title="@MultilenguajeController.ObtenerTextoPorClave("CONTENEDORID",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("ContenedorId",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("ContenedorId",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("ContenedorId",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("ContenedorId",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Identificador" Title="@MultilenguajeController.ObtenerTextoPorClave("IDENTIFICADOR",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("Identificador",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("Identificador",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("Identificador",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("Identificador",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("Identificador",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("Identificador",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("Identificador",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("Identificador",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("Identificador",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("Identificador",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaApertura" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHAAPERTURA",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaApertura",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaApertura",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaApertura",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaApertura",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaCierre" Title="@MultilenguajeController.ObtenerTextoPorClave("FECHACIERRE",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("FechaCierre",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("FechaCierre",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("FechaCierre",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("FechaCierre",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CantidadTransacciones" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDADTRANSACCIONES",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CantidadTransacciones",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CantidadBilletes" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDADBILLETES",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CantidadBilletes",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CantidadSobres" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDADSOBRES",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CantidadSobres",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CantidadSobres",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="CantidadTotalDineroMonedaDefault" Title="@MultilenguajeController.ObtenerTextoPorClave("CANTIDADTOTALDINEROMONEDADEFAULT",dataLenguaje)" Frozen="false"
                                  Filterable=@CustomizadorController.ObtenerPropiedadColumnaFiltrable("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Groupable=@CustomizadorController.ObtenerPropiedadColumnaAgrupable("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Resizable=@CustomizadorController.ObtenerPropiedadColumnaRedimensionable("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Reorderable=@CustomizadorController.ObtenerPropiedadColumnaMovible("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) MinWidth=@CustomizadorController.ObtenerPropiedadAnchoMinimoColumnaEnGrilla("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Width=@CustomizadorController.ObtenerPropiedadAnchoColumnaEnGrilla("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Pickable=@CustomizadorController.ObtenerPropiedadVisibilidadColumnaEnSelector("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) OrderIndex=@CustomizadorController.ObtenerPropiedadPosicionColumnaEnGrilla("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Sortable=@CustomizadorController.ObtenerPropiedadColumnaOrdenable("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas) Visible=@CustomizadorController.ObtenerPropiedadVisibilidadColumna("CantidadTotalDineroMonedaDefault",dataCustomizacionPagina.AtributosColumnas)>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
<hr>

<RadzenNotification />

@code {
    RadzenDataGrid<ResultReporte> gridContenedoresView;

    public class parametros
    {
        public DateTime? fechaAperturaDesde { get; set; }
        public DateTime? fechaAperturaHasta { get; set; }
        public DateTime? fechaCierreDesde { get; set; }
        public DateTime? fechaCierreHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public Int64? depositarioSeleccionado { get; set; }
        public string identificador { get; set; }
    }

    //Clase creada para sortear algunas cuestiones de la vista que traemos de SQL
    public class ResultReporte
    {
        public Int64 ContenedorId { get; set; }
        public string Identificador { get; set; }
        public DateTime FechaApertura { get; set; }
        public DateTime? FechaCierre { get; set; }
        public int CantidadTransacciones { get; set; }
        public string Sector { get; set; }
        public string Sucursal { get; set; }
        public string Empresa { get; set; }
        public string Depositario { get; set; }
        public Int64 CantidadBilletes { get; set; }
        public int CantidadSobres { get; set; }
        public Double CantidadTotalDineroMonedaDefault { get; set; }
    }

    private List<ResultReporte> dataContenedoresView;

    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private Depositary.Entities.Views.Reporte.Contenedores Contenedores_entity = new();
    private List<Depositary.Entities.Views.Reporte.Contenedores>? Contenedores_entities;

    /// <summary>
    /// Variables to store multilanguaje
    /// </summary>
    private List<Entities.TextoLenguaje> dataLenguaje;

    /// <summary>
    /// Variable to save grid state
    /// </summary>
    private DataGridSettings GridSettings;

    /// <summary>
    /// List which stores definitions to customize grid columns
    /// </summary>
    private CustomizadorEntities.CustomizacionPagina dataCustomizacionPagina = new();

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    //Datasource para dropdown
    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();
    private List<DispositivoEntities.Depositario> depositariosUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();
    private List<DispositivoEntities.Depositario> dataDepositariosCombo = new();

    private bool estaCargandoParametrosReporte = true;

    private parametros parametrosContenedoresView = new();


    protected override void OnInitialized()
    {
        //Verificamos si se tiene licencia full y no esta vencida para acceder a este menu:
        if (!LicenseController.IsValidLicenseAvailable() || LicenseController.GetLicenseRemainingDays() <= 0 || LicenseController.ReadAdditonalLicenseInformation("TYPE") != "FULL")
        {
            NavManager.NavigateTo("RequerimientoLicencia/ReporteContenedoresView", true);
        }

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);

        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        dataCustomizacionPagina = CustomizadorController.ObtenerCustomizacionPagina("Reporte", "Contenedores");
        await Task.Run(CargarCombosBusqueda);
        //Por defecto las fechas desde y hasta son dia de hoy.
        parametrosContenedoresView.fechaAperturaDesde = DateTime.Today;
        parametrosContenedoresView.fechaAperturaHasta = DateTime.Today;
        estaCargandoParametrosReporte = false;

        if (dataCustomizacionPagina.AtributosTabla.HabilitarAuditoria)
            AuditController.Log(AuditController.LogTypeEnum.Navigation, "Acceso a " + "ReporteContenedoresView", "", dataUsuario.Id);
    }

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = ReportController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        sucursalesUsuario = ReportController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = ReportController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        depositariosUsuario = ReportController.ObtenerListadoDepositariosPorPerfil(dataUsuario.Id);
        dataDepositariosCombo = depositariosUsuario; //En principio vemos todos los depositarios accesibles por perfil.
    }
    #endregion

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
        {
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        }
        else
        {
            dataSucursalesCombo = new();
            parametrosContenedoresView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosContenedoresView.sectorSeleccionado = null;

            dataDepositariosCombo = depositariosUsuario;
            parametrosContenedoresView.depositarioSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosContenedoresView.sectorSeleccionado = null;

            if (parametrosContenedoresView.empresaSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.EmpresaId == parametrosContenedoresView.empresaSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();

            parametrosContenedoresView.depositarioSeleccionado = null;
        }

    }

    void OnChangeSector(object value)
    {
        if (value != null)
        {
            dataDepositariosCombo = depositariosUsuario.Where(x => x.SectorId == (Int64)value).ToList();
        }
        else
        {
            if (parametrosContenedoresView.sucursalSeleccionada.HasValue)
                dataDepositariosCombo = depositariosUsuario.Where(x => x.SucursalId == parametrosContenedoresView.sucursalSeleccionada.Value).ToList();
            else
                dataDepositariosCombo = new();
        }

    }

    void resetParametros()
    {
        parametrosContenedoresView = new();
        dataSectoresCombo = new();
        dataSucursalesCombo = new();
        dataDepositariosCombo = depositariosUsuario;
    }

    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        dataContenedoresView = new();
        Depositary.Business.Views.Reporte.Contenedores entity = new();
        List<Depositary.Entities.Views.Reporte.Contenedores> contenedores = new();

        //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
        if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
        {
            dataContenedoresView = new();
        }
        else
        {
            //Construimos el where general segun las empresas/sucursales/sectores/depositarios que puede ver el usuario
            entity.Where.OpenParentheses();
            entity.Where.OpenParentheses();

            for (int i = 0; i < sectoresUsuario.Count; i++)
            {
                if (i > 0)
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                entity.Where.OpenParentheses();
                entity.Where.Add(Business.Views.Reporte.Contenedores.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                if (sucursal != null)
                {
                    entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Contenedores.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                    var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                    if (empresa != null)
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Contenedores.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                }
                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            //Construimos el where segun los parametros de los controles
            if (parametrosContenedoresView.empresaSeleccionada.HasValue || parametrosContenedoresView.sucursalSeleccionada.HasValue || parametrosContenedoresView.sectorSeleccionado.HasValue || parametrosContenedoresView.depositarioSeleccionado.HasValue)
            {
                entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                entity.Where.OpenParentheses();

                int cantidadFiltrosCustom = 0;

                if (parametrosContenedoresView.empresaSeleccionada.HasValue)
                {
                    entity.Where.Add(Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.empresaSeleccionada.Value);
                    cantidadFiltrosCustom++;
                }

                if (parametrosContenedoresView.sucursalSeleccionada.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.sucursalSeleccionada.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.sucursalSeleccionada.Value);
                }

                if (parametrosContenedoresView.sectorSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.sectorSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.sectorSeleccionado.Value);
                }

                if (parametrosContenedoresView.depositarioSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.depositarioSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.DepositarioId, Depositary.sqlEnum.OperandEnum.Equal, parametrosContenedoresView.depositarioSeleccionado.Value);
                }

                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            if (parametrosContenedoresView.fechaAperturaDesde.HasValue)
            {
                parametrosContenedoresView.fechaAperturaDesde = new DateTime(parametrosContenedoresView.fechaAperturaDesde.Value.Year, parametrosContenedoresView.fechaAperturaDesde.Value.Month, parametrosContenedoresView.fechaAperturaDesde.Value.Day, 0, 0, 0);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosContenedoresView.fechaAperturaDesde.Value);
            }

            if (parametrosContenedoresView.fechaAperturaHasta.HasValue)
            {
                parametrosContenedoresView.fechaAperturaHasta = new DateTime(parametrosContenedoresView.fechaAperturaHasta.Value.Year, parametrosContenedoresView.fechaAperturaHasta.Value.Month, parametrosContenedoresView.fechaAperturaHasta.Value.Day, 23, 59, 59);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.FechaApertura, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosContenedoresView.fechaAperturaHasta.Value);
            }

            if (parametrosContenedoresView.fechaCierreDesde.HasValue)
            {
                parametrosContenedoresView.fechaCierreDesde = new DateTime(parametrosContenedoresView.fechaCierreDesde.Value.Year, parametrosContenedoresView.fechaCierreDesde.Value.Month, parametrosContenedoresView.fechaCierreDesde.Value.Day, 0, 0, 0);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosContenedoresView.fechaCierreDesde.Value);
            }

            if (parametrosContenedoresView.fechaCierreHasta.HasValue)
            {
                parametrosContenedoresView.fechaCierreHasta = new DateTime(parametrosContenedoresView.fechaCierreHasta.Value.Year, parametrosContenedoresView.fechaCierreHasta.Value.Month, parametrosContenedoresView.fechaCierreHasta.Value.Day, 23, 59, 59);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.FechaCierre, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosContenedoresView.fechaCierreHasta.Value);
            }

            if (parametrosContenedoresView.identificador != string.Empty && parametrosContenedoresView.identificador != null)
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Contenedores.ColumnEnum.Identificador, Depositary.sqlEnum.OperandEnum.Like, "%" + parametrosContenedoresView.identificador + "%");

            contenedores = entity.Items();

            if (contenedores.Count > 0)
            {
                foreach (var contenedor in contenedores)
                {
                    ResultReporte resultReporte = new();
                    resultReporte.Sector = contenedor.Sector;
                    resultReporte.ContenedorId = contenedor.ContenedorId;
                    resultReporte.Empresa = contenedor.Empresa;
                    resultReporte.Sucursal = contenedor.Sucursal;
                    resultReporte.Depositario = contenedor.Depositario;
                    resultReporte.CantidadBilletes = contenedor.CantidadBilletes;
                    resultReporte.CantidadSobres = contenedor.CantidadSobres;
                    resultReporte.CantidadTotalDineroMonedaDefault = contenedor.CantidadTotalDineroMonedaDefault;
                    resultReporte.CantidadTransacciones = contenedor.CantidadTransacciones;
                    resultReporte.FechaApertura = contenedor.FechaApertura;
                    resultReporte.FechaCierre = contenedor.FechaCierre.Year == 1 ? null : contenedor.FechaCierre;
                    resultReporte.Identificador = contenedor.Identificador;

                    dataContenedoresView.Add(resultReporte);
                }
            }
        }
    }

    /// <summary>
    /// FuncionRender event
    /// </summary>
    /// <param name="args"></param>
    private void ReportRender(DataGridRenderEventArgs<ResultReporte> args)
    {
        if (args.FirstRender)
        {
            if (dataContenedoresView != null)
            {
                if (dataContenedoresView.Count > 0)
                {
                    StateHasChanged();
                }
            }
        }
    }

    #endregion
    }
