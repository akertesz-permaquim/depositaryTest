@page "/ReporteTransaccionesView"
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<RadzenBadge BadgeStyle="BadgeStyle.Secondary">
    <ChildContent>
        <div>
            <h4 style="color:white;">Informe de transacciones por fecha</h4>
        </div>
    </ChildContent>
</RadzenBadge>
<hr>

@if (estaCargandoParametrosReporte)
{
    <div class="spinner"></div>
}
else
{
    <RadzenPanel AllowCollapse="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoPanelParametrosReporte", false)>
        <HeaderTemplate>
            <h4 class="m-0 d-flex align-items-center">
                <RadzenIcon Icon="account_box" Class="mr-1" /><b>Parametros de busqueda</b>
            </h4>
        </HeaderTemplate>
        <ChildContent>
            <RadzenTemplateForm TItem="parametros" Data="@parametrosTransaccionesView" @bind-Value="parametrosTransaccionesView" Submit="LoadMainEntityData">
                <ChildContent>
                    <div style="margin-bottom: 1rem" class="row">
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Fecha desde:" Component="fechaDesdeDatePicker" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-3">
                            <RadzenDatePicker @bind-Value=@(parametrosTransaccionesView.fechaDesde) Max="@(parametrosTransaccionesView.fechaHasta)" Name="fechaDesdeDatePicker" AllowClear="true" DateFormat="d" Class="w-100" />
                            <RadzenCompareValidator Visible=@(parametrosTransaccionesView.fechaHasta.HasValue) Value=@(parametrosTransaccionesView.fechaHasta) Operator="CompareOperator.LessThanEqual" Component="fechaDesdeDatePicker" Text="La fecha desde debe ser menor a la fecha hasta" Style="position: inherit" />
                        </div>
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Fecha hasta:" Component="fechaHastaDatePicker" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-3">
                            <RadzenDatePicker @bind-Value=@(parametrosTransaccionesView.fechaHasta) Min="@(parametrosTransaccionesView.fechaDesde)" Name="fechaHastaDatePicker" AllowClear="true" DateFormat="d" Class="w-100" />
                            <RadzenCompareValidator Visible=@(parametrosTransaccionesView.fechaDesde.HasValue) Value=@(parametrosTransaccionesView.fechaDesde) Operator="CompareOperator.GreaterThanEqual" Component="fechaHastaDatePicker" Text="La fecha hasta debe ser mayor a la fecha desde" Style="position: inherit" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Empresas :" Component="dropDownEmpresas" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownEmpresas" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.empresaSeleccionada) Placeholder="Seleccione empresa" Data=@dataEmpresasCombo TextProperty="EmpresaNombre" ValueProperty="EmpresaId"
                                        Change=@(args => OnChangeEmpresa(args)) Class="w-100" />
                        </div>
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Sucursales :" Component="dropDownSucursales" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownSucursales" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.sucursalSeleccionada) Placeholder="Seleccione sucursal" Data=@dataSucursalesCombo TextProperty="SucursalNombre" ValueProperty="SucursalId"
                                        Change=@(args => OnChangeSucursal(args)) Class="w-100" />
                        </div>
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Sectores :" Component="dropDownSectores" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownSectores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.sectorSeleccionado) Placeholder="Seleccione sector" Data=@dataSectoresCombo TextProperty="SectorNombre" ValueProperty="SectorId"
                                        Class="w-100" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row">
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Contenedores :" Component="dropDownContenedores" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownContenedores" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.contenedoresSeleccionados) Multiple="true" Placeholder="Seleccione contenedores" Data=@dataContenedores TextProperty="NombreIdentificador" ValueProperty="ContenedorId"
                                        Class="w-100" />
                        </div>
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Turnos :" Component="dropDownTurnos" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownTurnos" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.turnosSeleccionados) Multiple="true" Placeholder="Seleccione turnos" Data=@dataTurnos TextProperty="Nombre" ValueProperty="TurnoEsquemaDetalleId"
                                        Class="w-100" />
                        </div>
                        <div style="font-weight:bold;align-self:center;" class="col col-md-auto">
                            <RadzenLabel Text="Usuarios :" Component="dropDownUsuarios" style="width: 100%">
                            </RadzenLabel>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenDropDown AllowClear="true" Name="dropDownUsuarios" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@(parametrosTransaccionesView.usuariosSeleccionados) Multiple="true" Placeholder="Seleccione usuarios" Data=@dataUsuarios TextProperty="NombreyApellido" ValueProperty="UsuarioId"
                                        Class="w-100" />
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem" class="row justify-content-center">
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="search" Text="Buscar" ButtonStyle="ButtonStyle.Primary">
                            </RadzenButton>
                        </div>
                        <div class="col col-md-auto">
                            <RadzenButton ButtonType="ButtonType.Reset" Click="resetParametros" Icon="cleaning_services" Text="Limpiar" ButtonStyle="ButtonStyle.Secondary">
                            </RadzenButton>
                        </div>
                    </div>
                </ChildContent>
            </RadzenTemplateForm>
        </ChildContent>
    </RadzenPanel>
}

<div>
    @if (dataTransaccionesView != null)
    {
        <RadzenDataGrid AllowColumnPicking="true" AllowFiltering="true" RowExpand="@expandirTransacion" RowRender="@transaccionRowRender" RowCollapse="@colapsarTransaccion" PageSizeOptions="@(new int[]{10,20,50,100})" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@dataTransaccionesView" TItem="ResultReporte" ColumnWidth="300px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No existen registros.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Empresa" Title="Empresa" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sucursal" Title="Sucursal" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Sector" Title="Sector" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Depositario" Title="Depositario" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TipoTransaccion" Title="Tipo" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaTransaccion" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Frozen="false" Sortable="true" Filterable="true" Width="12%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Usuario" Title="Usuario" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Turno" Title="Turno" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="8%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Contenedor" Title="Contenedor" Visible="true" Frozen="false" Sortable="true" Filterable="true" Width="10%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="FechaRetiroBolsa" Title="Fecha retiro" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Frozen="false" Sortable="true" Filterable="true" Width="12%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="Moneda" Title="Moneda" Frozen="false" Sortable="true" Filterable="true" Width="10%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalValidado" Title="TotalValidado" Frozen="false" Sortable="true" TextAlign="TextAlign.Right" Filterable="true" Width="9%">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ResultReporte" Property="TotalAValidar" Title="TotalAValidar" Frozen="false" Sortable="true" TextAlign="TextAlign.Right" Filterable="true" Width="9%">
                </RadzenDataGridColumn>
            </Columns>
            <Template>
                @switch (context.TipoTransaccionId)
                {
                    case (Int64)TransaccionEntities.TipoTransaccion.DepositoSobre:
                        <DetalleTransaccionesSobre_View TransaccionId="@(context.TransaccionId)"></DetalleTransaccionesSobre_View>
                        break;
                    default:
                        <DetalleTransacciones_View TransaccionId="@(context.TransaccionId)"></DetalleTransacciones_View>
                        break;
                }
            </Template>
        </RadzenDataGrid>
    }
</div>
<hr>

<RadzenNotification />

@code {

    public class parametros
    {
        public DateTime? fechaDesde { get; set; }
        public DateTime? fechaHasta { get; set; }
        public Int64? empresaSeleccionada { get; set; }
        public Int64? sucursalSeleccionada { get; set; }
        public Int64? sectorSeleccionado { get; set; }
        public IEnumerable<Int64> usuariosSeleccionados = new Int64[] { };
        public IEnumerable<Int64> contenedoresSeleccionados = new Int64[] { };
        public IEnumerable<Int64> turnosSeleccionados = new Int64[] { };

    }

    //Clase creada para sortear algunas cuestiones de la vista que traemos de SQL
    public class ResultReporte
    {
        public Int64 TransaccionId { get; set; }
        public string Usuario { get; set; }
        public DateTime FechaTransaccion { get; set; }
        public DateTime? FechaRetiroBolsa { get; set; }
        public string Moneda { get; set; }
        public double TotalValidado { get; set; }
        public double TotalAValidar { get; set; }
        public Int64 SectorId { get; set; }
        public string Sector { get; set; }
        public Int64 ContenedorId { get; set; }
        public string Contenedor { get; set; }
        public Int64 EsquemaDetalleTurnoId { get; set; }
        public string Turno { get; set; }
        public string Empresa { get; set; }
        public string Sucursal { get; set; }
        public Int64 TipoTransaccionId { get; set; }
        public string TipoTransaccion { get; set; }
        public Int64 DepositarioId { get; set; }
        public string Depositario { get; set; }
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private List<ResultReporte> dataTransaccionesView;

    private List<ResultReporte> rowsTransaccionesExpandidas = new();

    /// <summary>
    ///  Variable to store the user id
    /// </summary>
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new();

    //Datasource para dropdown
    private List<DirectorioEntities.Empresa> empresasUsuario = new();
    private List<DirectorioEntities.Sucursal> sucursalesUsuario = new();
    private List<DirectorioEntities.Sector> sectoresUsuario = new();

    private List<DirectorioEntities.Empresa> dataEmpresasCombo = new();
    private List<DirectorioEntities.Sucursal> dataSucursalesCombo = new();
    private List<DirectorioEntities.Sector> dataSectoresCombo = new();


    //private List<Entities.Turno> dataTurnos = new();
    private List<TransaccionEntities.Contenedor> dataContenedores = new();
    private List<SeguridadEntities.Usuario> dataUsuarios = new();
    private List<TurnoEntities.TurnoComboReporte> dataTurnos = new();

    private bool estaCargandoGrillaReporte = false;
    private bool estaCargandoParametrosReporte = true;

    private parametros parametrosTransaccionesView = new();

    protected override async Task OnInitializedAsync()
    {
        dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
        if (dataUsuario == null)
            NavManager.NavigateTo("login", true);
        dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
        await Task.Run(CargarCombosBusqueda);
        parametrosTransaccionesView.fechaDesde = DateTime.Today;
        estaCargandoParametrosReporte = false;
    }

    #region Form events
    void OnChangeEmpresa(object value)
    {
        if (value != null)
            dataSucursalesCombo = sucursalesUsuario.Where(x => x.EmpresaId == (Int64)value).ToList();
        else
        {
            dataSucursalesCombo = new();
            parametrosTransaccionesView.sucursalSeleccionada = null;

            dataSectoresCombo = new();
            parametrosTransaccionesView.sectorSeleccionado = null;
        }
    }

    void OnChangeSucursal(object value)
    {
        if (value != null)
        {
            dataSectoresCombo = sectoresUsuario.Where(x => x.SucursalId == (Int64)value).ToList();
        }
        else
        {
            dataSectoresCombo = new();
            parametrosTransaccionesView.sectorSeleccionado = null;
        }

    }

    void resetParametros()
    {
        parametrosTransaccionesView = new();
    }

    #endregion

    #region Visualizacion
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void CargarCombosBusqueda()
    {
        empresasUsuario = DirectorioController.ObtenerListadoEmpresasPorPerfil(dataUsuario.Id, true);
        sucursalesUsuario = DirectorioController.ObtenerListadoSucursalesPorPerfil(dataUsuario.Id, true);
        sectoresUsuario = DirectorioController.ObtenerListadoSectoresPorPerfil(dataUsuario.Id);
        dataEmpresasCombo = empresasUsuario; //El unico combo estatico es el de mayor jerarquia
        dataUsuarios = SeguridadController.ObtenerUsuarios(false);
        dataContenedores = OperacionController.ObtenerContenedores(false);
        dataTurnos = OperacionController.ObtenerTurnosReporte();
    }
    #endregion

    #region Grid events

    protected async Task expandirTransacion(ResultReporte args)
    {
        rowsTransaccionesExpandidas.Add(args);
    }

    protected async Task colapsarTransaccion(ResultReporte args)
    {
        rowsTransaccionesExpandidas.RemoveAll(x => x.TransaccionId == args.TransaccionId);
    }

    void transaccionRowRender(RowRenderEventArgs<ResultReporte> args)
    {
        if (rowsTransaccionesExpandidas.Where(x => x.TransaccionId == args.Data.TransaccionId).ToList().Count > 0)
        {
            args.Attributes.Add("class", "row-highlight");
        }
        else
        {
            args.Attributes.Add("class", "rz-datatable-even");
        }
    }

    #endregion

    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        estaCargandoGrillaReporte = true;
        dataTransaccionesView = new();
        Depositary.Business.Views.Reporte.Transacciones entity = new();
        List<Depositary.Entities.Views.Reporte.Transacciones> transacciones = new();

        //Si no tiene empresas ni sucursales ni sectores visibles por perfil entonces le traigo siempre datasource vacio.
        if (empresasUsuario.Count == 0 && sucursalesUsuario.Count == 0 && sectoresUsuario.Count == 0)
        {
            dataTransaccionesView = new();
        }
        else
        {
            //Construimos el where general segun las empresas/sucursales/sectores que puede ver el usuario
            entity.Where.OpenParentheses();
            entity.Where.OpenParentheses();

            for (int i = 0; i < sectoresUsuario.Count; i++)
            {
                if (i > 0)
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.OR);
                entity.Where.OpenParentheses();
                entity.Where.Add(Business.Views.Reporte.Transacciones.ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, sectoresUsuario[i].SectorId);
                var sucursal = sucursalesUsuario.Where(x => x.SucursalId == sectoresUsuario[i].SucursalId).FirstOrDefault();
                if (sucursal != null)
                {
                    entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Transacciones.ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, sucursal.SucursalId);
                    var empresa = empresasUsuario.Where(x => x.EmpresaId == sucursal.EmpresaId).FirstOrDefault();
                    if (empresa != null)
                        entity.Where.Add(sqlEnum.ConjunctionEnum.AND, Business.Views.Reporte.Transacciones.ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, empresa.EmpresaId);
                }
                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            //Construimos el where segun los parametros de los controles
            if (parametrosTransaccionesView.empresaSeleccionada.HasValue || parametrosTransaccionesView.sucursalSeleccionada.HasValue || parametrosTransaccionesView.sectorSeleccionado.HasValue)
            {
                entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                entity.Where.OpenParentheses();

                int cantidadFiltrosCustom = 0;

                if (parametrosTransaccionesView.empresaSeleccionada.HasValue)
                {
                    entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.EmpresaId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTransaccionesView.empresaSeleccionada.Value);
                    cantidadFiltrosCustom++;
                }

                if (parametrosTransaccionesView.sucursalSeleccionada.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTransaccionesView.sucursalSeleccionada.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.SucursalId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTransaccionesView.sucursalSeleccionada.Value);
                }

                if (parametrosTransaccionesView.sectorSeleccionado.HasValue)
                {
                    if (cantidadFiltrosCustom > 0)
                        entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTransaccionesView.sectorSeleccionado.Value);
                    else
                        entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.SectorId, Depositary.sqlEnum.OperandEnum.Equal, parametrosTransaccionesView.sectorSeleccionado.Value);
                }

                entity.Where.CloseParentheses();
            }

            entity.Where.CloseParentheses();

            if (parametrosTransaccionesView.fechaDesde.HasValue)
            {
                parametrosTransaccionesView.fechaDesde = new DateTime(parametrosTransaccionesView.fechaDesde.Value.Year, parametrosTransaccionesView.fechaDesde.Value.Month, parametrosTransaccionesView.fechaDesde.Value.Day, 0, 0, 0);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.GreaterThanOrEqual, parametrosTransaccionesView.fechaDesde.Value);
            }

            if (parametrosTransaccionesView.fechaHasta.HasValue)
            {
                parametrosTransaccionesView.fechaHasta = new DateTime(parametrosTransaccionesView.fechaHasta.Value.Year, parametrosTransaccionesView.fechaHasta.Value.Month, parametrosTransaccionesView.fechaHasta.Value.Day, 23, 59, 59);
                entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.AND, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.FechaTransaccion, Depositary.sqlEnum.OperandEnum.LessThanOrEqual, parametrosTransaccionesView.fechaHasta.Value);
            }

            if (parametrosTransaccionesView.usuariosSeleccionados == null)
                parametrosTransaccionesView.usuariosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosTransaccionesView.usuariosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int usuariosFiltrados = 0;

                    foreach (var usuarioId in parametrosTransaccionesView.usuariosSeleccionados)
                    {
                        if (usuariosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.UsuarioId, Depositary.sqlEnum.OperandEnum.Equal, usuarioId);

                        usuariosFiltrados++;
                    }
                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosTransaccionesView.contenedoresSeleccionados == null)
                parametrosTransaccionesView.contenedoresSeleccionados = new Int64[] { };
            else
            {
                if (parametrosTransaccionesView.contenedoresSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int contenedoresFiltrados = 0;

                    foreach (var contenedor in parametrosTransaccionesView.contenedoresSeleccionados)
                    {
                        if (contenedoresFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.ContenedorId, Depositary.sqlEnum.OperandEnum.Equal, contenedor);

                        contenedoresFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            if (parametrosTransaccionesView.turnosSeleccionados == null)
                parametrosTransaccionesView.turnosSeleccionados = new Int64[] { };
            else
            {
                if (parametrosTransaccionesView.turnosSeleccionados.Count() > 0)
                {
                    entity.Where.AddOperand(sqlEnum.ConjunctionEnum.AND);

                    entity.Where.OpenParentheses();

                    int turnosFiltrados = 0;

                    foreach (var turno in parametrosTransaccionesView.turnosSeleccionados)
                    {
                        if (turnosFiltrados > 0)
                            entity.Where.Add(Depositary.sqlEnum.ConjunctionEnum.OR, Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);
                        else
                            entity.Where.Add(Depositary.Business.Views.Reporte.Transacciones.ColumnEnum.EsquemaDetalleTurnoId, Depositary.sqlEnum.OperandEnum.Equal, turno);

                        turnosFiltrados++;
                    }

                    entity.Where.CloseParentheses();
                }
            }

            transacciones = entity.Items();

            if (transacciones.Count > 0)
            {
                foreach (var transaccion in transacciones)
                {
                    ResultReporte resultReporte = new();
                    resultReporte.TransaccionId = transaccion.TransaccionId;
                    resultReporte.FechaTransaccion = transaccion.FechaTransaccion;
                    resultReporte.Moneda = transaccion.Moneda;
                    resultReporte.SectorId = transaccion.SectorId;
                    resultReporte.Sector = transaccion.Sector;
                    resultReporte.TotalAValidar = transaccion.TotalAValidar;
                    resultReporte.TotalValidado = transaccion.TotalValidado;
                    resultReporte.Usuario = transaccion.Usuario;
                    resultReporte.FechaRetiroBolsa = transaccion.FechaRetiroBolsa.Year == 1 ? null : transaccion.FechaRetiroBolsa;
                    resultReporte.Contenedor = transaccion.Contenedor;
                    resultReporte.ContenedorId = transaccion.ContenedorId;
                    resultReporte.Turno = transaccion.Turno;
                    resultReporte.EsquemaDetalleTurnoId = transaccion.EsquemaDetalleTurnoId;
                    resultReporte.Empresa = transaccion.Empresa;
                    resultReporte.Sucursal = transaccion.Sucursal;
                    resultReporte.TipoTransaccionId = transaccion.TransaccionTipoId;
                    resultReporte.TipoTransaccion = transaccion.TransaccionTipo;
                    resultReporte.DepositarioId = transaccion.DepositarioId;
                    resultReporte.Depositario = transaccion.Depositario;

                    dataTransaccionesView.Add(resultReporte);
                }
            }
        }
    }

    #endregion
    }
