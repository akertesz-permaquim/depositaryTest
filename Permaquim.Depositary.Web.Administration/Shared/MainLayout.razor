@inherits Permaquim.Depositary.Web.Administration.Layouts.MainLayoutComponent

@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Identity;
@using Permaquim.Depositary.Web.Administration.Components
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject Microsoft.Extensions.Localization.IStringLocalizer<MainLayout> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenHeader Style="z-index:3;">
    <ChildContent>
        <div class="row justify-content-start align-items-center">
            <div class="col-6 d-flex align-items-center">
                <RadzenSidebarToggle Click="@SidebarToggle0Click">
                </RadzenSidebarToggle>
                <RadzenLabel Text="Administrador Depositario">
                </RadzenLabel>
            </div>
            <div class="col-6 text-right">
                <RadzenProfileMenu Visible="true" Click="@Profilemenu0Click">
                    <ChildContent>
                        @*                        <RadzenProfileMenuItem Path="profile" Icon="settings" Text="Profile" Visible="true">
                        </RadzenProfileMenuItem>
                        <RadzenProfileMenuItem Path="application-users" Icon="person" Text="Users" Visible="true">
                        </RadzenProfileMenuItem>*@
                        <RadzenProfileMenuItem Path="userRolViewer" Icon="security" Text="Roles" Visible="true">
                        </RadzenProfileMenuItem>
                        <RadzenProfileMenuItem Text="Logout" Path="logout" Value="Logout" Icon="power_settings_new">
                        </RadzenProfileMenuItem>
                    </ChildContent>
                    <Template>
                        <RadzenLabel Text="@nombreUsuario">
                        </RadzenLabel>
                        <RadzenLabel Text="@apellidoUsuario">
                        </RadzenLabel>
                        <RadzenImage Path="@avatarUsuario" style="border-radius: 16px; height: 32px; width: 32px">
                        </RadzenImage>
                    </Template>
                </RadzenProfileMenu>
            </div>
        </div>
    </ChildContent>
</RadzenHeader>
<RadzenBody @ref="body0">
    <ChildContent>
        <RadzenContentContainer Name="main">
            @Body
        </RadzenContentContainer>
    </ChildContent>
</RadzenBody>
<RadzenSidebar @ref="sidebar0">
    <ChildContent>
        <RadzenPanelMenu style="height: 100%">
            <ChildContent>
                @if (dataMenues.Count > 0)
                {
                    //Menues principales
                    foreach (var menu in dataMenues.Where(x => x.DependeDe == null))
                    {
                        switch (menu.TipoMenuId)
                        {
                            case (Int64)Entities.TipoMenu.Carpeta:
                                <RadzenPanelMenuItem Text="@(menu.MenuDescripcion)" Icon="@(menu.Imagen)">
                                    <ChildContent>
                                        @foreach (var menuDependiente in dataMenues.Where(x => x.DependeDe == menu.MenuId))
                                        {
                                            switch (menu.TipoMenuId)
                                            {
                                                case (Int64)Entities.TipoMenu.Carpeta:
                                                    <RadzenPanelMenuItem Text="@(menuDependiente.MenuDescripcion)" Icon="@(menuDependiente.Imagen)" class="sub-menu">
                                                        @foreach (var subMenuDependiente in dataMenues.Where(x => x.DependeDe == menuDependiente.MenuId))
                                                        {
                                                            <RadzenPanelMenuItem Text="@(subMenuDependiente.MenuDescripcion)" Icon="@(subMenuDependiente.Imagen)" Path="@(subMenuDependiente.Referencia)" class="sub-menu2">

                                                            </RadzenPanelMenuItem>
                                                        }
                                                    </RadzenPanelMenuItem>
                                                    break;
                                                case (Int64)Entities.TipoMenu.Pagina:
                                                    <RadzenPanelMenuItem Text="@(menuDependiente.MenuDescripcion)" Icon="@(menuDependiente.Imagen)" Path="@(menuDependiente.Referencia)" class="sub-menu">

                                                    </RadzenPanelMenuItem>
                                                    break;
                                            }
                                        }
                                    </ChildContent>
                                </RadzenPanelMenuItem>
                                break;
                            case (Int64)Entities.TipoMenu.Pagina:
                                <RadzenPanelMenuItem Text="@(menu.MenuDescripcion)" Icon="@(menu.Imagen)" Path="@(menu.Referencia)">

                                </RadzenPanelMenuItem>
                                break;
                        }

                    }
                }
            </ChildContent>
        </RadzenPanelMenu>
    </ChildContent>
</RadzenSidebar>
<RadzenFooter Style="@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle,"FooterAdministradorWebDepositario")">
    <ChildContent>
        <RadzenLabel Text="Permaquim S.A., Copyright Ⓒ 2022">
        </RadzenLabel>
    </ChildContent>
</RadzenFooter>

@code
{
    private string nombreUsuario;
    private string apellidoUsuario;
    private string avatarUsuario;
    private List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle>();
    private List<Entities.Menu> dataMenues = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Int64? userId = await sessionStorage.GetItemAsync<Int64?>("Id");
            if (userId == null)
            {
                NavManager.NavigateTo("login", true);
            }
            else
            {
                dataMenues = await sessionStorage.GetItemAsync<List<Entities.Menu>>("DataMenues");
                dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<DepositarioAdminWeb.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
                nombreUsuario = await sessionStorage.GetItemAsync<string>("NombreUsuario");
                apellidoUsuario = await sessionStorage.GetItemAsync<string>("ApellidoUsuario");
                avatarUsuario = await sessionStorage.GetItemAsync<string>("AvatarUsuario");
                StateHasChanged();
            }
        }
    }
}