@inherits LayoutComponentBase

@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Identity;
@using Permaquim.Depositary.Web.Administration.Components
@using Permaquim.Depositary.Web.Administration.Controllers;

@inject Microsoft.Extensions.Localization.IStringLocalizer<MainLayout> L
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

@if (dataUsuario != null)
{
    <RadzenHeader class="mainHeader">
        <ChildContent>
            <div class="row justify-content-start align-items-center">
                <div class="col-6 d-flex align-items-center">
                    <RadzenSidebarToggle class="textoMainLayout" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ButtonSideBarAdministradorWebDepositario", false) Click="@SidebarToggleClick">
                    </RadzenSidebarToggle>
                    <RadzenLabel class="textoMainLayout" Text="@MultilenguajeController.ObtenerTextoPorClave("TEXTO_HEADER_MAIN_LAYOUT",dataLenguaje)">
                    </RadzenLabel>
                </div>
                <div class="col-6 text-right">
                    <RadzenProfileMenu class="textoMainLayout" Visible="true" Style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoHeaderMenuPerfil", false) Click="@ProfileMenuClick">
                        <ChildContent>
                            <div style=@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoHeaderMenuPerfilDesplegable", false)>
                                <RadzenProfileMenuItem Text="Perfil" Path="perfil" Value="Perfil" Icon="person">
                                </RadzenProfileMenuItem>
                                <RadzenProfileMenuItem Text="Cambiar password" Path="cambioPassword" Value="ActualizarPassword" Icon="password">
                                </RadzenProfileMenuItem>
                                <RadzenProfileMenuItem Text="Logout" Path="logout" Value="Logout" Icon="power_settings_new">
                                </RadzenProfileMenuItem>
                            </div>
                        </ChildContent>
                        <Template>
                            <RadzenLabel class="textoMainLayout" Text="@dataUsuario.Nombre">
                            </RadzenLabel>
                            <RadzenLabel class="textoMainLayout" Text="@dataUsuario.Apellido">
                            </RadzenLabel>
                            <RadzenImage Path="@dataUsuario.Avatar" style="border-radius: 16px; height: 32px; width: 32px">
                            </RadzenImage>
                        </Template>
                    </RadzenProfileMenu>
                </div>
            </div>
        </ChildContent>
    </RadzenHeader>
    <RadzenBody @ref="body0">
        <ChildContent>
            <RadzenContentContainer Name="main">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
    <RadzenSidebar @ref="sidebar0">
        <ChildContent>
            <RadzenPanelMenu style="height: 100%">
                <ChildContent>
                    @if (dataMenues.Count > 0)
                    {
                        //Menues principales
                        foreach (var menu in dataMenues.Where(x => x.DependeDe == null))
                        {
                            //Si no se tiene licencia full verificamos si se trata de un menu que requiere de la misma.
                            if (tipoLicencia != "FULL")
                            {
                                if (listaMenuesLicenciaFull.Exists(x => x == menu.Referencia))
                                {
                                    //Si requiere licencia full y no se la tiene lo marcamos como no accesible
                                    menu.Accesible = false;
                                }
                                else
                                {
                                    menu.Accesible = true;
                                }
                            }
                            else
                            {
                                menu.Accesible = true;
                            }

                            switch (menu.TipoMenuId)
                            {
                                case (Int64)SeguridadEntities.TipoMenu.Carpeta:
                                    <RadzenPanelMenuItem Text="@(menu.MenuDescripcion)" Icon=@(menu.Accesible ? menu.Imagen : iconoMenuNoAccesible)>
                                        <ChildContent>
                                            @foreach (var menuDependiente in dataMenues.Where(x => x.DependeDe == menu.MenuId).OrderBy(x => x.MenuDescripcion))
                                            {
                                                switch (menuDependiente.TipoMenuId)
                                                {
                                                    case (Int64)SeguridadEntities.TipoMenu.Carpeta:
                                                        <RadzenPanelMenuItem Text="@(menuDependiente.MenuDescripcion)" Icon="@(menuDependiente.Imagen)" class="sub-menu">
                                                            @foreach (var subMenuDependiente in dataMenues.Where(x => x.DependeDe == menuDependiente.MenuId).OrderBy(x => x.MenuDescripcion))
                                                            {
                                                                <RadzenPanelMenuItem Text="@(subMenuDependiente.MenuDescripcion)" Icon="@(subMenuDependiente.Imagen)" Path="@(subMenuDependiente.Referencia)" class="sub-menu2">
                                                                </RadzenPanelMenuItem>
                                                            }
                                                        </RadzenPanelMenuItem>
                                                        break;
                                                    case (Int64)SeguridadEntities.TipoMenu.Pagina:
                                                        <RadzenPanelMenuItem Text="@(menuDependiente.MenuDescripcion)" Icon=@(menu.Accesible ? menuDependiente.Imagen : iconoMenuNoAccesible) Path="@(menu.Accesible ? menuDependiente.Referencia : "RequerimientoLicencia/" + menuDependiente.Referencia)" class="sub-menu">
                                                        </RadzenPanelMenuItem>
                                                        break;
                                                }
                                            }
                                        </ChildContent>
                                    </RadzenPanelMenuItem>
                                    break;
                                case (Int64)SeguridadEntities.TipoMenu.Pagina:
                                    <RadzenPanelMenuItem Text="@(menu.MenuDescripcion)" Icon=@(menu.Accesible ? menu.Imagen : iconoMenuNoAccesible) Path="@(menu.Accesible ? menu.Referencia : "RequerimientoLicencia/" + menu.Referencia)">

                                    </RadzenPanelMenuItem>
                                    break;
                            }
                        }
                    }
                </ChildContent>
            </RadzenPanelMenu>
        </ChildContent>
    </RadzenSidebar>
    <RadzenFooter Style="@EstiloController.ObtenerItemEstilo(dataEsquemaDetalle,"FooterAdministradorWebDepositario",false)">
        <ChildContent>
            <RadzenLabel class="textoMainLayout" Text="@MultilenguajeController.ObtenerTextoPorClave("TEXTO_FOOTER_MAIN_LAYOUT",dataLenguaje)">
            </RadzenLabel>
        </ChildContent>
    </RadzenFooter>

}

@code
{
    private RadzenBody body0;
    protected RadzenSidebar sidebar0;
    private List<Depositary.Entities.Tables.Estilo.EsquemaDetalle> dataEsquemaDetalle = new List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>();
    private List<SeguridadEntities.Menu> dataMenues = new();
    private List<Entities.TextoLenguaje> dataLenguaje;
    private Depositary.Entities.Tables.Seguridad.Usuario? dataUsuario = null;
    private string colorHeader;
    private string colorFondoMenuActivo;
    private string colorBordeMenuActivo;
    private string colorPrincipalMenu;
    private string colorLetrasMenu;
    private string colorTextoMainLayout;
    private string colorFondoMenuesPrimeraLinea;
    private string colorFondoMenuesSegundaLinea;
    private string colorFondoMenuesTerceraLinea;
    private string colorPrimarioSpinner;
    private string colorSecundarioSpinner;
    private string iconoMenuNoAccesible = "lock";
    private bool tieneLicencia = false;
    private string tipoLicencia = "";
    private List<string> listaMenuesLicenciaFull = new();

    protected async System.Threading.Tasks.Task SidebarToggleClick(dynamic args)
    {
        await InvokeAsync(() => { sidebar0.Toggle(); });

        await InvokeAsync(() => { body0.Toggle(); });
    }

    protected async System.Threading.Tasks.Task ProfileMenuClick(dynamic args)
    {
        //if (args.Value == "Logout")
        //{
        //    await Security.Logout();
        //}
    }

    protected override void OnInitialized()
    {
        listaMenuesLicenciaFull.Add("Dashboard");
        listaMenuesLicenciaFull.Add("Monitor");
        listaMenuesLicenciaFull.Add("Reportes");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Verificamos si se tiene licencia y si no esta vencida.
            if (LicenseController.IsValidLicenseAvailable())
                tieneLicencia = true;
            else
                tieneLicencia = false;

            if (tieneLicencia)
            {
                //Verificamos el tipo de licencia
                tipoLicencia = LicenseController.ReadAdditonalLicenseInformation("TYPE");
            }

            dataUsuario = await sessionStorage.GetItemAsync<Depositary.Entities.Tables.Seguridad.Usuario?>("DataUsuario");
            dataLenguaje = await sessionStorage.GetItemAsync<List<Entities.TextoLenguaje>>("DataLenguaje");
            if (dataUsuario == null)
            {
                NavManager.NavigateTo("login", true);
            }
            else
            {
                dataMenues = await sessionStorage.GetItemAsync<List<SeguridadEntities.Menu>>("DataMenues");
                dataEsquemaDetalle = await sessionStorage.GetItemAsync<List<Depositary.Entities.Tables.Estilo.EsquemaDetalle>>("DataEsquemaDetalle");
                colorHeader = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "HeaderAdministradorWebDepositario", true);
                colorFondoMenuActivo = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoMenuActivo", true);
                colorBordeMenuActivo = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorBordeMenuActivo", true);
                colorPrincipalMenu = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorPrincipalMenu", true);
                colorLetrasMenu = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorLetrasMenu", true);
                colorTextoMainLayout = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorTextoMainLayout", true);
                colorFondoMenuesPrimeraLinea = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoMenuesPrimeraLinea", true);
                colorFondoMenuesSegundaLinea = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoMenuesSegundaLinea", true);
                colorFondoMenuesTerceraLinea = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorFondoMenuesTerceraLinea", true);
                colorPrimarioSpinner = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorPrimarioSpinner", true);
                colorSecundarioSpinner = EstiloController.ObtenerItemEstilo(dataEsquemaDetalle, "ColorSecundarioSpinner", true);
                StateHasChanged();
            }
        }
    }

}

<style>
    .spinner {
        border: 16px solid @(colorSecundarioSpinner == "" ? "silver" : colorSecundarioSpinner);
        border-top: 16px solid @(colorPrimarioSpinner == "" ? "blue" : colorPrimarioSpinner);
        border-radius: 50%;
        width: 80px;
        height: 80px;
        animation: spin 700ms linear infinite;
        top: 40%;
        left: 55%;
        position: absolute;
        z-index: 3;
    }

    .spinnerCentrado {
        border: 16px solid @(colorSecundarioSpinner == "" ? "silver" : colorSecundarioSpinner);
        border-top: 16px solid @(colorPrimarioSpinner == "" ? "blue" : colorPrimarioSpinner);
        border-radius: 50%;
        width: 80px;
        height: 80px;
        animation: spin 700ms linear infinite;
        top: 45%;
        left: 40%;
        position: absolute;
        z-index: 3;
    }

    .spinnerCentradoRelativo {
        border: 16px solid @(colorSecundarioSpinner == "" ? "silver" : colorSecundarioSpinner);
        border-top: 16px solid @(colorPrimarioSpinner == "" ? "blue" : colorPrimarioSpinner);
        border-radius: 50%;
        width: 80px;
        height: 80px;
        animation: spin 700ms linear infinite;
        top: 50%;
        left: 50%;
        position: relative;
        z-index: 3;
    }

    .spinnerCentradoLateralRelativo {
        border: 16px solid @(colorSecundarioSpinner == "" ? "silver" : colorSecundarioSpinner);
        border-top: 16px solid @(colorPrimarioSpinner == "" ? "blue" : colorPrimarioSpinner);
        border-radius: 50%;
        width: 80px;
        height: 80px;
        animation: spin 700ms linear infinite;
        left: 50%;
        position: relative;
        z-index: 3;
    }

    .mainHeader {
        background-color: @colorHeader;
        z-index: 3;
    }

    .textoMainLayout {
        color: @colorTextoMainLayout;
    }

    .rz-panel-menu {
        height: 100%;
    }

    .rz-panel-menu {
        background-color: @colorPrincipalMenu;
        color: @colorLetrasMenu;
    }

        .rz-panel-menu .rz-navigation-item-wrapper {
            background-color: @colorFondoMenuesPrimeraLinea;
        }

        .rz-panel-menu .rz-navigation-menu .rz-navigation-item-wrapper {
            background-color: @colorFondoMenuesSegundaLinea;
        }

        .rz-panel-menu .rz-navigation-menu .rz-navigation-menu .rz-navigation-item-wrapper {
            background-color: @colorFondoMenuesTerceraLinea;
        }

        .rz-panel-menu .rz-navigation-item-wrapper-active:before {
            background-color: @colorBordeMenuActivo;
        }

        .rz-panel-menu .rz-navigation-item-active, .rz-panel-menu .rz-navigation-item-wrapper-active {
            background-color: @colorFondoMenuActivo;
        }

        .rz-panel-menu .rz-navigation-menu .rz-navigation-menu .rz-navigation-item-active, .rz-panel-menu .rz-navigation-menu .rz-navigation-menu .rz-navigation-item-wrapper-active {
            background-color: @colorFondoMenuActivo;
        }

        .rz-panel-menu .rz-navigation-menu .rz-navigation-item-active, .rz-panel-menu .rz-navigation-menu .rz-navigation-item-wrapper-active {
            background-color: @colorFondoMenuActivo;
        }

    .ul.rz-profile-menu .rz-navigation-menu .rz-navigation-item-wrapper:hover .rz-navigation-item-text {
        color: @colorTextoMainLayout;
    }

    ul.rz-profile-menu .rz-navigation-menu .rz-navigation-item-link, ul.rz-profile-menu .rz-navigation-menu .rz-navigation-item-text {
        color: @colorTextoMainLayout;
    }

    .rzi .rz-navigation-item-icon-children {
        color: @colorTextoMainLayout;
    }

    ul.rz-profile-menu .rz-navigation-item-icon-children {
        color: @colorTextoMainLayout;
    }

</style>