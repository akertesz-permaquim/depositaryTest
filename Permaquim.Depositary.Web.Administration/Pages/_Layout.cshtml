@using Microsoft.AspNetCore.Components.Web
@namespace Permaquim.Depositary.Web.Administration.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="assets/css/styles.css" rel="stylesheet" />
    <link href="Permaquim.Depositary.Web.Administration.styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="css/site.css" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
    <link rel="stylesheet" href="css/customRadzen.css" />
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="~/_content/radzen.blazor.gridexportoptions/radzen-grid-export-options.js"></script>
    <script src="~/_content/radzen.blazor.gridexportoptions/xlsx.full.min.js"></script>
    <script src="~/_content/radzen.blazor.gridexportoptions/luxon.min.js"></script>

    <script>
        // Wait until a reload button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector(&#039;#components-reconnect-modal h5 a&#039;)) {
                // Now every 10 seconds, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(&#039;&#039;); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 2000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <script autostart="false" src="_framework/blazor.server.js"></script>
    <script>
        async function connectionDown(options) {
            console.log("Connection Down - you could do some UI here...");
            for (let i = 0; i < options.maxRetries; i++) {
                console.log("Waiting for reconnect attempt #" + (i + 1) + " ...");
                await this.delay(options.retryIntervalMilliseconds);
                if (this.isDisposed) {
                    break;
                }

                try {
                    // reconnectCallback will asynchronously return:
                    // - true to mean success
                    // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)
                    // - exception to mean we didn't reach the server (this can be sync or async)
                    console.log("Starting Reconnect attempt #" + (i + 1) + " ...");
                    const result = await window.Blazor.reconnect();
                    if (!result) {
                        // If the server responded and refused to reconnect, log it
                        console.error("Server Rejected");
                    } else {
                        // Reconnected!
                        return;
                    }
                } catch (err) {
                    // We got an exception so will try again
                    console.error(err);
                }
            }
            // all attempts failed - let's try a full reload
            // This could be a UI change instead or something more complicated
            location.reload();
        }

        function delay(durationMilliseconds) {
            return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
        }

        function connectionUp(e) {
            // Reconnected
            console.log("Connection UP!");
            // if you have a UI to hide/change you can do that here.
        }

        window.Blazor.start({
            reconnectionOptions: {
                maxRetries: 30,
                retryIntervalMilliseconds: 500,
            },
            reconnectionHandler: {
                onConnectionDown: e => connectionDown(e),
                onConnectionUp: e => connectionUp(e)
            }
        });
    </script>
</body>
</html>
