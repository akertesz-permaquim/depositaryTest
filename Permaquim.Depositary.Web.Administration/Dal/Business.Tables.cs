using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
	namespace Permaquim.Depositary.Business.Tables.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Configuracion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					Clave,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Aplicacion.Configuracion> _entities = new List<Entities.Tables.Aplicacion.Configuracion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Configuracion() : base()
            {
                base._dataItem = new Entities.Tables.Aplicacion.Configuracion();
            }
            public Configuracion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Aplicacion.Configuracion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Aplicacion.Configuracion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Configuracion Add Method
         /// </summary>
         /// <param name='AplicacionId'></param>
         /// <param name='Clave'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Aplicacion.Configuracion</returns>
			public Entities.Tables.Aplicacion.Configuracion Add(Int64 AplicacionId,String Clave,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Aplicacion.Configuracion)base.Add(new Entities.Tables.Aplicacion.Configuracion(AplicacionId,Clave,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Aplicacion.Configuracion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Aplicacion.Configuracion>().ToList<Entities.Tables.Aplicacion.Configuracion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Aplicacion.Configuracion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Aplicacion.Configuracion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Aplicacion.Configuracion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Aplicacion.Configuracion> Items(Int64? Id,Int64? AplicacionId,String Clave,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Clave, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Aplicacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Aplicacion.Configuracion Add(Entities.Tables.Aplicacion.Configuracion item)
            {
                return (Entities.Tables.Aplicacion.Configuracion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Aplicacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Aplicacion.Configuracion AddOrUpdate(Entities.Tables.Aplicacion.Configuracion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Aplicacion.Configuracion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Aplicacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Aplicacion.Configuracion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Aplicacion.Configuracion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 aplicacionid,String clave,String valor,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Aplicacion.Configuracion {Id = id,AplicacionId = aplicacionid,Clave = clave,Valor = valor,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Aplicacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Aplicacion.Configuracion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Aplicacion.Configuracion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Aplicacion.Configuracion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Aplicacion.Configuracion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Configuracion
	} //namespace Permaquim.Depositary.Business.Tables.Aplicacion
	namespace Permaquim.Depositary.Business.Tables.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionEmpresa : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EmpresaId,
					Clave,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Aplicacion.ConfiguracionEmpresa> _entities = new List<Entities.Tables.Aplicacion.ConfiguracionEmpresa>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public ConfiguracionEmpresa() : base()
            {
                base._dataItem = new Entities.Tables.Aplicacion.ConfiguracionEmpresa();
            }
            public ConfiguracionEmpresa(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Aplicacion.ConfiguracionEmpresa();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Aplicacion.ConfiguracionEmpresa item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionEmpresa Add Method
         /// </summary>
         /// <param name='EmpresaId'></param>
         /// <param name='Clave'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Aplicacion.ConfiguracionEmpresa</returns>
			public Entities.Tables.Aplicacion.ConfiguracionEmpresa Add(Int64 EmpresaId,String Clave,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Aplicacion.ConfiguracionEmpresa)base.Add(new Entities.Tables.Aplicacion.ConfiguracionEmpresa(EmpresaId,Clave,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Aplicacion.ConfiguracionEmpresa> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Aplicacion.ConfiguracionEmpresa>().ToList<Entities.Tables.Aplicacion.ConfiguracionEmpresa>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Aplicacion.ConfiguracionEmpresa items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Aplicacion.ConfiguracionEmpresa> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Aplicacion.ConfiguracionEmpresa items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Aplicacion.ConfiguracionEmpresa> Items(Int64? Id,Int64? EmpresaId,String Clave,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EmpresaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Clave, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Aplicacion.ConfiguracionEmpresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Aplicacion.ConfiguracionEmpresa Add(Entities.Tables.Aplicacion.ConfiguracionEmpresa item)
            {
                return (Entities.Tables.Aplicacion.ConfiguracionEmpresa)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Aplicacion.ConfiguracionEmpresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Aplicacion.ConfiguracionEmpresa AddOrUpdate(Entities.Tables.Aplicacion.ConfiguracionEmpresa item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Aplicacion.ConfiguracionEmpresa)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Aplicacion.ConfiguracionEmpresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Aplicacion.ConfiguracionEmpresa item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Aplicacion.ConfiguracionEmpresa with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 empresaid,String clave,String valor,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Aplicacion.ConfiguracionEmpresa {Id = id,EmpresaId = empresaid,Clave = clave,Valor = valor,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Aplicacion.ConfiguracionEmpresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Aplicacion.ConfiguracionEmpresa item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Aplicacion.ConfiguracionEmpresa with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Aplicacion.ConfiguracionEmpresa {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Aplicacion.ConfiguracionEmpresa> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionEmpresa
	} //namespace Permaquim.Depositary.Business.Tables.Aplicacion
	namespace Permaquim.Depositary.Business.Tables.Auditoria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Log : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					AplicacionId,
					Fecha,
					Descripcion,
					Detalle,
					Modulo,
					Metodo,
					UsuarioId
				}
         protected List<Entities.Tables.Auditoria.Log> _entities = new List<Entities.Tables.Auditoria.Log>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Log() : base()
            {
                base._dataItem = new Entities.Tables.Auditoria.Log();
            }
            public Log(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Auditoria.Log();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Auditoria.Log item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Log Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='AplicacionId'></param>
         /// <param name='Fecha'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Detalle'></param>
         /// <param name='Modulo'></param>
         /// <param name='Metodo'></param>
         /// <param name='UsuarioId'></param>
         /// <returns>Entities.Tables.Auditoria.Log</returns>
			public Entities.Tables.Auditoria.Log Add(Int64 TipoId,Int64 AplicacionId,DateTime Fecha,String Descripcion,String Detalle,String Modulo,String Metodo,Int64 UsuarioId) 
			{
			  return (Entities.Tables.Auditoria.Log)base.Add(new Entities.Tables.Auditoria.Log(TipoId,AplicacionId,Fecha,Descripcion,Detalle,Modulo,Metodo,UsuarioId));
			}
            public new List<Entities.Tables.Auditoria.Log> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Auditoria.Log>().ToList<Entities.Tables.Auditoria.Log>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Auditoria.Log items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Auditoria.Log> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Auditoria.Log items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Fecha"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Detalle"></param>
            /// <param name="Modulo"></param>
            /// <param name="Metodo"></param>
            /// <param name="UsuarioId"></param>
            /// <returns></returns>
            public List<Entities.Tables.Auditoria.Log> Items(Int64? Id,Int64? TipoId,Int64? AplicacionId,DateTime? Fecha,String Descripcion,String Detalle,String Modulo,String Metodo,Int64? UsuarioId)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Detalle != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Detalle, sqlEnum.OperandEnum.Equal, Detalle);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Detalle, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Detalle);
                    }
                   
                }
                if (Modulo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Modulo, sqlEnum.OperandEnum.Equal, Modulo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Modulo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Modulo);
                    }
                   
                }
                if (Metodo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Metodo, sqlEnum.OperandEnum.Equal, Metodo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Metodo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Metodo);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Auditoria.Log
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Auditoria.Log Add(Entities.Tables.Auditoria.Log item)
            {
                return (Entities.Tables.Auditoria.Log)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Auditoria.Log
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Auditoria.Log AddOrUpdate(Entities.Tables.Auditoria.Log item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Auditoria.Log)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Auditoria.Log
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Auditoria.Log item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Auditoria.Log with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Fecha"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Detalle"></param>
            /// <param name="Modulo"></param>
            /// <param name="Metodo"></param>
            /// <param name="UsuarioId"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64 aplicacionid,DateTime fecha,String descripcion,String detalle,String modulo,String metodo,Int64 usuarioid)
            {
                return base.Update((IDataItem) new Entities.Tables.Auditoria.Log {Id = id,TipoId = tipoid,AplicacionId = aplicacionid,Fecha = fecha,Descripcion = descripcion,Detalle = detalle,Modulo = modulo,Metodo = metodo,UsuarioId = usuarioid});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Auditoria.Log
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Auditoria.Log item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Auditoria.Log with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Auditoria.Log {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Auditoria.Log> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Log
	} //namespace Permaquim.Depositary.Business.Tables.Auditoria
	namespace Permaquim.Depositary.Business.Tables.Auditoria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoLog : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Auditoria.TipoLog> _entities = new List<Entities.Tables.Auditoria.TipoLog>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoLog() : base()
            {
                base._dataItem = new Entities.Tables.Auditoria.TipoLog();
            }
            public TipoLog(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Auditoria.TipoLog();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Auditoria.TipoLog item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoLog Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Auditoria.TipoLog</returns>
			public Entities.Tables.Auditoria.TipoLog Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Auditoria.TipoLog)base.Add(new Entities.Tables.Auditoria.TipoLog(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Auditoria.TipoLog> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Auditoria.TipoLog>().ToList<Entities.Tables.Auditoria.TipoLog>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Auditoria.TipoLog items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Auditoria.TipoLog> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Auditoria.TipoLog items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Auditoria.TipoLog> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Auditoria.TipoLog
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Auditoria.TipoLog Add(Entities.Tables.Auditoria.TipoLog item)
            {
                return (Entities.Tables.Auditoria.TipoLog)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Auditoria.TipoLog
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Auditoria.TipoLog AddOrUpdate(Entities.Tables.Auditoria.TipoLog item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Auditoria.TipoLog)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Auditoria.TipoLog
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Auditoria.TipoLog item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Auditoria.TipoLog with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Auditoria.TipoLog {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Auditoria.TipoLog
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Auditoria.TipoLog item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Auditoria.TipoLog with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Auditoria.TipoLog {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Auditoria.TipoLog> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoLog
	} //namespace Permaquim.Depositary.Business.Tables.Auditoria
	namespace Permaquim.Depositary.Business.Tables.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Banco : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					PaisId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Banca.Banco> _entities = new List<Entities.Tables.Banca.Banco>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Banco() : base()
            {
                base._dataItem = new Entities.Tables.Banca.Banco();
            }
            public Banco(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Banca.Banco();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Banca.Banco item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Banco Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='PaisId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Banca.Banco</returns>
			public Entities.Tables.Banca.Banco Add(String Nombre,String Descripcion,String Codigo,Int64 PaisId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Banca.Banco)base.Add(new Entities.Tables.Banca.Banco(Nombre,Descripcion,Codigo,PaisId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Banca.Banco> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Banca.Banco>().ToList<Entities.Tables.Banca.Banco>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.Banco items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.Banco> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.Banco items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="PaisId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.Banco> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,Int64? PaisId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Codigo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PaisId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Banca.Banco
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.Banco Add(Entities.Tables.Banca.Banco item)
            {
                return (Entities.Tables.Banca.Banco)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Banca.Banco
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.Banco AddOrUpdate(Entities.Tables.Banca.Banco item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Banca.Banco)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Banca.Banco
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Banca.Banco item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Banca.Banco with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="PaisId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String codigo,Int64 paisid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Banca.Banco {Id = id,Nombre = nombre,Descripcion = descripcion,Codigo = codigo,PaisId = paisid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Banca.Banco
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Banca.Banco item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Banca.Banco with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Banca.Banco {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Banca.Banco> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Banco
	} //namespace Permaquim.Depositary.Business.Tables.Banca
	namespace Permaquim.Depositary.Business.Tables.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Cuenta : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					EmpresaId,
					Nombre,
					Numero,
					BancoId,
					SucursalBancaria,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Banca.Cuenta> _entities = new List<Entities.Tables.Banca.Cuenta>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Cuenta() : base()
            {
                base._dataItem = new Entities.Tables.Banca.Cuenta();
            }
            public Cuenta(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Banca.Cuenta();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Banca.Cuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Cuenta Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='EmpresaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Numero'></param>
         /// <param name='BancoId'></param>
         /// <param name='SucursalBancaria'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Banca.Cuenta</returns>
			public Entities.Tables.Banca.Cuenta Add(Int64 TipoId,Int64 EmpresaId,String Nombre,String Numero,Int64 BancoId,String SucursalBancaria,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Banca.Cuenta)base.Add(new Entities.Tables.Banca.Cuenta(TipoId,EmpresaId,Nombre,Numero,BancoId,SucursalBancaria,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Banca.Cuenta> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Banca.Cuenta>().ToList<Entities.Tables.Banca.Cuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.Cuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.Cuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.Cuenta items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Numero"></param>
            /// <param name="BancoId"></param>
            /// <param name="SucursalBancaria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.Cuenta> Items(Int64? Id,Int64? TipoId,Int64? EmpresaId,String Nombre,String Numero,Int64? BancoId,String SucursalBancaria,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EmpresaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Numero != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Numero, sqlEnum.OperandEnum.Equal, Numero);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Numero, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Numero);
                    }
                   
                }
                if (BancoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BancoId, sqlEnum.OperandEnum.Equal, BancoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BancoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BancoId);
                    }
                   
                }
                if (SucursalBancaria != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalBancaria, sqlEnum.OperandEnum.Equal, SucursalBancaria);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SucursalBancaria, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SucursalBancaria);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Banca.Cuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.Cuenta Add(Entities.Tables.Banca.Cuenta item)
            {
                return (Entities.Tables.Banca.Cuenta)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Banca.Cuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.Cuenta AddOrUpdate(Entities.Tables.Banca.Cuenta item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Banca.Cuenta)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Banca.Cuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Banca.Cuenta item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Banca.Cuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Numero"></param>
            /// <param name="BancoId"></param>
            /// <param name="SucursalBancaria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64 empresaid,String nombre,String numero,Int64 bancoid,String sucursalbancaria,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Banca.Cuenta {Id = id,TipoId = tipoid,EmpresaId = empresaid,Nombre = nombre,Numero = numero,BancoId = bancoid,SucursalBancaria = sucursalbancaria,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Banca.Cuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Banca.Cuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Banca.Cuenta with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Banca.Cuenta {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Banca.Cuenta> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Cuenta
	} //namespace Permaquim.Depositary.Business.Tables.Banca
	namespace Permaquim.Depositary.Business.Tables.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoCuenta : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Banca.TipoCuenta> _entities = new List<Entities.Tables.Banca.TipoCuenta>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoCuenta() : base()
            {
                base._dataItem = new Entities.Tables.Banca.TipoCuenta();
            }
            public TipoCuenta(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Banca.TipoCuenta();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Banca.TipoCuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoCuenta Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Banca.TipoCuenta</returns>
			public Entities.Tables.Banca.TipoCuenta Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Banca.TipoCuenta)base.Add(new Entities.Tables.Banca.TipoCuenta(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Banca.TipoCuenta> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Banca.TipoCuenta>().ToList<Entities.Tables.Banca.TipoCuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.TipoCuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.TipoCuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.TipoCuenta items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.TipoCuenta> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Banca.TipoCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.TipoCuenta Add(Entities.Tables.Banca.TipoCuenta item)
            {
                return (Entities.Tables.Banca.TipoCuenta)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Banca.TipoCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.TipoCuenta AddOrUpdate(Entities.Tables.Banca.TipoCuenta item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Banca.TipoCuenta)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Banca.TipoCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Banca.TipoCuenta item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Banca.TipoCuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Banca.TipoCuenta {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Banca.TipoCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Banca.TipoCuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Banca.TipoCuenta with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Banca.TipoCuenta {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Banca.TipoCuenta> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoCuenta
	} //namespace Permaquim.Depositary.Business.Tables.Banca
	namespace Permaquim.Depositary.Business.Tables.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioCuenta : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					CuentaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Banca.UsuarioCuenta> _entities = new List<Entities.Tables.Banca.UsuarioCuenta>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public UsuarioCuenta() : base()
            {
                base._dataItem = new Entities.Tables.Banca.UsuarioCuenta();
            }
            public UsuarioCuenta(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Banca.UsuarioCuenta();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Banca.UsuarioCuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioCuenta Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='CuentaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Banca.UsuarioCuenta</returns>
			public Entities.Tables.Banca.UsuarioCuenta Add(Int64 UsuarioId,Int64 CuentaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Banca.UsuarioCuenta)base.Add(new Entities.Tables.Banca.UsuarioCuenta(UsuarioId,CuentaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Banca.UsuarioCuenta> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Banca.UsuarioCuenta>().ToList<Entities.Tables.Banca.UsuarioCuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.UsuarioCuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.UsuarioCuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Banca.UsuarioCuenta items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Banca.UsuarioCuenta> Items(Int64? Id,Int64? UsuarioId,Int64? CuentaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (CuentaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CuentaId, sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CuentaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Banca.UsuarioCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.UsuarioCuenta Add(Entities.Tables.Banca.UsuarioCuenta item)
            {
                return (Entities.Tables.Banca.UsuarioCuenta)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Banca.UsuarioCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Banca.UsuarioCuenta AddOrUpdate(Entities.Tables.Banca.UsuarioCuenta item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Banca.UsuarioCuenta)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Banca.UsuarioCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Banca.UsuarioCuenta item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Banca.UsuarioCuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 usuarioid,Int64 cuentaid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Banca.UsuarioCuenta {Id = id,UsuarioId = usuarioid,CuentaId = cuentaid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Banca.UsuarioCuenta
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Banca.UsuarioCuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Banca.UsuarioCuenta with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Banca.UsuarioCuenta {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Banca.UsuarioCuenta> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioCuenta
	} //namespace Permaquim.Depositary.Business.Tables.Banca
	namespace Permaquim.Depositary.Business.Tables.Biometria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class HuellaDactilar : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					Dedo,
					Huella,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Biometria.HuellaDactilar> _entities = new List<Entities.Tables.Biometria.HuellaDactilar>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public HuellaDactilar() : base()
            {
                base._dataItem = new Entities.Tables.Biometria.HuellaDactilar();
            }
            public HuellaDactilar(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Biometria.HuellaDactilar();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Biometria.HuellaDactilar item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// HuellaDactilar Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='Dedo'></param>
         /// <param name='Huella'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Biometria.HuellaDactilar</returns>
			public Entities.Tables.Biometria.HuellaDactilar Add(Int64 UsuarioId,Byte Dedo,String Huella,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Biometria.HuellaDactilar)base.Add(new Entities.Tables.Biometria.HuellaDactilar(UsuarioId,Dedo,Huella,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Biometria.HuellaDactilar> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Biometria.HuellaDactilar>().ToList<Entities.Tables.Biometria.HuellaDactilar>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Biometria.HuellaDactilar items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Biometria.HuellaDactilar> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Biometria.HuellaDactilar items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Dedo"></param>
            /// <param name="Huella"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Biometria.HuellaDactilar> Items(Int64? Id,Int64? UsuarioId,Byte? Dedo,String Huella,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (Dedo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Dedo, sqlEnum.OperandEnum.Equal, Dedo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Dedo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Dedo);
                    }
                   
                }
                if (Huella != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Huella, sqlEnum.OperandEnum.Equal, Huella);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Huella, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Huella);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Biometria.HuellaDactilar
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Biometria.HuellaDactilar Add(Entities.Tables.Biometria.HuellaDactilar item)
            {
                return (Entities.Tables.Biometria.HuellaDactilar)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Biometria.HuellaDactilar
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Biometria.HuellaDactilar AddOrUpdate(Entities.Tables.Biometria.HuellaDactilar item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Biometria.HuellaDactilar)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Biometria.HuellaDactilar
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Biometria.HuellaDactilar item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Biometria.HuellaDactilar with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Dedo"></param>
            /// <param name="Huella"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 usuarioid,Byte dedo,String huella,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Biometria.HuellaDactilar {Id = id,UsuarioId = usuarioid,Dedo = dedo,Huella = huella,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Biometria.HuellaDactilar
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Biometria.HuellaDactilar item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Biometria.HuellaDactilar with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Biometria.HuellaDactilar {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Biometria.HuellaDactilar> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class HuellaDactilar
	} //namespace Permaquim.Depositary.Business.Tables.Biometria
	namespace Permaquim.Depositary.Business.Tables.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Empresa : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					GrupoId,
					CodigoExterno,
					Direccion,
					CodigoPostalId,
					EstiloEsquemaId,
					LenguajeId,
					Habilitado,
					EsDefault,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Directorio.Empresa> _entities = new List<Entities.Tables.Directorio.Empresa>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Empresa() : base()
            {
                base._dataItem = new Entities.Tables.Directorio.Empresa();
            }
            public Empresa(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Directorio.Empresa();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Directorio.Empresa item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Empresa Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='GrupoId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Direccion'></param>
         /// <param name='CodigoPostalId'></param>
         /// <param name='EstiloEsquemaId'></param>
         /// <param name='LenguajeId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='EsDefault'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Directorio.Empresa</returns>
			public Entities.Tables.Directorio.Empresa Add(String Nombre,String Descripcion,Int64 GrupoId,String CodigoExterno,String Direccion,Int64 CodigoPostalId,Int64 EstiloEsquemaId,Int64 LenguajeId,Boolean Habilitado,Boolean EsDefault,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Directorio.Empresa)base.Add(new Entities.Tables.Directorio.Empresa(Nombre,Descripcion,GrupoId,CodigoExterno,Direccion,CodigoPostalId,EstiloEsquemaId,LenguajeId,Habilitado,EsDefault,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Directorio.Empresa> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Directorio.Empresa>().ToList<Entities.Tables.Directorio.Empresa>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Empresa items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Empresa> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Empresa items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="GrupoId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="EstiloEsquemaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="EsDefault"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Empresa> Items(Int64? Id,String Nombre,String Descripcion,Int64? GrupoId,String CodigoExterno,String Direccion,Int64? CodigoPostalId,Int64? EstiloEsquemaId,Int64? LenguajeId,Boolean? Habilitado,Boolean? EsDefault,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (GrupoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.GrupoId, sqlEnum.OperandEnum.Equal, GrupoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.GrupoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, GrupoId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Direccion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Direccion, sqlEnum.OperandEnum.Equal, Direccion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Direccion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                   
                }
                if (CodigoPostalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoPostalId, sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoPostalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                   
                }
                if (EstiloEsquemaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EstiloEsquemaId, sqlEnum.OperandEnum.Equal, EstiloEsquemaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EstiloEsquemaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EstiloEsquemaId);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.LenguajeId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsDefault, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Directorio.Empresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Empresa Add(Entities.Tables.Directorio.Empresa item)
            {
                return (Entities.Tables.Directorio.Empresa)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Directorio.Empresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Empresa AddOrUpdate(Entities.Tables.Directorio.Empresa item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Directorio.Empresa)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Directorio.Empresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Directorio.Empresa item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Directorio.Empresa with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="GrupoId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="EstiloEsquemaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="EsDefault"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 grupoid,String codigoexterno,String direccion,Int64 codigopostalid,Int64 estiloesquemaid,Int64 lenguajeid,Boolean habilitado,Boolean esdefault,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Directorio.Empresa {Id = id,Nombre = nombre,Descripcion = descripcion,GrupoId = grupoid,CodigoExterno = codigoexterno,Direccion = direccion,CodigoPostalId = codigopostalid,EstiloEsquemaId = estiloesquemaid,LenguajeId = lenguajeid,Habilitado = habilitado,EsDefault = esdefault,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Directorio.Empresa
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Directorio.Empresa item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Directorio.Empresa with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Directorio.Empresa {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Directorio.Empresa> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Empresa
	} //namespace Permaquim.Depositary.Business.Tables.Directorio
	namespace Permaquim.Depositary.Business.Tables.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Grupo : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Directorio.Grupo> _entities = new List<Entities.Tables.Directorio.Grupo>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Grupo() : base()
            {
                base._dataItem = new Entities.Tables.Directorio.Grupo();
            }
            public Grupo(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Directorio.Grupo();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Directorio.Grupo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Grupo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Directorio.Grupo</returns>
			public Entities.Tables.Directorio.Grupo Add(String Nombre,String Descripcion,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Directorio.Grupo)base.Add(new Entities.Tables.Directorio.Grupo(Nombre,Descripcion,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Directorio.Grupo> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Directorio.Grupo>().ToList<Entities.Tables.Directorio.Grupo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Grupo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Grupo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Grupo items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Grupo> Items(Int64? Id,String Nombre,String Descripcion,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Directorio.Grupo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Grupo Add(Entities.Tables.Directorio.Grupo item)
            {
                return (Entities.Tables.Directorio.Grupo)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Directorio.Grupo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Grupo AddOrUpdate(Entities.Tables.Directorio.Grupo item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Directorio.Grupo)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Directorio.Grupo
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Directorio.Grupo item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Directorio.Grupo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String codigoexterno,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Directorio.Grupo {Id = id,Nombre = nombre,Descripcion = descripcion,CodigoExterno = codigoexterno,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Directorio.Grupo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Directorio.Grupo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Directorio.Grupo with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Directorio.Grupo {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Directorio.Grupo> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Grupo
	} //namespace Permaquim.Depositary.Business.Tables.Directorio
	namespace Permaquim.Depositary.Business.Tables.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RelacionMonedaSucursal : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MonedaId,
					SucursalId,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Directorio.RelacionMonedaSucursal> _entities = new List<Entities.Tables.Directorio.RelacionMonedaSucursal>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public RelacionMonedaSucursal() : base()
            {
                base._dataItem = new Entities.Tables.Directorio.RelacionMonedaSucursal();
            }
            public RelacionMonedaSucursal(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Directorio.RelacionMonedaSucursal();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Directorio.RelacionMonedaSucursal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RelacionMonedaSucursal Add Method
         /// </summary>
         /// <param name='MonedaId'></param>
         /// <param name='SucursalId'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Directorio.RelacionMonedaSucursal</returns>
			public Entities.Tables.Directorio.RelacionMonedaSucursal Add(Int64 MonedaId,Int64 SucursalId,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Directorio.RelacionMonedaSucursal)base.Add(new Entities.Tables.Directorio.RelacionMonedaSucursal(MonedaId,SucursalId,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Directorio.RelacionMonedaSucursal> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Directorio.RelacionMonedaSucursal>().ToList<Entities.Tables.Directorio.RelacionMonedaSucursal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.RelacionMonedaSucursal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.RelacionMonedaSucursal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.RelacionMonedaSucursal items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.RelacionMonedaSucursal> Items(Int64? Id,Int64? MonedaId,Int64? SucursalId,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SucursalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsDefault, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Directorio.RelacionMonedaSucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.RelacionMonedaSucursal Add(Entities.Tables.Directorio.RelacionMonedaSucursal item)
            {
                return (Entities.Tables.Directorio.RelacionMonedaSucursal)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Directorio.RelacionMonedaSucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.RelacionMonedaSucursal AddOrUpdate(Entities.Tables.Directorio.RelacionMonedaSucursal item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Directorio.RelacionMonedaSucursal)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Directorio.RelacionMonedaSucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Directorio.RelacionMonedaSucursal item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Directorio.RelacionMonedaSucursal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 monedaid,Int64 sucursalid,Boolean esdefault,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Directorio.RelacionMonedaSucursal {Id = id,MonedaId = monedaid,SucursalId = sucursalid,EsDefault = esdefault,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Directorio.RelacionMonedaSucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Directorio.RelacionMonedaSucursal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Directorio.RelacionMonedaSucursal with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Directorio.RelacionMonedaSucursal {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Directorio.RelacionMonedaSucursal> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RelacionMonedaSucursal
	} //namespace Permaquim.Depositary.Business.Tables.Directorio
	namespace Permaquim.Depositary.Business.Tables.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sector : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					SucursalId,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Directorio.Sector> _entities = new List<Entities.Tables.Directorio.Sector>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Sector() : base()
            {
                base._dataItem = new Entities.Tables.Directorio.Sector();
            }
            public Sector(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Directorio.Sector();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Directorio.Sector item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sector Add Method
         /// </summary>
         /// <param name='SucursalId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Directorio.Sector</returns>
			public Entities.Tables.Directorio.Sector Add(Int64 SucursalId,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Directorio.Sector)base.Add(new Entities.Tables.Directorio.Sector(SucursalId,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Directorio.Sector> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Directorio.Sector>().ToList<Entities.Tables.Directorio.Sector>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Sector items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Sector> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Sector items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SucursalId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Sector> Items(Int64? Id,Int64? SucursalId,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SucursalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Directorio.Sector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Sector Add(Entities.Tables.Directorio.Sector item)
            {
                return (Entities.Tables.Directorio.Sector)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Directorio.Sector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Sector AddOrUpdate(Entities.Tables.Directorio.Sector item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Directorio.Sector)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Directorio.Sector
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Directorio.Sector item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Directorio.Sector with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SucursalId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 sucursalid,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Directorio.Sector {Id = id,SucursalId = sucursalid,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Directorio.Sector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Directorio.Sector item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Directorio.Sector with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Directorio.Sector {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Directorio.Sector> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sector
	} //namespace Permaquim.Depositary.Business.Tables.Directorio
	namespace Permaquim.Depositary.Business.Tables.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sucursal : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EmpresaId,
					CodigoExterno,
					Direccion,
					CodigoPostalId,
					ZonaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Directorio.Sucursal> _entities = new List<Entities.Tables.Directorio.Sucursal>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Sucursal() : base()
            {
                base._dataItem = new Entities.Tables.Directorio.Sucursal();
            }
            public Sucursal(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Directorio.Sucursal();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Directorio.Sucursal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sucursal Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EmpresaId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Direccion'></param>
         /// <param name='CodigoPostalId'></param>
         /// <param name='ZonaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Directorio.Sucursal</returns>
			public Entities.Tables.Directorio.Sucursal Add(String Nombre,String Descripcion,Int64 EmpresaId,String CodigoExterno,String Direccion,Int64 CodigoPostalId,Int64 ZonaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Directorio.Sucursal)base.Add(new Entities.Tables.Directorio.Sucursal(Nombre,Descripcion,EmpresaId,CodigoExterno,Direccion,CodigoPostalId,ZonaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Directorio.Sucursal> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Directorio.Sucursal>().ToList<Entities.Tables.Directorio.Sucursal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Sucursal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Sucursal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Directorio.Sucursal items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="ZonaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Directorio.Sucursal> Items(Int64? Id,String Nombre,String Descripcion,Int64? EmpresaId,String CodigoExterno,String Direccion,Int64? CodigoPostalId,Int64? ZonaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EmpresaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Direccion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Direccion, sqlEnum.OperandEnum.Equal, Direccion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Direccion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                   
                }
                if (CodigoPostalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoPostalId, sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoPostalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                   
                }
                if (ZonaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ZonaId, sqlEnum.OperandEnum.Equal, ZonaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ZonaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ZonaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Directorio.Sucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Sucursal Add(Entities.Tables.Directorio.Sucursal item)
            {
                return (Entities.Tables.Directorio.Sucursal)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Directorio.Sucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Directorio.Sucursal AddOrUpdate(Entities.Tables.Directorio.Sucursal item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Directorio.Sucursal)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Directorio.Sucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Directorio.Sucursal item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Directorio.Sucursal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="ZonaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 empresaid,String codigoexterno,String direccion,Int64 codigopostalid,Int64 zonaid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Directorio.Sucursal {Id = id,Nombre = nombre,Descripcion = descripcion,EmpresaId = empresaid,CodigoExterno = codigoexterno,Direccion = direccion,CodigoPostalId = codigopostalid,ZonaId = zonaid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Directorio.Sucursal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Directorio.Sucursal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Directorio.Sucursal with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Directorio.Sucursal {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Directorio.Sucursal> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sucursal
	} //namespace Permaquim.Depositary.Business.Tables.Directorio
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ComandoContadora : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoContadoraId,
					Nombre,
					Descripcion,
					Comando,
					TiempoDetencion,
					Respuesta,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.ComandoContadora> _entities = new List<Entities.Tables.Dispositivo.ComandoContadora>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public ComandoContadora() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.ComandoContadora();
            }
            public ComandoContadora(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.ComandoContadora();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.ComandoContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ComandoContadora Add Method
         /// </summary>
         /// <param name='TipoContadoraId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Comando'></param>
         /// <param name='TiempoDetencion'></param>
         /// <param name='Respuesta'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.ComandoContadora</returns>
			public Entities.Tables.Dispositivo.ComandoContadora Add(Int64 TipoContadoraId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.ComandoContadora)base.Add(new Entities.Tables.Dispositivo.ComandoContadora(TipoContadoraId,Nombre,Descripcion,Comando,TiempoDetencion,Respuesta,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.ComandoContadora> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.ComandoContadora>().ToList<Entities.Tables.Dispositivo.ComandoContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ComandoContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ComandoContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ComandoContadora items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ComandoContadora> Items(Int64? Id,Int64? TipoContadoraId,String Nombre,String Descripcion,String Comando,Int64? TiempoDetencion,String Respuesta,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoContadoraId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoContadoraId, sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoContadoraId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Comando != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Comando, sqlEnum.OperandEnum.Equal, Comando);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Comando, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Comando);
                    }
                   
                }
                if (TiempoDetencion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TiempoDetencion, sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TiempoDetencion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                   
                }
                if (Respuesta != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Respuesta, sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Respuesta, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.ComandoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ComandoContadora Add(Entities.Tables.Dispositivo.ComandoContadora item)
            {
                return (Entities.Tables.Dispositivo.ComandoContadora)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.ComandoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ComandoContadora AddOrUpdate(Entities.Tables.Dispositivo.ComandoContadora item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.ComandoContadora)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.ComandoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.ComandoContadora item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.ComandoContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipocontadoraid,String nombre,String descripcion,String comando,Int64 tiempodetencion,String respuesta,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.ComandoContadora {Id = id,TipoContadoraId = tipocontadoraid,Nombre = nombre,Descripcion = descripcion,Comando = comando,TiempoDetencion = tiempodetencion,Respuesta = respuesta,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.ComandoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.ComandoContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.ComandoContadora with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.ComandoContadora {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.ComandoContadora> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ComandoContadora
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ComandoPlaca : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoPlacaId,
					Nombre,
					Descripcion,
					Comando,
					TiempoDetencion,
					Respuesta,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.ComandoPlaca> _entities = new List<Entities.Tables.Dispositivo.ComandoPlaca>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public ComandoPlaca() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.ComandoPlaca();
            }
            public ComandoPlaca(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.ComandoPlaca();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.ComandoPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ComandoPlaca Add Method
         /// </summary>
         /// <param name='TipoPlacaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Comando'></param>
         /// <param name='TiempoDetencion'></param>
         /// <param name='Respuesta'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.ComandoPlaca</returns>
			public Entities.Tables.Dispositivo.ComandoPlaca Add(Int64 TipoPlacaId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.ComandoPlaca)base.Add(new Entities.Tables.Dispositivo.ComandoPlaca(TipoPlacaId,Nombre,Descripcion,Comando,TiempoDetencion,Respuesta,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.ComandoPlaca> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.ComandoPlaca>().ToList<Entities.Tables.Dispositivo.ComandoPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ComandoPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ComandoPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ComandoPlaca items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ComandoPlaca> Items(Int64? Id,Int64? TipoPlacaId,String Nombre,String Descripcion,String Comando,Int64? TiempoDetencion,String Respuesta,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoPlacaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoPlacaId, sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoPlacaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Comando != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Comando, sqlEnum.OperandEnum.Equal, Comando);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Comando, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Comando);
                    }
                   
                }
                if (TiempoDetencion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TiempoDetencion, sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TiempoDetencion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                   
                }
                if (Respuesta != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Respuesta, sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Respuesta, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.ComandoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ComandoPlaca Add(Entities.Tables.Dispositivo.ComandoPlaca item)
            {
                return (Entities.Tables.Dispositivo.ComandoPlaca)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.ComandoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ComandoPlaca AddOrUpdate(Entities.Tables.Dispositivo.ComandoPlaca item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.ComandoPlaca)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.ComandoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.ComandoPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.ComandoPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoplacaid,String nombre,String descripcion,String comando,Int64 tiempodetencion,String respuesta,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.ComandoPlaca {Id = id,TipoPlacaId = tipoplacaid,Nombre = nombre,Descripcion = descripcion,Comando = comando,TiempoDetencion = tiempodetencion,Respuesta = respuesta,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.ComandoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.ComandoPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.ComandoPlaca with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.ComandoPlaca {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.ComandoPlaca> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ComandoPlaca
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionDepositario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.ConfiguracionDepositario> _entities = new List<Entities.Tables.Dispositivo.ConfiguracionDepositario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public ConfiguracionDepositario() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.ConfiguracionDepositario();
            }
            public ConfiguracionDepositario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.ConfiguracionDepositario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.ConfiguracionDepositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionDepositario Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.ConfiguracionDepositario</returns>
			public Entities.Tables.Dispositivo.ConfiguracionDepositario Add(Int64 TipoId,Int64 DepositarioId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.ConfiguracionDepositario)base.Add(new Entities.Tables.Dispositivo.ConfiguracionDepositario(TipoId,DepositarioId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.ConfiguracionDepositario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.ConfiguracionDepositario>().ToList<Entities.Tables.Dispositivo.ConfiguracionDepositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ConfiguracionDepositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ConfiguracionDepositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.ConfiguracionDepositario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.ConfiguracionDepositario> Items(Int64? Id,Int64? TipoId,Int64? DepositarioId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.ConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ConfiguracionDepositario Add(Entities.Tables.Dispositivo.ConfiguracionDepositario item)
            {
                return (Entities.Tables.Dispositivo.ConfiguracionDepositario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.ConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.ConfiguracionDepositario AddOrUpdate(Entities.Tables.Dispositivo.ConfiguracionDepositario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.ConfiguracionDepositario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.ConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.ConfiguracionDepositario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.ConfiguracionDepositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64 depositarioid,String valor,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.ConfiguracionDepositario {Id = id,TipoId = tipoid,DepositarioId = depositarioid,Valor = valor,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.ConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.ConfiguracionDepositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.ConfiguracionDepositario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.ConfiguracionDepositario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.ConfiguracionDepositario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionDepositario
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Depositario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					SectorId,
					NumeroSerie,
					CodigoExterno,
					ModeloId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.Depositario> _entities = new List<Entities.Tables.Dispositivo.Depositario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Depositario() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.Depositario();
            }
            public Depositario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.Depositario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.Depositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Depositario Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='SectorId'></param>
         /// <param name='NumeroSerie'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='ModeloId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.Depositario</returns>
			public Entities.Tables.Dispositivo.Depositario Add(String Nombre,String Descripcion,Int64 SectorId,String NumeroSerie,String CodigoExterno,Int64 ModeloId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.Depositario)base.Add(new Entities.Tables.Dispositivo.Depositario(Nombre,Descripcion,SectorId,NumeroSerie,CodigoExterno,ModeloId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.Depositario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.Depositario>().ToList<Entities.Tables.Dispositivo.Depositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Depositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Depositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Depositario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="SectorId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Depositario> Items(Int64? Id,String Nombre,String Descripcion,Int64? SectorId,String NumeroSerie,String CodigoExterno,Int64? ModeloId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (NumeroSerie != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NumeroSerie, sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.NumeroSerie, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ModeloId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.Depositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Depositario Add(Entities.Tables.Dispositivo.Depositario item)
            {
                return (Entities.Tables.Dispositivo.Depositario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.Depositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Depositario AddOrUpdate(Entities.Tables.Dispositivo.Depositario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.Depositario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.Depositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.Depositario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.Depositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="SectorId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 sectorid,String numeroserie,String codigoexterno,Int64 modeloid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.Depositario {Id = id,Nombre = nombre,Descripcion = descripcion,SectorId = sectorid,NumeroSerie = numeroserie,CodigoExterno = codigoexterno,ModeloId = modeloid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.Depositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.Depositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.Depositario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.Depositario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.Depositario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Depositario
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioContadora : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoContadoraId,
					DepositarioId,
					NumeroSerie,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.DepositarioContadora> _entities = new List<Entities.Tables.Dispositivo.DepositarioContadora>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public DepositarioContadora() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioContadora();
            }
            public DepositarioContadora(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioContadora();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.DepositarioContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioContadora Add Method
         /// </summary>
         /// <param name='TipoContadoraId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='NumeroSerie'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.DepositarioContadora</returns>
			public Entities.Tables.Dispositivo.DepositarioContadora Add(Int64 TipoContadoraId,Int64 DepositarioId,String NumeroSerie,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.DepositarioContadora)base.Add(new Entities.Tables.Dispositivo.DepositarioContadora(TipoContadoraId,DepositarioId,NumeroSerie,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.DepositarioContadora> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.DepositarioContadora>().ToList<Entities.Tables.Dispositivo.DepositarioContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioContadora items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioContadora> Items(Int64? Id,Int64? TipoContadoraId,Int64? DepositarioId,String NumeroSerie,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoContadoraId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoContadoraId, sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoContadoraId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (NumeroSerie != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NumeroSerie, sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.NumeroSerie, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PortName, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Parity, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DataBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadBufferSize, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.StopBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadTimeout, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Handshake, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BaudRate, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RtsEnable, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.DepositarioContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioContadora Add(Entities.Tables.Dispositivo.DepositarioContadora item)
            {
                return (Entities.Tables.Dispositivo.DepositarioContadora)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.DepositarioContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioContadora AddOrUpdate(Entities.Tables.Dispositivo.DepositarioContadora item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.DepositarioContadora)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.DepositarioContadora item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipocontadoraid,Int64 depositarioid,String numeroserie,String portname,Int32 parity,Int32 databits,Int32 readbuffersize,Int32 stopbits,Int32 readtimeout,Int32 handshake,Int32 baudrate,Boolean rtsenable,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.DepositarioContadora {Id = id,TipoContadoraId = tipocontadoraid,DepositarioId = depositarioid,NumeroSerie = numeroserie,PortName = portname,Parity = parity,DataBits = databits,ReadBufferSize = readbuffersize,StopBits = stopbits,ReadTimeout = readtimeout,Handshake = handshake,BaudRate = baudrate,RtsEnable = rtsenable,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.DepositarioContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.DepositarioContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.DepositarioContadora with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.DepositarioContadora {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.DepositarioContadora> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioContadora
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioEstado : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					SectorId,
					SucursalId,
					ContadoraA,
					ContadoraB,
					Placa,
					Puerta,
					Contenedor,
					FueraDeServicio,
					Observaciones,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.DepositarioEstado> _entities = new List<Entities.Tables.Dispositivo.DepositarioEstado>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public DepositarioEstado() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioEstado();
            }
            public DepositarioEstado(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioEstado();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.DepositarioEstado item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioEstado Add Method
         /// </summary>
         /// <param name='DepositarioId'></param>
         /// <param name='SectorId'></param>
         /// <param name='SucursalId'></param>
         /// <param name='ContadoraA'></param>
         /// <param name='ContadoraB'></param>
         /// <param name='Placa'></param>
         /// <param name='Puerta'></param>
         /// <param name='Contenedor'></param>
         /// <param name='FueraDeServicio'></param>
         /// <param name='Observaciones'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.DepositarioEstado</returns>
			public Entities.Tables.Dispositivo.DepositarioEstado Add(Int64 DepositarioId,Int64 SectorId,Int64 SucursalId,String ContadoraA,String ContadoraB,String Placa,String Puerta,String Contenedor,Boolean FueraDeServicio,String Observaciones,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.DepositarioEstado)base.Add(new Entities.Tables.Dispositivo.DepositarioEstado(DepositarioId,SectorId,SucursalId,ContadoraA,ContadoraB,Placa,Puerta,Contenedor,FueraDeServicio,Observaciones,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.DepositarioEstado> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.DepositarioEstado>().ToList<Entities.Tables.Dispositivo.DepositarioEstado>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioEstado items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioEstado> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioEstado items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="ContadoraA"></param>
            /// <param name="ContadoraB"></param>
            /// <param name="Placa"></param>
            /// <param name="Puerta"></param>
            /// <param name="Contenedor"></param>
            /// <param name="FueraDeServicio"></param>
            /// <param name="Observaciones"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioEstado> Items(Int64? Id,Int64? DepositarioId,Int64? SectorId,Int64? SucursalId,String ContadoraA,String ContadoraB,String Placa,String Puerta,String Contenedor,Boolean? FueraDeServicio,String Observaciones,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SucursalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (ContadoraA != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContadoraA, sqlEnum.OperandEnum.Equal, ContadoraA);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ContadoraA, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ContadoraA);
                    }
                   
                }
                if (ContadoraB != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContadoraB, sqlEnum.OperandEnum.Equal, ContadoraB);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ContadoraB, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ContadoraB);
                    }
                   
                }
                if (Placa != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Placa, sqlEnum.OperandEnum.Equal, Placa);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Placa, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Placa);
                    }
                   
                }
                if (Puerta != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Puerta, sqlEnum.OperandEnum.Equal, Puerta);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Puerta, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Puerta);
                    }
                   
                }
                if (Contenedor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Contenedor, sqlEnum.OperandEnum.Equal, Contenedor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Contenedor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Contenedor);
                    }
                   
                }
                if (FueraDeServicio != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FueraDeServicio, sqlEnum.OperandEnum.Equal, FueraDeServicio);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FueraDeServicio, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FueraDeServicio);
                    }
                   
                }
                if (Observaciones != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Observaciones, sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Observaciones, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.DepositarioEstado
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioEstado Add(Entities.Tables.Dispositivo.DepositarioEstado item)
            {
                return (Entities.Tables.Dispositivo.DepositarioEstado)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.DepositarioEstado
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioEstado AddOrUpdate(Entities.Tables.Dispositivo.DepositarioEstado item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.DepositarioEstado)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioEstado
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.DepositarioEstado item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioEstado with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="ContadoraA"></param>
            /// <param name="ContadoraB"></param>
            /// <param name="Placa"></param>
            /// <param name="Puerta"></param>
            /// <param name="Contenedor"></param>
            /// <param name="FueraDeServicio"></param>
            /// <param name="Observaciones"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 depositarioid,Int64 sectorid,Int64 sucursalid,String contadoraa,String contadorab,String placa,String puerta,String contenedor,Boolean fueradeservicio,String observaciones,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.DepositarioEstado {Id = id,DepositarioId = depositarioid,SectorId = sectorid,SucursalId = sucursalid,ContadoraA = contadoraa,ContadoraB = contadorab,Placa = placa,Puerta = puerta,Contenedor = contenedor,FueraDeServicio = fueradeservicio,Observaciones = observaciones,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.DepositarioEstado
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.DepositarioEstado item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.DepositarioEstado with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.DepositarioEstado {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.DepositarioEstado> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioEstado
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioMoneda : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					MonedaId,
					IndiceEnContadora,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.DepositarioMoneda> _entities = new List<Entities.Tables.Dispositivo.DepositarioMoneda>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public DepositarioMoneda() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioMoneda();
            }
            public DepositarioMoneda(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioMoneda();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.DepositarioMoneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioMoneda Add Method
         /// </summary>
         /// <param name='DepositarioId'></param>
         /// <param name='MonedaId'></param>
         /// <param name='IndiceEnContadora'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.DepositarioMoneda</returns>
			public Entities.Tables.Dispositivo.DepositarioMoneda Add(Int64 DepositarioId,Int64 MonedaId,Int32 IndiceEnContadora,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.DepositarioMoneda)base.Add(new Entities.Tables.Dispositivo.DepositarioMoneda(DepositarioId,MonedaId,IndiceEnContadora,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.DepositarioMoneda> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.DepositarioMoneda>().ToList<Entities.Tables.Dispositivo.DepositarioMoneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioMoneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioMoneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioMoneda items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="IndiceEnContadora"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioMoneda> Items(Int64? Id,Int64? DepositarioId,Int64? MonedaId,Int32? IndiceEnContadora,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (IndiceEnContadora != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.IndiceEnContadora, sqlEnum.OperandEnum.Equal, IndiceEnContadora);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.IndiceEnContadora, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, IndiceEnContadora);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.DepositarioMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioMoneda Add(Entities.Tables.Dispositivo.DepositarioMoneda item)
            {
                return (Entities.Tables.Dispositivo.DepositarioMoneda)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.DepositarioMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioMoneda AddOrUpdate(Entities.Tables.Dispositivo.DepositarioMoneda item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.DepositarioMoneda)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.DepositarioMoneda item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioMoneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="IndiceEnContadora"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 depositarioid,Int64 monedaid,Int32 indiceencontadora,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.DepositarioMoneda {Id = id,DepositarioId = depositarioid,MonedaId = monedaid,IndiceEnContadora = indiceencontadora,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.DepositarioMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.DepositarioMoneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.DepositarioMoneda with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.DepositarioMoneda {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.DepositarioMoneda> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioMoneda
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioPlaca : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					TipoPlacaId,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					SensorA,
					BitSensorA,
					SensorB,
					BitSensorB,
					SensorC,
					BitSensorC,
					SensorD,
					BitSensorD,
					SensorL,
					BitSensorL,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.DepositarioPlaca> _entities = new List<Entities.Tables.Dispositivo.DepositarioPlaca>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public DepositarioPlaca() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioPlaca();
            }
            public DepositarioPlaca(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.DepositarioPlaca();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.DepositarioPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioPlaca Add Method
         /// </summary>
         /// <param name='DepositarioId'></param>
         /// <param name='TipoPlacaId'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='SensorA'></param>
         /// <param name='BitSensorA'></param>
         /// <param name='SensorB'></param>
         /// <param name='BitSensorB'></param>
         /// <param name='SensorC'></param>
         /// <param name='BitSensorC'></param>
         /// <param name='SensorD'></param>
         /// <param name='BitSensorD'></param>
         /// <param name='SensorL'></param>
         /// <param name='BitSensorL'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.DepositarioPlaca</returns>
			public Entities.Tables.Dispositivo.DepositarioPlaca Add(Int64 DepositarioId,Int64 TipoPlacaId,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.DepositarioPlaca)base.Add(new Entities.Tables.Dispositivo.DepositarioPlaca(DepositarioId,TipoPlacaId,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,SensorA,BitSensorA,SensorB,BitSensorB,SensorC,BitSensorC,SensorD,BitSensorD,SensorL,BitSensorL,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.DepositarioPlaca> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.DepositarioPlaca>().ToList<Entities.Tables.Dispositivo.DepositarioPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.DepositarioPlaca items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.DepositarioPlaca> Items(Int64? Id,Int64? DepositarioId,Int64? TipoPlacaId,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? SensorA,Int16? BitSensorA,Boolean? SensorB,Int16? BitSensorB,Boolean? SensorC,Int16? BitSensorC,Boolean? SensorD,Int16? BitSensorD,Boolean? SensorL,Int16? BitSensorL,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (TipoPlacaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoPlacaId, sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoPlacaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PortName, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Parity, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DataBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadBufferSize, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.StopBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadTimeout, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Handshake, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BaudRate, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RtsEnable, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (SensorA != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorA, sqlEnum.OperandEnum.Equal, SensorA);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorA, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                   
                }
                if (BitSensorA != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorA, sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorA, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                   
                }
                if (SensorB != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorB, sqlEnum.OperandEnum.Equal, SensorB);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorB, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                   
                }
                if (BitSensorB != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorB, sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorB, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                   
                }
                if (SensorC != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorC, sqlEnum.OperandEnum.Equal, SensorC);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorC, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                   
                }
                if (BitSensorC != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorC, sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorC, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                   
                }
                if (SensorD != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorD, sqlEnum.OperandEnum.Equal, SensorD);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorD, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                   
                }
                if (BitSensorD != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorD, sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorD, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                   
                }
                if (SensorL != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorL, sqlEnum.OperandEnum.Equal, SensorL);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorL, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                   
                }
                if (BitSensorL != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorL, sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorL, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.DepositarioPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioPlaca Add(Entities.Tables.Dispositivo.DepositarioPlaca item)
            {
                return (Entities.Tables.Dispositivo.DepositarioPlaca)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.DepositarioPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.DepositarioPlaca AddOrUpdate(Entities.Tables.Dispositivo.DepositarioPlaca item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.DepositarioPlaca)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.DepositarioPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.DepositarioPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 depositarioid,Int64 tipoplacaid,String portname,Int32 parity,Int32 databits,Int32 readbuffersize,Int32 stopbits,Int32 readtimeout,Int32 handshake,Int32 baudrate,Boolean rtsenable,Boolean sensora,Int16 bitsensora,Boolean sensorb,Int16 bitsensorb,Boolean sensorc,Int16 bitsensorc,Boolean sensord,Int16 bitsensord,Boolean sensorl,Int16 bitsensorl,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.DepositarioPlaca {Id = id,DepositarioId = depositarioid,TipoPlacaId = tipoplacaid,PortName = portname,Parity = parity,DataBits = databits,ReadBufferSize = readbuffersize,StopBits = stopbits,ReadTimeout = readtimeout,Handshake = handshake,BaudRate = baudrate,RtsEnable = rtsenable,SensorA = sensora,BitSensorA = bitsensora,SensorB = sensorb,BitSensorB = bitsensorb,SensorC = sensorc,BitSensorC = bitsensorc,SensorD = sensord,BitSensorD = bitsensord,SensorL = sensorl,BitSensorL = bitsensorl,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.DepositarioPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.DepositarioPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.DepositarioPlaca with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.DepositarioPlaca {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.DepositarioPlaca> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioPlaca
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Marca : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.Marca> _entities = new List<Entities.Tables.Dispositivo.Marca>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Marca() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.Marca();
            }
            public Marca(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.Marca();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.Marca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Marca Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.Marca</returns>
			public Entities.Tables.Dispositivo.Marca Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.Marca)base.Add(new Entities.Tables.Dispositivo.Marca(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.Marca> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.Marca>().ToList<Entities.Tables.Dispositivo.Marca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Marca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Marca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Marca items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Marca> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.Marca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Marca Add(Entities.Tables.Dispositivo.Marca item)
            {
                return (Entities.Tables.Dispositivo.Marca)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.Marca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Marca AddOrUpdate(Entities.Tables.Dispositivo.Marca item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.Marca)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.Marca
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.Marca item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.Marca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.Marca {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.Marca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.Marca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.Marca with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.Marca {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.Marca> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Marca
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Modelo : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MarcaId,
					Nombre,
					Descripcion,
					Imagen,
					PlantillaMonedaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.Modelo> _entities = new List<Entities.Tables.Dispositivo.Modelo>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Modelo() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.Modelo();
            }
            public Modelo(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.Modelo();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.Modelo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Modelo Add Method
         /// </summary>
         /// <param name='MarcaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Imagen'></param>
         /// <param name='PlantillaMonedaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.Modelo</returns>
			public Entities.Tables.Dispositivo.Modelo Add(Int64 MarcaId,String Nombre,String Descripcion,String Imagen,Int64 PlantillaMonedaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.Modelo)base.Add(new Entities.Tables.Dispositivo.Modelo(MarcaId,Nombre,Descripcion,Imagen,PlantillaMonedaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.Modelo> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.Modelo>().ToList<Entities.Tables.Dispositivo.Modelo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Modelo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Modelo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.Modelo items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MarcaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.Modelo> Items(Int64? Id,Int64? MarcaId,String Nombre,String Descripcion,String Imagen,Int64? PlantillaMonedaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MarcaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MarcaId, sqlEnum.OperandEnum.Equal, MarcaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MarcaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MarcaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Imagen, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (PlantillaMonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PlantillaMonedaId, sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PlantillaMonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.Modelo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Modelo Add(Entities.Tables.Dispositivo.Modelo item)
            {
                return (Entities.Tables.Dispositivo.Modelo)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.Modelo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.Modelo AddOrUpdate(Entities.Tables.Dispositivo.Modelo item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.Modelo)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.Modelo
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.Modelo item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.Modelo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MarcaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 marcaid,String nombre,String descripcion,String imagen,Int64 plantillamonedaid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.Modelo {Id = id,MarcaId = marcaid,Nombre = nombre,Descripcion = descripcion,Imagen = imagen,PlantillaMonedaId = plantillamonedaid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.Modelo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.Modelo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.Modelo with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.Modelo {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.Modelo> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Modelo
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PlantillaMoneda : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Decripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.PlantillaMoneda> _entities = new List<Entities.Tables.Dispositivo.PlantillaMoneda>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public PlantillaMoneda() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.PlantillaMoneda();
            }
            public PlantillaMoneda(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.PlantillaMoneda();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.PlantillaMoneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PlantillaMoneda Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Decripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.PlantillaMoneda</returns>
			public Entities.Tables.Dispositivo.PlantillaMoneda Add(String Nombre,String Decripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.PlantillaMoneda)base.Add(new Entities.Tables.Dispositivo.PlantillaMoneda(Nombre,Decripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.PlantillaMoneda> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.PlantillaMoneda>().ToList<Entities.Tables.Dispositivo.PlantillaMoneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.PlantillaMoneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.PlantillaMoneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.PlantillaMoneda items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.PlantillaMoneda> Items(Int64? Id,String Nombre,String Decripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Decripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Decripcion, sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Decripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.PlantillaMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.PlantillaMoneda Add(Entities.Tables.Dispositivo.PlantillaMoneda item)
            {
                return (Entities.Tables.Dispositivo.PlantillaMoneda)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.PlantillaMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.PlantillaMoneda AddOrUpdate(Entities.Tables.Dispositivo.PlantillaMoneda item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.PlantillaMoneda)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.PlantillaMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.PlantillaMoneda item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.PlantillaMoneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String decripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.PlantillaMoneda {Id = id,Nombre = nombre,Decripcion = decripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.PlantillaMoneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.PlantillaMoneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.PlantillaMoneda with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.PlantillaMoneda {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.PlantillaMoneda> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PlantillaMoneda
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PlantillaMonedaDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					PlantillaMonedaId,
					Nombre,
					Decripcion,
					MonedaId,
					Secuencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle> _entities = new List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public PlantillaMonedaDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.PlantillaMonedaDetalle();
            }
            public PlantillaMonedaDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.PlantillaMonedaDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.PlantillaMonedaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PlantillaMonedaDetalle Add Method
         /// </summary>
         /// <param name='PlantillaMonedaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Decripcion'></param>
         /// <param name='MonedaId'></param>
         /// <param name='Secuencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.PlantillaMonedaDetalle</returns>
			public Entities.Tables.Dispositivo.PlantillaMonedaDetalle Add(Int64 PlantillaMonedaId,String Nombre,String Decripcion,Int64 MonedaId,Int16 Secuencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.PlantillaMonedaDetalle)base.Add(new Entities.Tables.Dispositivo.PlantillaMonedaDetalle(PlantillaMonedaId,Nombre,Decripcion,MonedaId,Secuencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.PlantillaMonedaDetalle>().ToList<Entities.Tables.Dispositivo.PlantillaMonedaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.PlantillaMonedaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.PlantillaMonedaDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle> Items(Int64? Id,Int64? PlantillaMonedaId,String Nombre,String Decripcion,Int64? MonedaId,Int16? Secuencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (PlantillaMonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PlantillaMonedaId, sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PlantillaMonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Decripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Decripcion, sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Decripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Secuencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.PlantillaMonedaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.PlantillaMonedaDetalle Add(Entities.Tables.Dispositivo.PlantillaMonedaDetalle item)
            {
                return (Entities.Tables.Dispositivo.PlantillaMonedaDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.PlantillaMonedaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.PlantillaMonedaDetalle AddOrUpdate(Entities.Tables.Dispositivo.PlantillaMonedaDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.PlantillaMonedaDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.PlantillaMonedaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.PlantillaMonedaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.PlantillaMonedaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 plantillamonedaid,String nombre,String decripcion,Int64 monedaid,Int16 secuencia,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.PlantillaMonedaDetalle {Id = id,PlantillaMonedaId = plantillamonedaid,Nombre = nombre,Decripcion = decripcion,MonedaId = monedaid,Secuencia = secuencia,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.PlantillaMonedaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.PlantillaMonedaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.PlantillaMonedaDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.PlantillaMonedaDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.PlantillaMonedaDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PlantillaMonedaDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoConfiguracionDepositario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Clave,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario> _entities = new List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoConfiguracionDepositario() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.TipoConfiguracionDepositario();
            }
            public TipoConfiguracionDepositario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.TipoConfiguracionDepositario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.TipoConfiguracionDepositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoConfiguracionDepositario Add Method
         /// </summary>
         /// <param name='Clave'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.TipoConfiguracionDepositario</returns>
			public Entities.Tables.Dispositivo.TipoConfiguracionDepositario Add(String Clave,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.TipoConfiguracionDepositario)base.Add(new Entities.Tables.Dispositivo.TipoConfiguracionDepositario(Clave,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.TipoConfiguracionDepositario>().ToList<Entities.Tables.Dispositivo.TipoConfiguracionDepositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoConfiguracionDepositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoConfiguracionDepositario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Clave"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario> Items(Int64? Id,String Clave,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Clave, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.TipoConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoConfiguracionDepositario Add(Entities.Tables.Dispositivo.TipoConfiguracionDepositario item)
            {
                return (Entities.Tables.Dispositivo.TipoConfiguracionDepositario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.TipoConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoConfiguracionDepositario AddOrUpdate(Entities.Tables.Dispositivo.TipoConfiguracionDepositario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.TipoConfiguracionDepositario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.TipoConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.TipoConfiguracionDepositario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.TipoConfiguracionDepositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Clave"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String clave,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.TipoConfiguracionDepositario {Id = id,Clave = clave,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.TipoConfiguracionDepositario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.TipoConfiguracionDepositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.TipoConfiguracionDepositario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.TipoConfiguracionDepositario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.TipoConfiguracionDepositario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoConfiguracionDepositario
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoContadora : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					ModeloId,
					Nombre,
					Descripcion,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.TipoContadora> _entities = new List<Entities.Tables.Dispositivo.TipoContadora>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoContadora() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.TipoContadora();
            }
            public TipoContadora(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.TipoContadora();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.TipoContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoContadora Add Method
         /// </summary>
         /// <param name='ModeloId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.TipoContadora</returns>
			public Entities.Tables.Dispositivo.TipoContadora Add(Int64 ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.TipoContadora)base.Add(new Entities.Tables.Dispositivo.TipoContadora(ModeloId,Nombre,Descripcion,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.TipoContadora> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.TipoContadora>().ToList<Entities.Tables.Dispositivo.TipoContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoContadora items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoContadora> Items(Int64? Id,Int64? ModeloId,String Nombre,String Descripcion,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ModeloId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PortName, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Parity, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DataBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadBufferSize, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.StopBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadTimeout, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Handshake, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BaudRate, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RtsEnable, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.TipoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoContadora Add(Entities.Tables.Dispositivo.TipoContadora item)
            {
                return (Entities.Tables.Dispositivo.TipoContadora)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.TipoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoContadora AddOrUpdate(Entities.Tables.Dispositivo.TipoContadora item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.TipoContadora)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.TipoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.TipoContadora item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.TipoContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 modeloid,String nombre,String descripcion,String portname,Int32 parity,Int32 databits,Int32 readbuffersize,Int32 stopbits,Int32 readtimeout,Int32 handshake,Int32 baudrate,Boolean rtsenable,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.TipoContadora {Id = id,ModeloId = modeloid,Nombre = nombre,Descripcion = descripcion,PortName = portname,Parity = parity,DataBits = databits,ReadBufferSize = readbuffersize,StopBits = stopbits,ReadTimeout = readtimeout,Handshake = handshake,BaudRate = baudrate,RtsEnable = rtsenable,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.TipoContadora
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.TipoContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.TipoContadora with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.TipoContadora {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.TipoContadora> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoContadora
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoPlaca : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					ModeloId,
					Nombre,
					Descripcion,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					SensorA,
					BitSensorA,
					SensorB,
					BitSensorB,
					SensorC,
					BitSensorC,
					SensorD,
					BitSensorD,
					SensorL,
					BitSensorL,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Dispositivo.TipoPlaca> _entities = new List<Entities.Tables.Dispositivo.TipoPlaca>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoPlaca() : base()
            {
                base._dataItem = new Entities.Tables.Dispositivo.TipoPlaca();
            }
            public TipoPlaca(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Dispositivo.TipoPlaca();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Dispositivo.TipoPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoPlaca Add Method
         /// </summary>
         /// <param name='ModeloId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='SensorA'></param>
         /// <param name='BitSensorA'></param>
         /// <param name='SensorB'></param>
         /// <param name='BitSensorB'></param>
         /// <param name='SensorC'></param>
         /// <param name='BitSensorC'></param>
         /// <param name='SensorD'></param>
         /// <param name='BitSensorD'></param>
         /// <param name='SensorL'></param>
         /// <param name='BitSensorL'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Dispositivo.TipoPlaca</returns>
			public Entities.Tables.Dispositivo.TipoPlaca Add(Int64 ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Dispositivo.TipoPlaca)base.Add(new Entities.Tables.Dispositivo.TipoPlaca(ModeloId,Nombre,Descripcion,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,SensorA,BitSensorA,SensorB,BitSensorB,SensorC,BitSensorC,SensorD,BitSensorD,SensorL,BitSensorL,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Dispositivo.TipoPlaca> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Dispositivo.TipoPlaca>().ToList<Entities.Tables.Dispositivo.TipoPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Dispositivo.TipoPlaca items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Dispositivo.TipoPlaca> Items(Int64? Id,Int64? ModeloId,String Nombre,String Descripcion,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? SensorA,Int16? BitSensorA,Boolean? SensorB,Int16? BitSensorB,Boolean? SensorC,Int16? BitSensorC,Boolean? SensorD,Int16? BitSensorD,Boolean? SensorL,Int16? BitSensorL,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ModeloId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PortName, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Parity, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DataBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadBufferSize, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.StopBits, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ReadTimeout, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Handshake, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BaudRate, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RtsEnable, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (SensorA != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorA, sqlEnum.OperandEnum.Equal, SensorA);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorA, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                   
                }
                if (BitSensorA != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorA, sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorA, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                   
                }
                if (SensorB != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorB, sqlEnum.OperandEnum.Equal, SensorB);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorB, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                   
                }
                if (BitSensorB != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorB, sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorB, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                   
                }
                if (SensorC != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorC, sqlEnum.OperandEnum.Equal, SensorC);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorC, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                   
                }
                if (BitSensorC != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorC, sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorC, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                   
                }
                if (SensorD != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorD, sqlEnum.OperandEnum.Equal, SensorD);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorD, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                   
                }
                if (BitSensorD != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorD, sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorD, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                   
                }
                if (SensorL != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorL, sqlEnum.OperandEnum.Equal, SensorL);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SensorL, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                   
                }
                if (BitSensorL != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorL, sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.BitSensorL, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Dispositivo.TipoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoPlaca Add(Entities.Tables.Dispositivo.TipoPlaca item)
            {
                return (Entities.Tables.Dispositivo.TipoPlaca)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Dispositivo.TipoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Dispositivo.TipoPlaca AddOrUpdate(Entities.Tables.Dispositivo.TipoPlaca item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Dispositivo.TipoPlaca)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Dispositivo.TipoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Dispositivo.TipoPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Dispositivo.TipoPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 modeloid,String nombre,String descripcion,String portname,Int32 parity,Int32 databits,Int32 readbuffersize,Int32 stopbits,Int32 readtimeout,Int32 handshake,Int32 baudrate,Boolean rtsenable,Boolean sensora,Int16 bitsensora,Boolean sensorb,Int16 bitsensorb,Boolean sensorc,Int16 bitsensorc,Boolean sensord,Int16 bitsensord,Boolean sensorl,Int16 bitsensorl,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Dispositivo.TipoPlaca {Id = id,ModeloId = modeloid,Nombre = nombre,Descripcion = descripcion,PortName = portname,Parity = parity,DataBits = databits,ReadBufferSize = readbuffersize,StopBits = stopbits,ReadTimeout = readtimeout,Handshake = handshake,BaudRate = baudrate,RtsEnable = rtsenable,SensorA = sensora,BitSensorA = bitsensora,SensorB = sensorb,BitSensorB = bitsensorb,SensorC = sensorc,BitSensorC = bitsensorc,SensorD = sensord,BitSensorD = bitsensord,SensorL = sensorl,BitSensorL = bitsensorl,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Dispositivo.TipoPlaca
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Dispositivo.TipoPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Dispositivo.TipoPlaca with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Dispositivo.TipoPlaca {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Dispositivo.TipoPlaca> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoPlaca
	} //namespace Permaquim.Depositary.Business.Tables.Dispositivo
	namespace Permaquim.Depositary.Business.Tables.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Esquema : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Estilo.Esquema> _entities = new List<Entities.Tables.Estilo.Esquema>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Esquema() : base()
            {
                base._dataItem = new Entities.Tables.Estilo.Esquema();
            }
            public Esquema(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Estilo.Esquema();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Estilo.Esquema item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Esquema Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Estilo.Esquema</returns>
			public Entities.Tables.Estilo.Esquema Add(String Nombre,String Descripcion,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Estilo.Esquema)base.Add(new Entities.Tables.Estilo.Esquema(Nombre,Descripcion,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Estilo.Esquema> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Estilo.Esquema>().ToList<Entities.Tables.Estilo.Esquema>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.Esquema items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.Esquema> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.Esquema items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.Esquema> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsDefault, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Estilo.Esquema
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.Esquema Add(Entities.Tables.Estilo.Esquema item)
            {
                return (Entities.Tables.Estilo.Esquema)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Estilo.Esquema
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.Esquema AddOrUpdate(Entities.Tables.Estilo.Esquema item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Estilo.Esquema)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Estilo.Esquema
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Estilo.Esquema item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Estilo.Esquema with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean esdefault,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Estilo.Esquema {Id = id,Nombre = nombre,Descripcion = descripcion,EsDefault = esdefault,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Estilo.Esquema
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Estilo.Esquema item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Estilo.Esquema with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Estilo.Esquema {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Estilo.Esquema> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Esquema
	} //namespace Permaquim.Depositary.Business.Tables.Estilo
	namespace Permaquim.Depositary.Business.Tables.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EsquemaId,
					AplicacionId,
					TipoEsquemaDetalleId,
					Nombre,
					Descripcion,
					Valor,
					Imagen,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Estilo.EsquemaDetalle> _entities = new List<Entities.Tables.Estilo.EsquemaDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public EsquemaDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Estilo.EsquemaDetalle();
            }
            public EsquemaDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Estilo.EsquemaDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Estilo.EsquemaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaDetalle Add Method
         /// </summary>
         /// <param name='EsquemaId'></param>
         /// <param name='AplicacionId'></param>
         /// <param name='TipoEsquemaDetalleId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Valor'></param>
         /// <param name='Imagen'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Estilo.EsquemaDetalle</returns>
			public Entities.Tables.Estilo.EsquemaDetalle Add(Int64 EsquemaId,Int64 AplicacionId,Int64 TipoEsquemaDetalleId,String Nombre,String Descripcion,String Valor,String Imagen,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Estilo.EsquemaDetalle)base.Add(new Entities.Tables.Estilo.EsquemaDetalle(EsquemaId,AplicacionId,TipoEsquemaDetalleId,Nombre,Descripcion,Valor,Imagen,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Estilo.EsquemaDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Estilo.EsquemaDetalle>().ToList<Entities.Tables.Estilo.EsquemaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.EsquemaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.EsquemaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.EsquemaDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoEsquemaDetalleId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Valor"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.EsquemaDetalle> Items(Int64? Id,Int64? EsquemaId,Int64? AplicacionId,Int64? TipoEsquemaDetalleId,String Nombre,String Descripcion,String Valor,String Imagen,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EsquemaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaId, sqlEnum.OperandEnum.Equal, EsquemaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsquemaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsquemaId);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (TipoEsquemaDetalleId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoEsquemaDetalleId, sqlEnum.OperandEnum.Equal, TipoEsquemaDetalleId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoEsquemaDetalleId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoEsquemaDetalleId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Imagen, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Estilo.EsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.EsquemaDetalle Add(Entities.Tables.Estilo.EsquemaDetalle item)
            {
                return (Entities.Tables.Estilo.EsquemaDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Estilo.EsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.EsquemaDetalle AddOrUpdate(Entities.Tables.Estilo.EsquemaDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Estilo.EsquemaDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Estilo.EsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Estilo.EsquemaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Estilo.EsquemaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoEsquemaDetalleId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Valor"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 esquemaid,Int64 aplicacionid,Int64 tipoesquemadetalleid,String nombre,String descripcion,String valor,String imagen,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Estilo.EsquemaDetalle {Id = id,EsquemaId = esquemaid,AplicacionId = aplicacionid,TipoEsquemaDetalleId = tipoesquemadetalleid,Nombre = nombre,Descripcion = descripcion,Valor = valor,Imagen = imagen,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Estilo.EsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Estilo.EsquemaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Estilo.EsquemaDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Estilo.EsquemaDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Estilo.EsquemaDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Estilo
	namespace Permaquim.Depositary.Business.Tables.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoEsquemaDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Estilo.TipoEsquemaDetalle> _entities = new List<Entities.Tables.Estilo.TipoEsquemaDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoEsquemaDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Estilo.TipoEsquemaDetalle();
            }
            public TipoEsquemaDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Estilo.TipoEsquemaDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Estilo.TipoEsquemaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoEsquemaDetalle Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Estilo.TipoEsquemaDetalle</returns>
			public Entities.Tables.Estilo.TipoEsquemaDetalle Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Estilo.TipoEsquemaDetalle)base.Add(new Entities.Tables.Estilo.TipoEsquemaDetalle(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Estilo.TipoEsquemaDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Estilo.TipoEsquemaDetalle>().ToList<Entities.Tables.Estilo.TipoEsquemaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.TipoEsquemaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.TipoEsquemaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Estilo.TipoEsquemaDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Estilo.TipoEsquemaDetalle> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Estilo.TipoEsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.TipoEsquemaDetalle Add(Entities.Tables.Estilo.TipoEsquemaDetalle item)
            {
                return (Entities.Tables.Estilo.TipoEsquemaDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Estilo.TipoEsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Estilo.TipoEsquemaDetalle AddOrUpdate(Entities.Tables.Estilo.TipoEsquemaDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Estilo.TipoEsquemaDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Estilo.TipoEsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Estilo.TipoEsquemaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Estilo.TipoEsquemaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Estilo.TipoEsquemaDetalle {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Estilo.TipoEsquemaDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Estilo.TipoEsquemaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Estilo.TipoEsquemaDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Estilo.TipoEsquemaDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Estilo.TipoEsquemaDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoEsquemaDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Estilo
	namespace Permaquim.Depositary.Business.Tables.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Ciudad : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					ProvinciaId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Geografia.Ciudad> _entities = new List<Entities.Tables.Geografia.Ciudad>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Ciudad() : base()
            {
                base._dataItem = new Entities.Tables.Geografia.Ciudad();
            }
            public Ciudad(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Geografia.Ciudad();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Geografia.Ciudad item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Ciudad Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='ProvinciaId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Geografia.Ciudad</returns>
			public Entities.Tables.Geografia.Ciudad Add(String Nombre,String Descripcion,Int64 ProvinciaId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Geografia.Ciudad)base.Add(new Entities.Tables.Geografia.Ciudad(Nombre,Descripcion,ProvinciaId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Geografia.Ciudad> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Geografia.Ciudad>().ToList<Entities.Tables.Geografia.Ciudad>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Ciudad items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Ciudad> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Ciudad items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ProvinciaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Ciudad> Items(Int64? Id,String Nombre,String Descripcion,Int64? ProvinciaId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (ProvinciaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ProvinciaId, sqlEnum.OperandEnum.Equal, ProvinciaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ProvinciaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ProvinciaId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Geografia.Ciudad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Ciudad Add(Entities.Tables.Geografia.Ciudad item)
            {
                return (Entities.Tables.Geografia.Ciudad)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Geografia.Ciudad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Ciudad AddOrUpdate(Entities.Tables.Geografia.Ciudad item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Geografia.Ciudad)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Geografia.Ciudad
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Geografia.Ciudad item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Geografia.Ciudad with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ProvinciaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 provinciaid,String codigoexterno,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Geografia.Ciudad {Id = id,Nombre = nombre,Descripcion = descripcion,ProvinciaId = provinciaid,CodigoExterno = codigoexterno,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Geografia.Ciudad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Geografia.Ciudad item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Geografia.Ciudad with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Geografia.Ciudad {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Geografia.Ciudad> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Ciudad
	} //namespace Permaquim.Depositary.Business.Tables.Geografia
	namespace Permaquim.Depositary.Business.Tables.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class CodigoPostal : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					CiudadId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Geografia.CodigoPostal> _entities = new List<Entities.Tables.Geografia.CodigoPostal>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public CodigoPostal() : base()
            {
                base._dataItem = new Entities.Tables.Geografia.CodigoPostal();
            }
            public CodigoPostal(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Geografia.CodigoPostal();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Geografia.CodigoPostal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// CodigoPostal Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='CiudadId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Geografia.CodigoPostal</returns>
			public Entities.Tables.Geografia.CodigoPostal Add(String Nombre,String Descripcion,Int64 CiudadId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Geografia.CodigoPostal)base.Add(new Entities.Tables.Geografia.CodigoPostal(Nombre,Descripcion,CiudadId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Geografia.CodigoPostal> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Geografia.CodigoPostal>().ToList<Entities.Tables.Geografia.CodigoPostal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.CodigoPostal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.CodigoPostal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.CodigoPostal items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CiudadId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.CodigoPostal> Items(Int64? Id,String Nombre,String Descripcion,Int64? CiudadId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (CiudadId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CiudadId, sqlEnum.OperandEnum.Equal, CiudadId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CiudadId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CiudadId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Geografia.CodigoPostal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.CodigoPostal Add(Entities.Tables.Geografia.CodigoPostal item)
            {
                return (Entities.Tables.Geografia.CodigoPostal)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Geografia.CodigoPostal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.CodigoPostal AddOrUpdate(Entities.Tables.Geografia.CodigoPostal item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Geografia.CodigoPostal)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Geografia.CodigoPostal
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Geografia.CodigoPostal item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Geografia.CodigoPostal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CiudadId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 ciudadid,String codigoexterno,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Geografia.CodigoPostal {Id = id,Nombre = nombre,Descripcion = descripcion,CiudadId = ciudadid,CodigoExterno = codigoexterno,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Geografia.CodigoPostal
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Geografia.CodigoPostal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Geografia.CodigoPostal with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Geografia.CodigoPostal {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Geografia.CodigoPostal> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class CodigoPostal
	} //namespace Permaquim.Depositary.Business.Tables.Geografia
	namespace Permaquim.Depositary.Business.Tables.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Pais : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Geografia.Pais> _entities = new List<Entities.Tables.Geografia.Pais>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Pais() : base()
            {
                base._dataItem = new Entities.Tables.Geografia.Pais();
            }
            public Pais(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Geografia.Pais();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Geografia.Pais item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Pais Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Geografia.Pais</returns>
			public Entities.Tables.Geografia.Pais Add(String Nombre,String Descripcion,String Codigo,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Geografia.Pais)base.Add(new Entities.Tables.Geografia.Pais(Nombre,Descripcion,Codigo,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Geografia.Pais> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Geografia.Pais>().ToList<Entities.Tables.Geografia.Pais>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Pais items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Pais> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Pais items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Pais> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Codigo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Geografia.Pais
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Pais Add(Entities.Tables.Geografia.Pais item)
            {
                return (Entities.Tables.Geografia.Pais)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Geografia.Pais
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Pais AddOrUpdate(Entities.Tables.Geografia.Pais item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Geografia.Pais)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Geografia.Pais
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Geografia.Pais item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Geografia.Pais with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String codigo,String codigoexterno,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Geografia.Pais {Id = id,Nombre = nombre,Descripcion = descripcion,Codigo = codigo,CodigoExterno = codigoexterno,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Geografia.Pais
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Geografia.Pais item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Geografia.Pais with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Geografia.Pais {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Geografia.Pais> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Pais
	} //namespace Permaquim.Depositary.Business.Tables.Geografia
	namespace Permaquim.Depositary.Business.Tables.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Provincia : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					PaisId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Geografia.Provincia> _entities = new List<Entities.Tables.Geografia.Provincia>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Provincia() : base()
            {
                base._dataItem = new Entities.Tables.Geografia.Provincia();
            }
            public Provincia(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Geografia.Provincia();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Geografia.Provincia item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Provincia Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PaisId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Geografia.Provincia</returns>
			public Entities.Tables.Geografia.Provincia Add(String Nombre,String Descripcion,Int64 PaisId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Geografia.Provincia)base.Add(new Entities.Tables.Geografia.Provincia(Nombre,Descripcion,PaisId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Geografia.Provincia> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Geografia.Provincia>().ToList<Entities.Tables.Geografia.Provincia>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Provincia items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Provincia> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Provincia items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PaisId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Provincia> Items(Int64? Id,String Nombre,String Descripcion,Int64? PaisId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PaisId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoExterno, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Geografia.Provincia
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Provincia Add(Entities.Tables.Geografia.Provincia item)
            {
                return (Entities.Tables.Geografia.Provincia)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Geografia.Provincia
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Provincia AddOrUpdate(Entities.Tables.Geografia.Provincia item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Geografia.Provincia)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Geografia.Provincia
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Geografia.Provincia item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Geografia.Provincia with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PaisId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 paisid,String codigoexterno,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Geografia.Provincia {Id = id,Nombre = nombre,Descripcion = descripcion,PaisId = paisid,CodigoExterno = codigoexterno,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Geografia.Provincia
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Geografia.Provincia item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Geografia.Provincia with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Geografia.Provincia {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Geografia.Provincia> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Provincia
	} //namespace Permaquim.Depositary.Business.Tables.Geografia
	namespace Permaquim.Depositary.Business.Tables.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Zona : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Geografia.Zona> _entities = new List<Entities.Tables.Geografia.Zona>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Zona() : base()
            {
                base._dataItem = new Entities.Tables.Geografia.Zona();
            }
            public Zona(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Geografia.Zona();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Geografia.Zona item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Zona Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Geografia.Zona</returns>
			public Entities.Tables.Geografia.Zona Add(String Nombre,String Descripcion,String Codigo,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Geografia.Zona)base.Add(new Entities.Tables.Geografia.Zona(Nombre,Descripcion,Codigo,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Geografia.Zona> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Geografia.Zona>().ToList<Entities.Tables.Geografia.Zona>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Zona items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Zona> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Geografia.Zona items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Geografia.Zona> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Codigo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Geografia.Zona
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Zona Add(Entities.Tables.Geografia.Zona item)
            {
                return (Entities.Tables.Geografia.Zona)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Geografia.Zona
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Geografia.Zona AddOrUpdate(Entities.Tables.Geografia.Zona item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Geografia.Zona)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Geografia.Zona
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Geografia.Zona item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Geografia.Zona with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String codigo,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Geografia.Zona {Id = id,Nombre = nombre,Descripcion = descripcion,Codigo = codigo,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Geografia.Zona
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Geografia.Zona item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Geografia.Zona with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Geografia.Zona {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Geografia.Zona> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Zona
	} //namespace Permaquim.Depositary.Business.Tables.Geografia
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class CierreDiario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Fecha,
					DepositarioId,
					SesionId,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.CierreDiario> _entities = new List<Entities.Tables.Operacion.CierreDiario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public CierreDiario() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.CierreDiario();
            }
            public CierreDiario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.CierreDiario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.CierreDiario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// CierreDiario Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Fecha'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='SesionId'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.CierreDiario</returns>
			public Entities.Tables.Operacion.CierreDiario Add(String Nombre,DateTime? Fecha,Int64? DepositarioId,Int64 SesionId,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.CierreDiario)base.Add(new Entities.Tables.Operacion.CierreDiario(Nombre,Fecha,DepositarioId,SesionId,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.CierreDiario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.CierreDiario>().ToList<Entities.Tables.Operacion.CierreDiario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.CierreDiario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.CierreDiario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.CierreDiario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Fecha"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SesionId"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.CierreDiario> Items(Int64? Id,String Nombre,DateTime? Fecha,Int64? DepositarioId,Int64? SesionId,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SesionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.CierreDiario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.CierreDiario Add(Entities.Tables.Operacion.CierreDiario item)
            {
                return (Entities.Tables.Operacion.CierreDiario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.CierreDiario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.CierreDiario AddOrUpdate(Entities.Tables.Operacion.CierreDiario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.CierreDiario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.CierreDiario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.CierreDiario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.CierreDiario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Fecha"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SesionId"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,DateTime? fecha,Int64? depositarioid,Int64 sesionid,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.CierreDiario {Id = id,Nombre = nombre,Fecha = fecha,DepositarioId = depositarioid,SesionId = sesionid,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.CierreDiario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.CierreDiario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.CierreDiario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.CierreDiario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.CierreDiario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class CierreDiario
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Contenedor : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					DepositarioId,
					TipoId,
					Identificador,
					FechaApertura,
					FechaCierre,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.Contenedor> _entities = new List<Entities.Tables.Operacion.Contenedor>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Contenedor() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.Contenedor();
            }
            public Contenedor(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.Contenedor();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.Contenedor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Contenedor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='TipoId'></param>
         /// <param name='Identificador'></param>
         /// <param name='FechaApertura'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.Contenedor</returns>
			public Entities.Tables.Operacion.Contenedor Add(String Nombre,Int64 DepositarioId,Int64 TipoId,String Identificador,DateTime FechaApertura,DateTime? FechaCierre,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.Contenedor)base.Add(new Entities.Tables.Operacion.Contenedor(Nombre,DepositarioId,TipoId,Identificador,FechaApertura,FechaCierre,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.Contenedor> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.Contenedor>().ToList<Entities.Tables.Operacion.Contenedor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Contenedor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Contenedor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Contenedor items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Identificador"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Contenedor> Items(Int64? Id,String Nombre,Int64? DepositarioId,Int64? TipoId,String Identificador,DateTime? FechaApertura,DateTime? FechaCierre,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Identificador != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Identificador, sqlEnum.OperandEnum.Equal, Identificador);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Identificador, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Identificador);
                    }
                   
                }
                if (FechaApertura != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaApertura, sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaApertura, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCierre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.Contenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Contenedor Add(Entities.Tables.Operacion.Contenedor item)
            {
                return (Entities.Tables.Operacion.Contenedor)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.Contenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Contenedor AddOrUpdate(Entities.Tables.Operacion.Contenedor item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.Contenedor)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.Contenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.Contenedor item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.Contenedor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Identificador"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 depositarioid,Int64 tipoid,String identificador,DateTime fechaapertura,DateTime? fechacierre,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.Contenedor {Id = id,Nombre = nombre,DepositarioId = depositarioid,TipoId = tipoid,Identificador = identificador,FechaApertura = fechaapertura,FechaCierre = fechacierre,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.Contenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.Contenedor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.Contenedor with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.Contenedor {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.Contenedor> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Contenedor
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Evento : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					SesionId,
					DepositarioId,
					Mensaje,
					Valor,
					Fecha
				}
         protected List<Entities.Tables.Operacion.Evento> _entities = new List<Entities.Tables.Operacion.Evento>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Evento() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.Evento();
            }
            public Evento(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.Evento();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.Evento item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Evento Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='SesionId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='Mensaje'></param>
         /// <param name='Valor'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Tables.Operacion.Evento</returns>
			public Entities.Tables.Operacion.Evento Add(Int64 TipoId,Int64? SesionId,Int64 DepositarioId,String Mensaje,String Valor,DateTime Fecha) 
			{
			  return (Entities.Tables.Operacion.Evento)base.Add(new Entities.Tables.Operacion.Evento(TipoId,SesionId,DepositarioId,Mensaje,Valor,Fecha));
			}
            public new List<Entities.Tables.Operacion.Evento> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.Evento>().ToList<Entities.Tables.Operacion.Evento>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Evento items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Evento> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Evento items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="SesionId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Mensaje"></param>
            /// <param name="Valor"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Evento> Items(Int64? Id,Int64? TipoId,Int64? SesionId,Int64? DepositarioId,String Mensaje,String Valor,DateTime? Fecha)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SesionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Mensaje != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mensaje, sqlEnum.OperandEnum.Equal, Mensaje);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Mensaje, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Mensaje);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.Evento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Evento Add(Entities.Tables.Operacion.Evento item)
            {
                return (Entities.Tables.Operacion.Evento)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.Evento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Evento AddOrUpdate(Entities.Tables.Operacion.Evento item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.Evento)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.Evento
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.Evento item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.Evento with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="SesionId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Mensaje"></param>
            /// <param name="Valor"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64? sesionid,Int64 depositarioid,String mensaje,String valor,DateTime fecha)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.Evento {Id = id,TipoId = tipoid,SesionId = sesionid,DepositarioId = depositarioid,Mensaje = mensaje,Valor = valor,Fecha = fecha});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.Evento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.Evento item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.Evento with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.Evento {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.Evento> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Evento
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sesion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					UsuarioId,
					FechaInicio,
					FechaCierre,
					EsCierreAutomatico
				}
         protected List<Entities.Tables.Operacion.Sesion> _entities = new List<Entities.Tables.Operacion.Sesion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Sesion() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.Sesion();
            }
            public Sesion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.Sesion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.Sesion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sesion Add Method
         /// </summary>
         /// <param name='DepositarioId'></param>
         /// <param name='UsuarioId'></param>
         /// <param name='FechaInicio'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='EsCierreAutomatico'></param>
         /// <returns>Entities.Tables.Operacion.Sesion</returns>
			public Entities.Tables.Operacion.Sesion Add(Int64? DepositarioId,Int64 UsuarioId,DateTime FechaInicio,DateTime? FechaCierre,Boolean? EsCierreAutomatico) 
			{
			  return (Entities.Tables.Operacion.Sesion)base.Add(new Entities.Tables.Operacion.Sesion(DepositarioId,UsuarioId,FechaInicio,FechaCierre,EsCierreAutomatico));
			}
            public new List<Entities.Tables.Operacion.Sesion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.Sesion>().ToList<Entities.Tables.Operacion.Sesion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Sesion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Sesion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Sesion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="FechaInicio"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="EsCierreAutomatico"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Sesion> Items(Int64? Id,Int64? DepositarioId,Int64? UsuarioId,DateTime? FechaInicio,DateTime? FechaCierre,Boolean? EsCierreAutomatico)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (FechaInicio != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaInicio, sqlEnum.OperandEnum.Equal, FechaInicio);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaInicio, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaInicio);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCierre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (EsCierreAutomatico != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsCierreAutomatico, sqlEnum.OperandEnum.Equal, EsCierreAutomatico);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsCierreAutomatico, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsCierreAutomatico);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.Sesion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Sesion Add(Entities.Tables.Operacion.Sesion item)
            {
                return (Entities.Tables.Operacion.Sesion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.Sesion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Sesion AddOrUpdate(Entities.Tables.Operacion.Sesion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.Sesion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.Sesion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.Sesion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.Sesion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="FechaInicio"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="EsCierreAutomatico"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64? depositarioid,Int64 usuarioid,DateTime fechainicio,DateTime? fechacierre,Boolean? escierreautomatico)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.Sesion {Id = id,DepositarioId = depositarioid,UsuarioId = usuarioid,FechaInicio = fechainicio,FechaCierre = fechacierre,EsCierreAutomatico = escierreautomatico});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.Sesion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.Sesion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.Sesion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.Sesion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.Sesion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sesion
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoContenedor : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Capacidad,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.TipoContenedor> _entities = new List<Entities.Tables.Operacion.TipoContenedor>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoContenedor() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TipoContenedor();
            }
            public TipoContenedor(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TipoContenedor();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TipoContenedor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoContenedor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Capacidad'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.TipoContenedor</returns>
			public Entities.Tables.Operacion.TipoContenedor Add(String Nombre,String Descripcion,Int32 Capacidad,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.TipoContenedor)base.Add(new Entities.Tables.Operacion.TipoContenedor(Nombre,Descripcion,Capacidad,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.TipoContenedor> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TipoContenedor>().ToList<Entities.Tables.Operacion.TipoContenedor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoContenedor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoContenedor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoContenedor items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Capacidad"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoContenedor> Items(Int64? Id,String Nombre,String Descripcion,Int32? Capacidad,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Capacidad != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Capacidad, sqlEnum.OperandEnum.Equal, Capacidad);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Capacidad, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Capacidad);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TipoContenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoContenedor Add(Entities.Tables.Operacion.TipoContenedor item)
            {
                return (Entities.Tables.Operacion.TipoContenedor)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TipoContenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoContenedor AddOrUpdate(Entities.Tables.Operacion.TipoContenedor item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TipoContenedor)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TipoContenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TipoContenedor item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TipoContenedor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Capacidad"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int32 capacidad,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TipoContenedor {Id = id,Nombre = nombre,Descripcion = descripcion,Capacidad = capacidad,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TipoContenedor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TipoContenedor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TipoContenedor with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TipoContenedor {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TipoContenedor> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoContenedor
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoEvento : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsBloqueante,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.TipoEvento> _entities = new List<Entities.Tables.Operacion.TipoEvento>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoEvento() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TipoEvento();
            }
            public TipoEvento(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TipoEvento();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TipoEvento item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoEvento Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsBloqueante'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.TipoEvento</returns>
			public Entities.Tables.Operacion.TipoEvento Add(String Nombre,String Descripcion,Boolean EsBloqueante,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.TipoEvento)base.Add(new Entities.Tables.Operacion.TipoEvento(Nombre,Descripcion,EsBloqueante,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.TipoEvento> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TipoEvento>().ToList<Entities.Tables.Operacion.TipoEvento>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoEvento items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoEvento> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoEvento items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsBloqueante"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoEvento> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsBloqueante,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsBloqueante != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsBloqueante, sqlEnum.OperandEnum.Equal, EsBloqueante);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsBloqueante, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsBloqueante);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TipoEvento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoEvento Add(Entities.Tables.Operacion.TipoEvento item)
            {
                return (Entities.Tables.Operacion.TipoEvento)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TipoEvento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoEvento AddOrUpdate(Entities.Tables.Operacion.TipoEvento item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TipoEvento)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TipoEvento
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TipoEvento item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TipoEvento with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsBloqueante"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean esbloqueante,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TipoEvento {Id = id,Nombre = nombre,Descripcion = descripcion,EsBloqueante = esbloqueante,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TipoEvento
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TipoEvento item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TipoEvento with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TipoEvento {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TipoEvento> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoEvento
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoTransaccion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					FuncionId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.TipoTransaccion> _entities = new List<Entities.Tables.Operacion.TipoTransaccion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoTransaccion() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TipoTransaccion();
            }
            public TipoTransaccion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TipoTransaccion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TipoTransaccion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoTransaccion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='FuncionId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.TipoTransaccion</returns>
			public Entities.Tables.Operacion.TipoTransaccion Add(String Nombre,String Descripcion,Int64? FuncionId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.TipoTransaccion)base.Add(new Entities.Tables.Operacion.TipoTransaccion(Nombre,Descripcion,FuncionId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.TipoTransaccion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TipoTransaccion>().ToList<Entities.Tables.Operacion.TipoTransaccion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoTransaccion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoTransaccion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TipoTransaccion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TipoTransaccion> Items(Int64? Id,String Nombre,String Descripcion,Int64? FuncionId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FuncionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TipoTransaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoTransaccion Add(Entities.Tables.Operacion.TipoTransaccion item)
            {
                return (Entities.Tables.Operacion.TipoTransaccion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TipoTransaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TipoTransaccion AddOrUpdate(Entities.Tables.Operacion.TipoTransaccion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TipoTransaccion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TipoTransaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TipoTransaccion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TipoTransaccion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64? funcionid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TipoTransaccion {Id = id,Nombre = nombre,Descripcion = descripcion,FuncionId = funcionid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TipoTransaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TipoTransaccion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TipoTransaccion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TipoTransaccion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TipoTransaccion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoTransaccion
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Transaccion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioId,
					SectorId,
					SucursalId,
					MonedaId,
					UsuarioId,
					UsuarioCuentaId,
					ContenedorId,
					SesionId,
					TurnoId,
					CierreDiarioId,
					TotalValidado,
					TotalAValidar,
					Fecha,
					Finalizada,
					EsDepositoAutomatico,
					OrigenValorId
				}
         protected List<Entities.Tables.Operacion.Transaccion> _entities = new List<Entities.Tables.Operacion.Transaccion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Transaccion() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.Transaccion();
            }
            public Transaccion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.Transaccion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.Transaccion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Transaccion Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='SectorId'></param>
         /// <param name='SucursalId'></param>
         /// <param name='MonedaId'></param>
         /// <param name='UsuarioId'></param>
         /// <param name='UsuarioCuentaId'></param>
         /// <param name='ContenedorId'></param>
         /// <param name='SesionId'></param>
         /// <param name='TurnoId'></param>
         /// <param name='CierreDiarioId'></param>
         /// <param name='TotalValidado'></param>
         /// <param name='TotalAValidar'></param>
         /// <param name='Fecha'></param>
         /// <param name='Finalizada'></param>
         /// <param name='EsDepositoAutomatico'></param>
         /// <param name='OrigenValorId'></param>
         /// <returns>Entities.Tables.Operacion.Transaccion</returns>
			public Entities.Tables.Operacion.Transaccion Add(Int64 TipoId,Int64 DepositarioId,Int64 SectorId,Int64 SucursalId,Int64 MonedaId,Int64 UsuarioId,Int64? UsuarioCuentaId,Int64 ContenedorId,Int64 SesionId,Int64 TurnoId,Int64? CierreDiarioId,Double TotalValidado,Double TotalAValidar,DateTime Fecha,Boolean Finalizada,Boolean EsDepositoAutomatico,Int64 OrigenValorId) 
			{
			  return (Entities.Tables.Operacion.Transaccion)base.Add(new Entities.Tables.Operacion.Transaccion(TipoId,DepositarioId,SectorId,SucursalId,MonedaId,UsuarioId,UsuarioCuentaId,ContenedorId,SesionId,TurnoId,CierreDiarioId,TotalValidado,TotalAValidar,Fecha,Finalizada,EsDepositoAutomatico,OrigenValorId));
			}
            public new List<Entities.Tables.Operacion.Transaccion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.Transaccion>().ToList<Entities.Tables.Operacion.Transaccion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Transaccion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Transaccion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Transaccion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="UsuarioCuentaId"></param>
            /// <param name="ContenedorId"></param>
            /// <param name="SesionId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="TotalValidado"></param>
            /// <param name="TotalAValidar"></param>
            /// <param name="Fecha"></param>
            /// <param name="Finalizada"></param>
            /// <param name="EsDepositoAutomatico"></param>
            /// <param name="OrigenValorId"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Transaccion> Items(Int64? Id,Int64? TipoId,Int64? DepositarioId,Int64? SectorId,Int64? SucursalId,Int64? MonedaId,Int64? UsuarioId,Int64? UsuarioCuentaId,Int64? ContenedorId,Int64? SesionId,Int64? TurnoId,Int64? CierreDiarioId,Double? TotalValidado,Double? TotalAValidar,DateTime? Fecha,Boolean? Finalizada,Boolean? EsDepositoAutomatico,Int64? OrigenValorId)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SucursalId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (UsuarioCuentaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCuentaId, sqlEnum.OperandEnum.Equal, UsuarioCuentaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCuentaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCuentaId);
                    }
                   
                }
                if (ContenedorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContenedorId, sqlEnum.OperandEnum.Equal, ContenedorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ContenedorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ContenedorId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SesionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (TurnoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoId, sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TurnoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                   
                }
                if (CierreDiarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CierreDiarioId, sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CierreDiarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                   
                }
                if (TotalValidado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TotalValidado, sqlEnum.OperandEnum.Equal, TotalValidado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TotalValidado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TotalValidado);
                    }
                   
                }
                if (TotalAValidar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TotalAValidar, sqlEnum.OperandEnum.Equal, TotalAValidar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TotalAValidar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TotalAValidar);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Finalizada != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Finalizada, sqlEnum.OperandEnum.Equal, Finalizada);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Finalizada, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Finalizada);
                    }
                   
                }
                if (EsDepositoAutomatico != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDepositoAutomatico, sqlEnum.OperandEnum.Equal, EsDepositoAutomatico);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsDepositoAutomatico, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsDepositoAutomatico);
                    }
                   
                }
                if (OrigenValorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.OrigenValorId, sqlEnum.OperandEnum.Equal, OrigenValorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.OrigenValorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, OrigenValorId);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.Transaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Transaccion Add(Entities.Tables.Operacion.Transaccion item)
            {
                return (Entities.Tables.Operacion.Transaccion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.Transaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Transaccion AddOrUpdate(Entities.Tables.Operacion.Transaccion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.Transaccion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.Transaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.Transaccion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.Transaccion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="UsuarioCuentaId"></param>
            /// <param name="ContenedorId"></param>
            /// <param name="SesionId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="TotalValidado"></param>
            /// <param name="TotalAValidar"></param>
            /// <param name="Fecha"></param>
            /// <param name="Finalizada"></param>
            /// <param name="EsDepositoAutomatico"></param>
            /// <param name="OrigenValorId"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64 depositarioid,Int64 sectorid,Int64 sucursalid,Int64 monedaid,Int64 usuarioid,Int64? usuariocuentaid,Int64 contenedorid,Int64 sesionid,Int64 turnoid,Int64? cierrediarioid,Double totalvalidado,Double totalavalidar,DateTime fecha,Boolean finalizada,Boolean esdepositoautomatico,Int64 origenvalorid)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.Transaccion {Id = id,TipoId = tipoid,DepositarioId = depositarioid,SectorId = sectorid,SucursalId = sucursalid,MonedaId = monedaid,UsuarioId = usuarioid,UsuarioCuentaId = usuariocuentaid,ContenedorId = contenedorid,SesionId = sesionid,TurnoId = turnoid,CierreDiarioId = cierrediarioid,TotalValidado = totalvalidado,TotalAValidar = totalavalidar,Fecha = fecha,Finalizada = finalizada,EsDepositoAutomatico = esdepositoautomatico,OrigenValorId = origenvalorid});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.Transaccion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.Transaccion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.Transaccion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.Transaccion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.Transaccion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Transaccion
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TransaccionId,
					DenominacionId,
					CantidadUnidades,
					Fecha
				}
         protected List<Entities.Tables.Operacion.TransaccionDetalle> _entities = new List<Entities.Tables.Operacion.TransaccionDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TransaccionDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TransaccionDetalle();
            }
            public TransaccionDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TransaccionDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TransaccionDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionDetalle Add Method
         /// </summary>
         /// <param name='TransaccionId'></param>
         /// <param name='DenominacionId'></param>
         /// <param name='CantidadUnidades'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Tables.Operacion.TransaccionDetalle</returns>
			public Entities.Tables.Operacion.TransaccionDetalle Add(Int64 TransaccionId,Int64 DenominacionId,Int64 CantidadUnidades,DateTime Fecha) 
			{
			  return (Entities.Tables.Operacion.TransaccionDetalle)base.Add(new Entities.Tables.Operacion.TransaccionDetalle(TransaccionId,DenominacionId,CantidadUnidades,Fecha));
			}
            public new List<Entities.Tables.Operacion.TransaccionDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TransaccionDetalle>().ToList<Entities.Tables.Operacion.TransaccionDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="DenominacionId"></param>
            /// <param name="CantidadUnidades"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionDetalle> Items(Int64? Id,Int64? TransaccionId,Int64? DenominacionId,Int64? CantidadUnidades,DateTime? Fecha)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TransaccionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TransaccionId, sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TransaccionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                   
                }
                if (DenominacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DenominacionId, sqlEnum.OperandEnum.Equal, DenominacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DenominacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DenominacionId);
                    }
                   
                }
                if (CantidadUnidades != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadUnidades, sqlEnum.OperandEnum.Equal, CantidadUnidades);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CantidadUnidades, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CantidadUnidades);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TransaccionDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionDetalle Add(Entities.Tables.Operacion.TransaccionDetalle item)
            {
                return (Entities.Tables.Operacion.TransaccionDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TransaccionDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionDetalle AddOrUpdate(Entities.Tables.Operacion.TransaccionDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TransaccionDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TransaccionDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TransaccionDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TransaccionDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="DenominacionId"></param>
            /// <param name="CantidadUnidades"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 transaccionid,Int64 denominacionid,Int64 cantidadunidades,DateTime fecha)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TransaccionDetalle {Id = id,TransaccionId = transaccionid,DenominacionId = denominacionid,CantidadUnidades = cantidadunidades,Fecha = fecha});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TransaccionDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TransaccionDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TransaccionDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TransaccionDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TransaccionDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionSobre : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TransaccionId,
					CodigoSobre,
					Fecha
				}
         protected List<Entities.Tables.Operacion.TransaccionSobre> _entities = new List<Entities.Tables.Operacion.TransaccionSobre>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TransaccionSobre() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TransaccionSobre();
            }
            public TransaccionSobre(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TransaccionSobre();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TransaccionSobre item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionSobre Add Method
         /// </summary>
         /// <param name='TransaccionId'></param>
         /// <param name='CodigoSobre'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Tables.Operacion.TransaccionSobre</returns>
			public Entities.Tables.Operacion.TransaccionSobre Add(Int64 TransaccionId,String CodigoSobre,DateTime Fecha) 
			{
			  return (Entities.Tables.Operacion.TransaccionSobre)base.Add(new Entities.Tables.Operacion.TransaccionSobre(TransaccionId,CodigoSobre,Fecha));
			}
            public new List<Entities.Tables.Operacion.TransaccionSobre> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TransaccionSobre>().ToList<Entities.Tables.Operacion.TransaccionSobre>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionSobre items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionSobre> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionSobre items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="CodigoSobre"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionSobre> Items(Int64? Id,Int64? TransaccionId,String CodigoSobre,DateTime? Fecha)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TransaccionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TransaccionId, sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TransaccionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                   
                }
                if (CodigoSobre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoSobre, sqlEnum.OperandEnum.Equal, CodigoSobre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoSobre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoSobre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TransaccionSobre
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionSobre Add(Entities.Tables.Operacion.TransaccionSobre item)
            {
                return (Entities.Tables.Operacion.TransaccionSobre)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TransaccionSobre
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionSobre AddOrUpdate(Entities.Tables.Operacion.TransaccionSobre item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TransaccionSobre)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TransaccionSobre
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TransaccionSobre item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TransaccionSobre with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="CodigoSobre"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 transaccionid,String codigosobre,DateTime fecha)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TransaccionSobre {Id = id,TransaccionId = transaccionid,CodigoSobre = codigosobre,Fecha = fecha});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TransaccionSobre
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TransaccionSobre item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TransaccionSobre with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TransaccionSobre {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TransaccionSobre> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionSobre
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionSobreDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					SobreId,
					RelacionMonedaTipoValorId,
					CantidadDeclarada,
					ValorDeclarado,
					Fecha
				}
         protected List<Entities.Tables.Operacion.TransaccionSobreDetalle> _entities = new List<Entities.Tables.Operacion.TransaccionSobreDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TransaccionSobreDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TransaccionSobreDetalle();
            }
            public TransaccionSobreDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TransaccionSobreDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TransaccionSobreDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionSobreDetalle Add Method
         /// </summary>
         /// <param name='SobreId'></param>
         /// <param name='RelacionMonedaTipoValorId'></param>
         /// <param name='CantidadDeclarada'></param>
         /// <param name='ValorDeclarado'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Tables.Operacion.TransaccionSobreDetalle</returns>
			public Entities.Tables.Operacion.TransaccionSobreDetalle Add(Int64 SobreId,Int64 RelacionMonedaTipoValorId,Int64 CantidadDeclarada,Double ValorDeclarado,DateTime Fecha) 
			{
			  return (Entities.Tables.Operacion.TransaccionSobreDetalle)base.Add(new Entities.Tables.Operacion.TransaccionSobreDetalle(SobreId,RelacionMonedaTipoValorId,CantidadDeclarada,ValorDeclarado,Fecha));
			}
            public new List<Entities.Tables.Operacion.TransaccionSobreDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TransaccionSobreDetalle>().ToList<Entities.Tables.Operacion.TransaccionSobreDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionSobreDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionSobreDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TransaccionSobreDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SobreId"></param>
            /// <param name="RelacionMonedaTipoValorId"></param>
            /// <param name="CantidadDeclarada"></param>
            /// <param name="ValorDeclarado"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TransaccionSobreDetalle> Items(Int64? Id,Int64? SobreId,Int64? RelacionMonedaTipoValorId,Int64? CantidadDeclarada,Double? ValorDeclarado,DateTime? Fecha)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (SobreId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SobreId, sqlEnum.OperandEnum.Equal, SobreId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SobreId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SobreId);
                    }
                   
                }
                if (RelacionMonedaTipoValorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RelacionMonedaTipoValorId, sqlEnum.OperandEnum.Equal, RelacionMonedaTipoValorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RelacionMonedaTipoValorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RelacionMonedaTipoValorId);
                    }
                   
                }
                if (CantidadDeclarada != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadDeclarada, sqlEnum.OperandEnum.Equal, CantidadDeclarada);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CantidadDeclarada, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CantidadDeclarada);
                    }
                   
                }
                if (ValorDeclarado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ValorDeclarado, sqlEnum.OperandEnum.Equal, ValorDeclarado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ValorDeclarado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ValorDeclarado);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TransaccionSobreDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionSobreDetalle Add(Entities.Tables.Operacion.TransaccionSobreDetalle item)
            {
                return (Entities.Tables.Operacion.TransaccionSobreDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TransaccionSobreDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TransaccionSobreDetalle AddOrUpdate(Entities.Tables.Operacion.TransaccionSobreDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TransaccionSobreDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TransaccionSobreDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TransaccionSobreDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TransaccionSobreDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SobreId"></param>
            /// <param name="RelacionMonedaTipoValorId"></param>
            /// <param name="CantidadDeclarada"></param>
            /// <param name="ValorDeclarado"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 sobreid,Int64 relacionmonedatipovalorid,Int64 cantidaddeclarada,Double valordeclarado,DateTime fecha)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TransaccionSobreDetalle {Id = id,SobreId = sobreid,RelacionMonedaTipoValorId = relacionmonedatipovalorid,CantidadDeclarada = cantidaddeclarada,ValorDeclarado = valordeclarado,Fecha = fecha});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TransaccionSobreDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TransaccionSobreDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TransaccionSobreDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TransaccionSobreDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TransaccionSobreDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionSobreDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Turno : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TurnoDepositarioId,
					DepositarioId,
					SectorId,
					FechaApertura,
					FechaCierre,
					Fecha,
					Secuencia,
					CierreDiarioId,
					Observaciones,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
         protected List<Entities.Tables.Operacion.Turno> _entities = new List<Entities.Tables.Operacion.Turno>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Turno() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.Turno();
            }
            public Turno(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.Turno();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.Turno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Turno Add Method
         /// </summary>
         /// <param name='TurnoDepositarioId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='SectorId'></param>
         /// <param name='FechaApertura'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='Fecha'></param>
         /// <param name='Secuencia'></param>
         /// <param name='CierreDiarioId'></param>
         /// <param name='Observaciones'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Tables.Operacion.Turno</returns>
			public Entities.Tables.Operacion.Turno Add(Int64 TurnoDepositarioId,Int64 DepositarioId,Int64 SectorId,DateTime? FechaApertura,DateTime? FechaCierre,DateTime? Fecha,Int32 Secuencia,Int64? CierreDiarioId,String Observaciones,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Tables.Operacion.Turno)base.Add(new Entities.Tables.Operacion.Turno(TurnoDepositarioId,DepositarioId,SectorId,FechaApertura,FechaCierre,Fecha,Secuencia,CierreDiarioId,Observaciones,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Tables.Operacion.Turno> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.Turno>().ToList<Entities.Tables.Operacion.Turno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Turno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Turno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.Turno items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TurnoDepositarioId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Fecha"></param>
            /// <param name="Secuencia"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="Observaciones"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.Turno> Items(Int64? Id,Int64? TurnoDepositarioId,Int64? DepositarioId,Int64? SectorId,DateTime? FechaApertura,DateTime? FechaCierre,DateTime? Fecha,Int32? Secuencia,Int64? CierreDiarioId,String Observaciones,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TurnoDepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoDepositarioId, sqlEnum.OperandEnum.Equal, TurnoDepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TurnoDepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TurnoDepositarioId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (FechaApertura != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaApertura, sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaApertura, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCierre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Secuencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (CierreDiarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CierreDiarioId, sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CierreDiarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                   
                }
                if (Observaciones != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Observaciones, sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Observaciones, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.Turno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Turno Add(Entities.Tables.Operacion.Turno item)
            {
                return (Entities.Tables.Operacion.Turno)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.Turno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.Turno AddOrUpdate(Entities.Tables.Operacion.Turno item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.Turno)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.Turno
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.Turno item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.Turno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TurnoDepositarioId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Fecha"></param>
            /// <param name="Secuencia"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="Observaciones"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 turnodepositarioid,Int64 depositarioid,Int64 sectorid,DateTime? fechaapertura,DateTime? fechacierre,DateTime? fecha,Int32 secuencia,Int64? cierrediarioid,String observaciones,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion,Boolean habilitado)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.Turno {Id = id,TurnoDepositarioId = turnodepositarioid,DepositarioId = depositarioid,SectorId = sectorid,FechaApertura = fechaapertura,FechaCierre = fechacierre,Fecha = fecha,Secuencia = secuencia,CierreDiarioId = cierrediarioid,Observaciones = observaciones,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion,Habilitado = habilitado});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.Turno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.Turno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.Turno with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.Turno {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.Turno> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Turno
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TurnoUsuario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					TurnoId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Operacion.TurnoUsuario> _entities = new List<Entities.Tables.Operacion.TurnoUsuario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TurnoUsuario() : base()
            {
                base._dataItem = new Entities.Tables.Operacion.TurnoUsuario();
            }
            public TurnoUsuario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Operacion.TurnoUsuario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Operacion.TurnoUsuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TurnoUsuario Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='TurnoId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Operacion.TurnoUsuario</returns>
			public Entities.Tables.Operacion.TurnoUsuario Add(Int64 UsuarioId,Int64 TurnoId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Operacion.TurnoUsuario)base.Add(new Entities.Tables.Operacion.TurnoUsuario(UsuarioId,TurnoId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Operacion.TurnoUsuario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Operacion.TurnoUsuario>().ToList<Entities.Tables.Operacion.TurnoUsuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TurnoUsuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TurnoUsuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Operacion.TurnoUsuario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Operacion.TurnoUsuario> Items(Int64? Id,Int64? UsuarioId,Int64? TurnoId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (TurnoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoId, sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TurnoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Operacion.TurnoUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TurnoUsuario Add(Entities.Tables.Operacion.TurnoUsuario item)
            {
                return (Entities.Tables.Operacion.TurnoUsuario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Operacion.TurnoUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Operacion.TurnoUsuario AddOrUpdate(Entities.Tables.Operacion.TurnoUsuario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Operacion.TurnoUsuario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Operacion.TurnoUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Operacion.TurnoUsuario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Operacion.TurnoUsuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 usuarioid,Int64 turnoid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Operacion.TurnoUsuario {Id = id,UsuarioId = usuarioid,TurnoId = turnoid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Operacion.TurnoUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Operacion.TurnoUsuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Operacion.TurnoUsuario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Operacion.TurnoUsuario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Operacion.TurnoUsuario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TurnoUsuario
	} //namespace Permaquim.Depositary.Business.Tables.Operacion
	namespace Permaquim.Depositary.Business.Tables.Regionalizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Lenguaje : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Cultura,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Regionalizacion.Lenguaje> _entities = new List<Entities.Tables.Regionalizacion.Lenguaje>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Lenguaje() : base()
            {
                base._dataItem = new Entities.Tables.Regionalizacion.Lenguaje();
            }
            public Lenguaje(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Regionalizacion.Lenguaje();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Regionalizacion.Lenguaje item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Lenguaje Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Cultura'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Regionalizacion.Lenguaje</returns>
			public Entities.Tables.Regionalizacion.Lenguaje Add(String Nombre,String Descripcion,String Cultura,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Regionalizacion.Lenguaje)base.Add(new Entities.Tables.Regionalizacion.Lenguaje(Nombre,Descripcion,Cultura,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Regionalizacion.Lenguaje> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Regionalizacion.Lenguaje>().ToList<Entities.Tables.Regionalizacion.Lenguaje>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Regionalizacion.Lenguaje items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Regionalizacion.Lenguaje> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Regionalizacion.Lenguaje items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Cultura"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Regionalizacion.Lenguaje> Items(Int64? Id,String Nombre,String Descripcion,String Cultura,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Cultura != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Cultura, sqlEnum.OperandEnum.Equal, Cultura);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Cultura, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Cultura);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsDefault, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Regionalizacion.Lenguaje
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Regionalizacion.Lenguaje Add(Entities.Tables.Regionalizacion.Lenguaje item)
            {
                return (Entities.Tables.Regionalizacion.Lenguaje)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Regionalizacion.Lenguaje
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Regionalizacion.Lenguaje AddOrUpdate(Entities.Tables.Regionalizacion.Lenguaje item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Regionalizacion.Lenguaje)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Regionalizacion.Lenguaje
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Regionalizacion.Lenguaje item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Regionalizacion.Lenguaje with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Cultura"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String cultura,Boolean esdefault,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Regionalizacion.Lenguaje {Id = id,Nombre = nombre,Descripcion = descripcion,Cultura = cultura,EsDefault = esdefault,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Regionalizacion.Lenguaje
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Regionalizacion.Lenguaje item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Regionalizacion.Lenguaje with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Regionalizacion.Lenguaje {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Regionalizacion.Lenguaje> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Lenguaje
	} //namespace Permaquim.Depositary.Business.Tables.Regionalizacion
	namespace Permaquim.Depositary.Business.Tables.Regionalizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class LenguajeItem : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					LenguajeId,
					Clave,
					Texto,
					Habilitado,
					LargoMaximo,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Regionalizacion.LenguajeItem> _entities = new List<Entities.Tables.Regionalizacion.LenguajeItem>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public LenguajeItem() : base()
            {
                base._dataItem = new Entities.Tables.Regionalizacion.LenguajeItem();
            }
            public LenguajeItem(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Regionalizacion.LenguajeItem();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Regionalizacion.LenguajeItem item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// LenguajeItem Add Method
         /// </summary>
         /// <param name='LenguajeId'></param>
         /// <param name='Clave'></param>
         /// <param name='Texto'></param>
         /// <param name='Habilitado'></param>
         /// <param name='LargoMaximo'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Regionalizacion.LenguajeItem</returns>
			public Entities.Tables.Regionalizacion.LenguajeItem Add(Int64 LenguajeId,String Clave,String Texto,Boolean Habilitado,Int32 LargoMaximo,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Regionalizacion.LenguajeItem)base.Add(new Entities.Tables.Regionalizacion.LenguajeItem(LenguajeId,Clave,Texto,Habilitado,LargoMaximo,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Regionalizacion.LenguajeItem> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Regionalizacion.LenguajeItem>().ToList<Entities.Tables.Regionalizacion.LenguajeItem>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Regionalizacion.LenguajeItem items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Regionalizacion.LenguajeItem> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Regionalizacion.LenguajeItem items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Clave"></param>
            /// <param name="Texto"></param>
            /// <param name="Habilitado"></param>
            /// <param name="LargoMaximo"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Regionalizacion.LenguajeItem> Items(Int64? Id,Int64? LenguajeId,String Clave,String Texto,Boolean? Habilitado,Int32? LargoMaximo,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.LenguajeId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Clave, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Texto != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Texto, sqlEnum.OperandEnum.Equal, Texto);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Texto, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Texto);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (LargoMaximo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LargoMaximo, sqlEnum.OperandEnum.Equal, LargoMaximo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.LargoMaximo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, LargoMaximo);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Regionalizacion.LenguajeItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Regionalizacion.LenguajeItem Add(Entities.Tables.Regionalizacion.LenguajeItem item)
            {
                return (Entities.Tables.Regionalizacion.LenguajeItem)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Regionalizacion.LenguajeItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Regionalizacion.LenguajeItem AddOrUpdate(Entities.Tables.Regionalizacion.LenguajeItem item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Regionalizacion.LenguajeItem)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Regionalizacion.LenguajeItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Regionalizacion.LenguajeItem item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Regionalizacion.LenguajeItem with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Clave"></param>
            /// <param name="Texto"></param>
            /// <param name="Habilitado"></param>
            /// <param name="LargoMaximo"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 lenguajeid,String clave,String texto,Boolean habilitado,Int32 largomaximo,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Regionalizacion.LenguajeItem {Id = id,LenguajeId = lenguajeid,Clave = clave,Texto = texto,Habilitado = habilitado,LargoMaximo = largomaximo,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Regionalizacion.LenguajeItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Regionalizacion.LenguajeItem item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Regionalizacion.LenguajeItem with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Regionalizacion.LenguajeItem {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Regionalizacion.LenguajeItem> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class LenguajeItem
	} //namespace Permaquim.Depositary.Business.Tables.Regionalizacion
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Aplicacion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.Aplicacion> _entities = new List<Entities.Tables.Seguridad.Aplicacion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Aplicacion() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.Aplicacion();
            }
            public Aplicacion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.Aplicacion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.Aplicacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Aplicacion Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.Aplicacion</returns>
			public Entities.Tables.Seguridad.Aplicacion Add(Int64 TipoId,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.Aplicacion)base.Add(new Entities.Tables.Seguridad.Aplicacion(TipoId,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.Aplicacion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.Aplicacion>().ToList<Entities.Tables.Seguridad.Aplicacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Aplicacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Aplicacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Aplicacion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Aplicacion> Items(Int64? Id,Int64? TipoId,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.Aplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Aplicacion Add(Entities.Tables.Seguridad.Aplicacion item)
            {
                return (Entities.Tables.Seguridad.Aplicacion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.Aplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Aplicacion AddOrUpdate(Entities.Tables.Seguridad.Aplicacion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.Aplicacion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.Aplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.Aplicacion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.Aplicacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.Aplicacion {Id = id,TipoId = tipoid,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.Aplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.Aplicacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.Aplicacion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.Aplicacion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.Aplicacion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Aplicacion
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AplicacionParametro : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					Nombre,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.AplicacionParametro> _entities = new List<Entities.Tables.Seguridad.AplicacionParametro>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public AplicacionParametro() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.AplicacionParametro();
            }
            public AplicacionParametro(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.AplicacionParametro();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.AplicacionParametro item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AplicacionParametro Add Method
         /// </summary>
         /// <param name='AplicacionId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.AplicacionParametro</returns>
			public Entities.Tables.Seguridad.AplicacionParametro Add(Int64 AplicacionId,String Nombre,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.AplicacionParametro)base.Add(new Entities.Tables.Seguridad.AplicacionParametro(AplicacionId,Nombre,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.AplicacionParametro> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.AplicacionParametro>().ToList<Entities.Tables.Seguridad.AplicacionParametro>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.AplicacionParametro items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.AplicacionParametro> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.AplicacionParametro items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.AplicacionParametro> Items(Int64? Id,Int64? AplicacionId,String Nombre,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.AplicacionParametro
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.AplicacionParametro Add(Entities.Tables.Seguridad.AplicacionParametro item)
            {
                return (Entities.Tables.Seguridad.AplicacionParametro)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.AplicacionParametro
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.AplicacionParametro AddOrUpdate(Entities.Tables.Seguridad.AplicacionParametro item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.AplicacionParametro)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.AplicacionParametro
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.AplicacionParametro item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.AplicacionParametro with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 aplicacionid,String nombre,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.AplicacionParametro {Id = id,AplicacionId = aplicacionid,Nombre = nombre,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.AplicacionParametro
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.AplicacionParametro item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.AplicacionParametro with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.AplicacionParametro {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.AplicacionParametro> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AplicacionParametro
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AplicacionParametroValor : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					ParametroId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.AplicacionParametroValor> _entities = new List<Entities.Tables.Seguridad.AplicacionParametroValor>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public AplicacionParametroValor() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.AplicacionParametroValor();
            }
            public AplicacionParametroValor(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.AplicacionParametroValor();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.AplicacionParametroValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AplicacionParametroValor Add Method
         /// </summary>
         /// <param name='AplicacionId'></param>
         /// <param name='ParametroId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.AplicacionParametroValor</returns>
			public Entities.Tables.Seguridad.AplicacionParametroValor Add(Int64 AplicacionId,Int64 ParametroId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.AplicacionParametroValor)base.Add(new Entities.Tables.Seguridad.AplicacionParametroValor(AplicacionId,ParametroId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.AplicacionParametroValor> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.AplicacionParametroValor>().ToList<Entities.Tables.Seguridad.AplicacionParametroValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.AplicacionParametroValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.AplicacionParametroValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.AplicacionParametroValor items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ParametroId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.AplicacionParametroValor> Items(Int64? Id,Int64? AplicacionId,Int64? ParametroId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (ParametroId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ParametroId, sqlEnum.OperandEnum.Equal, ParametroId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.ParametroId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, ParametroId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.AplicacionParametroValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.AplicacionParametroValor Add(Entities.Tables.Seguridad.AplicacionParametroValor item)
            {
                return (Entities.Tables.Seguridad.AplicacionParametroValor)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.AplicacionParametroValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.AplicacionParametroValor AddOrUpdate(Entities.Tables.Seguridad.AplicacionParametroValor item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.AplicacionParametroValor)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.AplicacionParametroValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.AplicacionParametroValor item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.AplicacionParametroValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ParametroId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 aplicacionid,Int64 parametroid,String valor,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.AplicacionParametroValor {Id = id,AplicacionId = aplicacionid,ParametroId = parametroid,Valor = valor,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.AplicacionParametroValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.AplicacionParametroValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.AplicacionParametroValor with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.AplicacionParametroValor {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.AplicacionParametroValor> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AplicacionParametroValor
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Funcion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					TipoId,
					Nombre,
					Descripcion,
					Referencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.Funcion> _entities = new List<Entities.Tables.Seguridad.Funcion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Funcion() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.Funcion();
            }
            public Funcion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.Funcion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.Funcion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Funcion Add Method
         /// </summary>
         /// <param name='AplicacionId'></param>
         /// <param name='TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Referencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.Funcion</returns>
			public Entities.Tables.Seguridad.Funcion Add(Int64 AplicacionId,Int64 TipoId,String Nombre,String Descripcion,String Referencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.Funcion)base.Add(new Entities.Tables.Seguridad.Funcion(AplicacionId,TipoId,Nombre,Descripcion,Referencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.Funcion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.Funcion>().ToList<Entities.Tables.Seguridad.Funcion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Funcion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Funcion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Funcion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Referencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Funcion> Items(Int64? Id,Int64? AplicacionId,Int64? TipoId,String Nombre,String Descripcion,String Referencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Referencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Referencia, sqlEnum.OperandEnum.Equal, Referencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Referencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Referencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.Funcion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Funcion Add(Entities.Tables.Seguridad.Funcion item)
            {
                return (Entities.Tables.Seguridad.Funcion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.Funcion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Funcion AddOrUpdate(Entities.Tables.Seguridad.Funcion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.Funcion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.Funcion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.Funcion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.Funcion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Referencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 aplicacionid,Int64 tipoid,String nombre,String descripcion,String referencia,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.Funcion {Id = id,AplicacionId = aplicacionid,TipoId = tipoid,Nombre = nombre,Descripcion = descripcion,Referencia = referencia,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.Funcion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.Funcion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.Funcion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.Funcion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.Funcion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Funcion
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class IdentificadorUsuario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					UsuarioId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.IdentificadorUsuario> _entities = new List<Entities.Tables.Seguridad.IdentificadorUsuario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public IdentificadorUsuario() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.IdentificadorUsuario();
            }
            public IdentificadorUsuario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.IdentificadorUsuario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.IdentificadorUsuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// IdentificadorUsuario Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='UsuarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.IdentificadorUsuario</returns>
			public Entities.Tables.Seguridad.IdentificadorUsuario Add(Int64 TipoId,Int64 UsuarioId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.IdentificadorUsuario)base.Add(new Entities.Tables.Seguridad.IdentificadorUsuario(TipoId,UsuarioId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.IdentificadorUsuario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.IdentificadorUsuario>().ToList<Entities.Tables.Seguridad.IdentificadorUsuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.IdentificadorUsuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.IdentificadorUsuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.IdentificadorUsuario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.IdentificadorUsuario> Items(Int64? Id,Int64? TipoId,Int64? UsuarioId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.IdentificadorUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.IdentificadorUsuario Add(Entities.Tables.Seguridad.IdentificadorUsuario item)
            {
                return (Entities.Tables.Seguridad.IdentificadorUsuario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.IdentificadorUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.IdentificadorUsuario AddOrUpdate(Entities.Tables.Seguridad.IdentificadorUsuario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.IdentificadorUsuario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.IdentificadorUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.IdentificadorUsuario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.IdentificadorUsuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,Int64 usuarioid,String valor,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.IdentificadorUsuario {Id = id,TipoId = tipoid,UsuarioId = usuarioid,Valor = valor,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.IdentificadorUsuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.IdentificadorUsuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.IdentificadorUsuario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.IdentificadorUsuario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.IdentificadorUsuario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class IdentificadorUsuario
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Menu : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					Nombre,
					Descripcion,
					FuncionId,
					Imagen,
					DependeDe,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.Menu> _entities = new List<Entities.Tables.Seguridad.Menu>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Menu() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.Menu();
            }
            public Menu(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.Menu();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.Menu item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Menu Add Method
         /// </summary>
         /// <param name='TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='FuncionId'></param>
         /// <param name='Imagen'></param>
         /// <param name='DependeDe'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.Menu</returns>
			public Entities.Tables.Seguridad.Menu Add(Int64 TipoId,String Nombre,String Descripcion,Int64 FuncionId,String Imagen,Int64? DependeDe,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.Menu)base.Add(new Entities.Tables.Seguridad.Menu(TipoId,Nombre,Descripcion,FuncionId,Imagen,DependeDe,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.Menu> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.Menu>().ToList<Entities.Tables.Seguridad.Menu>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Menu items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Menu> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Menu items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Imagen"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Menu> Items(Int64? Id,Int64? TipoId,String Nombre,String Descripcion,Int64? FuncionId,String Imagen,Int64? DependeDe,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FuncionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Imagen, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (DependeDe != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DependeDe, sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DependeDe, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.Menu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Menu Add(Entities.Tables.Seguridad.Menu item)
            {
                return (Entities.Tables.Seguridad.Menu)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.Menu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Menu AddOrUpdate(Entities.Tables.Seguridad.Menu item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.Menu)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.Menu
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.Menu item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.Menu with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Imagen"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 tipoid,String nombre,String descripcion,Int64 funcionid,String imagen,Int64? dependede,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.Menu {Id = id,TipoId = tipoid,Nombre = nombre,Descripcion = descripcion,FuncionId = funcionid,Imagen = imagen,DependeDe = dependede,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.Menu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.Menu item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.Menu with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.Menu {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.Menu> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Menu
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Rol : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					DependeDe,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.Rol> _entities = new List<Entities.Tables.Seguridad.Rol>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Rol() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.Rol();
            }
            public Rol(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.Rol();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.Rol item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Rol Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DependeDe'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.Rol</returns>
			public Entities.Tables.Seguridad.Rol Add(String Nombre,String Descripcion,Int64? DependeDe,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.Rol)base.Add(new Entities.Tables.Seguridad.Rol(Nombre,Descripcion,DependeDe,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.Rol> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.Rol>().ToList<Entities.Tables.Seguridad.Rol>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Rol items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Rol> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Rol items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Rol> Items(Int64? Id,String Nombre,String Descripcion,Int64? DependeDe,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (DependeDe != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DependeDe, sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DependeDe, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.Rol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Rol Add(Entities.Tables.Seguridad.Rol item)
            {
                return (Entities.Tables.Seguridad.Rol)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.Rol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Rol AddOrUpdate(Entities.Tables.Seguridad.Rol item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.Rol)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.Rol
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.Rol item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.Rol with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64? dependede,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.Rol {Id = id,Nombre = nombre,Descripcion = descripcion,DependeDe = dependede,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.Rol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.Rol item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.Rol with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.Rol {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.Rol> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Rol
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RolFuncion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					FuncionId,
					RolId,
					Descripcion,
					PuedeAgregar,
					PuedeModificar,
					PuedeEliminar,
					PuedeVisualizar,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.RolFuncion> _entities = new List<Entities.Tables.Seguridad.RolFuncion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public RolFuncion() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.RolFuncion();
            }
            public RolFuncion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.RolFuncion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.RolFuncion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RolFuncion Add Method
         /// </summary>
         /// <param name='FuncionId'></param>
         /// <param name='RolId'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PuedeAgregar'></param>
         /// <param name='PuedeModificar'></param>
         /// <param name='PuedeEliminar'></param>
         /// <param name='PuedeVisualizar'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.RolFuncion</returns>
			public Entities.Tables.Seguridad.RolFuncion Add(Int64 FuncionId,Int64 RolId,String Descripcion,Boolean PuedeAgregar,Boolean PuedeModificar,Boolean PuedeEliminar,Boolean PuedeVisualizar,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.RolFuncion)base.Add(new Entities.Tables.Seguridad.RolFuncion(FuncionId,RolId,Descripcion,PuedeAgregar,PuedeModificar,PuedeEliminar,PuedeVisualizar,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.RolFuncion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.RolFuncion>().ToList<Entities.Tables.Seguridad.RolFuncion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.RolFuncion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.RolFuncion> Items(Int16 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.RolFuncion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="FuncionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PuedeAgregar"></param>
            /// <param name="PuedeModificar"></param>
            /// <param name="PuedeEliminar"></param>
            /// <param name="PuedeVisualizar"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.RolFuncion> Items(Int16? Id,Int64? FuncionId,Int64? RolId,String Descripcion,Boolean? PuedeAgregar,Boolean? PuedeModificar,Boolean? PuedeEliminar,Boolean? PuedeVisualizar,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FuncionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (RolId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RolId, sqlEnum.OperandEnum.Equal, RolId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RolId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RolId);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PuedeAgregar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeAgregar, sqlEnum.OperandEnum.Equal, PuedeAgregar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PuedeAgregar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PuedeAgregar);
                    }
                   
                }
                if (PuedeModificar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeModificar, sqlEnum.OperandEnum.Equal, PuedeModificar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PuedeModificar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PuedeModificar);
                    }
                   
                }
                if (PuedeEliminar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeEliminar, sqlEnum.OperandEnum.Equal, PuedeEliminar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PuedeEliminar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PuedeEliminar);
                    }
                   
                }
                if (PuedeVisualizar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeVisualizar, sqlEnum.OperandEnum.Equal, PuedeVisualizar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PuedeVisualizar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PuedeVisualizar);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.RolFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.RolFuncion Add(Entities.Tables.Seguridad.RolFuncion item)
            {
                return (Entities.Tables.Seguridad.RolFuncion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.RolFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.RolFuncion AddOrUpdate(Entities.Tables.Seguridad.RolFuncion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.RolFuncion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.RolFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.RolFuncion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.RolFuncion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="FuncionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PuedeAgregar"></param>
            /// <param name="PuedeModificar"></param>
            /// <param name="PuedeEliminar"></param>
            /// <param name="PuedeVisualizar"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int16 id,Int64 funcionid,Int64 rolid,String descripcion,Boolean puedeagregar,Boolean puedemodificar,Boolean puedeeliminar,Boolean puedevisualizar,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.RolFuncion {Id = id,FuncionId = funcionid,RolId = rolid,Descripcion = descripcion,PuedeAgregar = puedeagregar,PuedeModificar = puedemodificar,PuedeEliminar = puedeeliminar,PuedeVisualizar = puedevisualizar,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.RolFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.RolFuncion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.RolFuncion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int16 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.RolFuncion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.RolFuncion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RolFuncion
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoAplicacion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.TipoAplicacion> _entities = new List<Entities.Tables.Seguridad.TipoAplicacion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoAplicacion() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.TipoAplicacion();
            }
            public TipoAplicacion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.TipoAplicacion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.TipoAplicacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoAplicacion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.TipoAplicacion</returns>
			public Entities.Tables.Seguridad.TipoAplicacion Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.TipoAplicacion)base.Add(new Entities.Tables.Seguridad.TipoAplicacion(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.TipoAplicacion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.TipoAplicacion>().ToList<Entities.Tables.Seguridad.TipoAplicacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoAplicacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoAplicacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoAplicacion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoAplicacion> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.TipoAplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoAplicacion Add(Entities.Tables.Seguridad.TipoAplicacion item)
            {
                return (Entities.Tables.Seguridad.TipoAplicacion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.TipoAplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoAplicacion AddOrUpdate(Entities.Tables.Seguridad.TipoAplicacion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.TipoAplicacion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.TipoAplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.TipoAplicacion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.TipoAplicacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.TipoAplicacion {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.TipoAplicacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.TipoAplicacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.TipoAplicacion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.TipoAplicacion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.TipoAplicacion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoAplicacion
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoFuncion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.TipoFuncion> _entities = new List<Entities.Tables.Seguridad.TipoFuncion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoFuncion() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.TipoFuncion();
            }
            public TipoFuncion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.TipoFuncion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.TipoFuncion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoFuncion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.TipoFuncion</returns>
			public Entities.Tables.Seguridad.TipoFuncion Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.TipoFuncion)base.Add(new Entities.Tables.Seguridad.TipoFuncion(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.TipoFuncion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.TipoFuncion>().ToList<Entities.Tables.Seguridad.TipoFuncion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoFuncion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoFuncion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoFuncion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoFuncion> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.TipoFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoFuncion Add(Entities.Tables.Seguridad.TipoFuncion item)
            {
                return (Entities.Tables.Seguridad.TipoFuncion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.TipoFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoFuncion AddOrUpdate(Entities.Tables.Seguridad.TipoFuncion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.TipoFuncion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.TipoFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.TipoFuncion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.TipoFuncion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.TipoFuncion {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.TipoFuncion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.TipoFuncion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.TipoFuncion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.TipoFuncion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.TipoFuncion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoFuncion
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoIdentificador : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Mascara,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.TipoIdentificador> _entities = new List<Entities.Tables.Seguridad.TipoIdentificador>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoIdentificador() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.TipoIdentificador();
            }
            public TipoIdentificador(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.TipoIdentificador();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.TipoIdentificador item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoIdentificador Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Mascara'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.TipoIdentificador</returns>
			public Entities.Tables.Seguridad.TipoIdentificador Add(String Nombre,String Descripcion,String Mascara,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.TipoIdentificador)base.Add(new Entities.Tables.Seguridad.TipoIdentificador(Nombre,Descripcion,Mascara,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.TipoIdentificador> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.TipoIdentificador>().ToList<Entities.Tables.Seguridad.TipoIdentificador>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoIdentificador items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoIdentificador> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoIdentificador items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Mascara"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoIdentificador> Items(Int64? Id,String Nombre,String Descripcion,String Mascara,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Mascara != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mascara, sqlEnum.OperandEnum.Equal, Mascara);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Mascara, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Mascara);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.TipoIdentificador
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoIdentificador Add(Entities.Tables.Seguridad.TipoIdentificador item)
            {
                return (Entities.Tables.Seguridad.TipoIdentificador)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.TipoIdentificador
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoIdentificador AddOrUpdate(Entities.Tables.Seguridad.TipoIdentificador item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.TipoIdentificador)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.TipoIdentificador
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.TipoIdentificador item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.TipoIdentificador with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Mascara"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String mascara,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.TipoIdentificador {Id = id,Nombre = nombre,Descripcion = descripcion,Mascara = mascara,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.TipoIdentificador
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.TipoIdentificador item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.TipoIdentificador with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.TipoIdentificador {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.TipoIdentificador> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoIdentificador
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoMenu : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.TipoMenu> _entities = new List<Entities.Tables.Seguridad.TipoMenu>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public TipoMenu() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.TipoMenu();
            }
            public TipoMenu(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.TipoMenu();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.TipoMenu item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoMenu Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.TipoMenu</returns>
			public Entities.Tables.Seguridad.TipoMenu Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.TipoMenu)base.Add(new Entities.Tables.Seguridad.TipoMenu(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.TipoMenu> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.TipoMenu>().ToList<Entities.Tables.Seguridad.TipoMenu>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoMenu items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoMenu> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.TipoMenu items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.TipoMenu> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.TipoMenu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoMenu Add(Entities.Tables.Seguridad.TipoMenu item)
            {
                return (Entities.Tables.Seguridad.TipoMenu)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.TipoMenu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.TipoMenu AddOrUpdate(Entities.Tables.Seguridad.TipoMenu item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.TipoMenu)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.TipoMenu
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.TipoMenu item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.TipoMenu with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.TipoMenu {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.TipoMenu
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.TipoMenu item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.TipoMenu with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.TipoMenu {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.TipoMenu> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoMenu
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Usuario : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EmpresaId,
					LenguajeId,
					PerfilId,
					Nombre,
					Apellido,
					NombreApellido,
					Documento,
					Legajo,
					Mail,
					FechaIngreso,
					NickName,
					Password,
					Token,
					Avatar,
					FechaUltimoLogin,
					DebeCambiarPassword,
					Habilitado,
					CantidadLogueosIncorrectos,
					Bloqueado,
					FechaExpiracion,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.Usuario> _entities = new List<Entities.Tables.Seguridad.Usuario>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Usuario() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.Usuario();
            }
            public Usuario(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.Usuario();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.Usuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Usuario Add Method
         /// </summary>
         /// <param name='EmpresaId'></param>
         /// <param name='LenguajeId'></param>
         /// <param name='PerfilId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Apellido'></param>
         /// <param name='NombreApellido'></param>
         /// <param name='Documento'></param>
         /// <param name='Legajo'></param>
         /// <param name='Mail'></param>
         /// <param name='FechaIngreso'></param>
         /// <param name='NickName'></param>
         /// <param name='Password'></param>
         /// <param name='Token'></param>
         /// <param name='Avatar'></param>
         /// <param name='FechaUltimoLogin'></param>
         /// <param name='DebeCambiarPassword'></param>
         /// <param name='Habilitado'></param>
         /// <param name='CantidadLogueosIncorrectos'></param>
         /// <param name='Bloqueado'></param>
         /// <param name='FechaExpiracion'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.Usuario</returns>
			public Entities.Tables.Seguridad.Usuario Add(Int64 EmpresaId,Int64 LenguajeId,Int64 PerfilId,String Nombre,String Apellido,String NombreApellido,String Documento,String Legajo,String Mail,DateTime FechaIngreso,String NickName,String Password,String Token,String Avatar,DateTime? FechaUltimoLogin,Boolean DebeCambiarPassword,Boolean Habilitado,Int32 CantidadLogueosIncorrectos,Boolean Bloqueado,DateTime? FechaExpiracion,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.Usuario)base.Add(new Entities.Tables.Seguridad.Usuario(EmpresaId,LenguajeId,PerfilId,Nombre,Apellido,NombreApellido,Documento,Legajo,Mail,FechaIngreso,NickName,Password,Token,Avatar,FechaUltimoLogin,DebeCambiarPassword,Habilitado,CantidadLogueosIncorrectos,Bloqueado,FechaExpiracion,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.Usuario> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.Usuario>().ToList<Entities.Tables.Seguridad.Usuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Usuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Usuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.Usuario items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="PerfilId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Apellido"></param>
            /// <param name="NombreApellido"></param>
            /// <param name="Documento"></param>
            /// <param name="Legajo"></param>
            /// <param name="Mail"></param>
            /// <param name="FechaIngreso"></param>
            /// <param name="NickName"></param>
            /// <param name="Password"></param>
            /// <param name="Token"></param>
            /// <param name="Avatar"></param>
            /// <param name="FechaUltimoLogin"></param>
            /// <param name="DebeCambiarPassword"></param>
            /// <param name="Habilitado"></param>
            /// <param name="CantidadLogueosIncorrectos"></param>
            /// <param name="Bloqueado"></param>
            /// <param name="FechaExpiracion"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.Usuario> Items(Int64? Id,Int64? EmpresaId,Int64? LenguajeId,Int64? PerfilId,String Nombre,String Apellido,String NombreApellido,String Documento,String Legajo,String Mail,DateTime? FechaIngreso,String NickName,String Password,String Token,String Avatar,DateTime? FechaUltimoLogin,Boolean? DebeCambiarPassword,Boolean? Habilitado,Int32? CantidadLogueosIncorrectos,Boolean? Bloqueado,DateTime? FechaExpiracion,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EmpresaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.LenguajeId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (PerfilId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilId, sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PerfilId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Apellido != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Apellido, sqlEnum.OperandEnum.Equal, Apellido);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Apellido, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Apellido);
                    }
                   
                }
                if (NombreApellido != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreApellido, sqlEnum.OperandEnum.Equal, NombreApellido);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.NombreApellido, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, NombreApellido);
                    }
                   
                }
                if (Documento != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Documento, sqlEnum.OperandEnum.Equal, Documento);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Documento, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Documento);
                    }
                   
                }
                if (Legajo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Legajo, sqlEnum.OperandEnum.Equal, Legajo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Legajo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Legajo);
                    }
                   
                }
                if (Mail != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mail, sqlEnum.OperandEnum.Equal, Mail);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Mail, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Mail);
                    }
                   
                }
                if (FechaIngreso != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaIngreso, sqlEnum.OperandEnum.Equal, FechaIngreso);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaIngreso, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaIngreso);
                    }
                   
                }
                if (NickName != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NickName, sqlEnum.OperandEnum.Equal, NickName);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.NickName, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, NickName);
                    }
                   
                }
                if (Password != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Password, sqlEnum.OperandEnum.Equal, Password);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Password, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Password);
                    }
                   
                }
                if (Token != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Token, sqlEnum.OperandEnum.Equal, Token);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Token, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Token);
                    }
                   
                }
                if (Avatar != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Avatar, sqlEnum.OperandEnum.Equal, Avatar);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Avatar, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Avatar);
                    }
                   
                }
                if (FechaUltimoLogin != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaUltimoLogin, sqlEnum.OperandEnum.Equal, FechaUltimoLogin);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaUltimoLogin, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaUltimoLogin);
                    }
                   
                }
                if (DebeCambiarPassword != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DebeCambiarPassword, sqlEnum.OperandEnum.Equal, DebeCambiarPassword);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DebeCambiarPassword, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DebeCambiarPassword);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (CantidadLogueosIncorrectos != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadLogueosIncorrectos, sqlEnum.OperandEnum.Equal, CantidadLogueosIncorrectos);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CantidadLogueosIncorrectos, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CantidadLogueosIncorrectos);
                    }
                   
                }
                if (Bloqueado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Bloqueado, sqlEnum.OperandEnum.Equal, Bloqueado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Bloqueado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Bloqueado);
                    }
                   
                }
                if (FechaExpiracion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaExpiracion, sqlEnum.OperandEnum.Equal, FechaExpiracion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaExpiracion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaExpiracion);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.Usuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Usuario Add(Entities.Tables.Seguridad.Usuario item)
            {
                return (Entities.Tables.Seguridad.Usuario)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.Usuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.Usuario AddOrUpdate(Entities.Tables.Seguridad.Usuario item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.Usuario)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.Usuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.Usuario item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.Usuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="PerfilId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Apellido"></param>
            /// <param name="NombreApellido"></param>
            /// <param name="Documento"></param>
            /// <param name="Legajo"></param>
            /// <param name="Mail"></param>
            /// <param name="FechaIngreso"></param>
            /// <param name="NickName"></param>
            /// <param name="Password"></param>
            /// <param name="Token"></param>
            /// <param name="Avatar"></param>
            /// <param name="FechaUltimoLogin"></param>
            /// <param name="DebeCambiarPassword"></param>
            /// <param name="Habilitado"></param>
            /// <param name="CantidadLogueosIncorrectos"></param>
            /// <param name="Bloqueado"></param>
            /// <param name="FechaExpiracion"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 empresaid,Int64 lenguajeid,Int64 perfilid,String nombre,String apellido,String nombreapellido,String documento,String legajo,String mail,DateTime fechaingreso,String nickname,String password,String token,String avatar,DateTime? fechaultimologin,Boolean debecambiarpassword,Boolean habilitado,Int32 cantidadlogueosincorrectos,Boolean bloqueado,DateTime? fechaexpiracion,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.Usuario {Id = id,EmpresaId = empresaid,LenguajeId = lenguajeid,PerfilId = perfilid,Nombre = nombre,Apellido = apellido,NombreApellido = nombreapellido,Documento = documento,Legajo = legajo,Mail = mail,FechaIngreso = fechaingreso,NickName = nickname,Password = password,Token = token,Avatar = avatar,FechaUltimoLogin = fechaultimologin,DebeCambiarPassword = debecambiarpassword,Habilitado = habilitado,CantidadLogueosIncorrectos = cantidadlogueosincorrectos,Bloqueado = bloqueado,FechaExpiracion = fechaexpiracion,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.Usuario
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.Usuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.Usuario with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.Usuario {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.Usuario> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Usuario
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioRol : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					AplicacionId,
					RolId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.UsuarioRol> _entities = new List<Entities.Tables.Seguridad.UsuarioRol>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public UsuarioRol() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.UsuarioRol();
            }
            public UsuarioRol(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.UsuarioRol();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.UsuarioRol item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioRol Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='AplicacionId'></param>
         /// <param name='RolId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.UsuarioRol</returns>
			public Entities.Tables.Seguridad.UsuarioRol Add(Int64 UsuarioId,Int64 AplicacionId,Int64 RolId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.UsuarioRol)base.Add(new Entities.Tables.Seguridad.UsuarioRol(UsuarioId,AplicacionId,RolId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.UsuarioRol> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.UsuarioRol>().ToList<Entities.Tables.Seguridad.UsuarioRol>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.UsuarioRol items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.UsuarioRol> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.UsuarioRol items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.UsuarioRol> Items(Int64? Id,Int64? UsuarioId,Int64? AplicacionId,Int64? RolId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.AplicacionId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (RolId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RolId, sqlEnum.OperandEnum.Equal, RolId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.RolId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, RolId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.UsuarioRol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.UsuarioRol Add(Entities.Tables.Seguridad.UsuarioRol item)
            {
                return (Entities.Tables.Seguridad.UsuarioRol)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.UsuarioRol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.UsuarioRol AddOrUpdate(Entities.Tables.Seguridad.UsuarioRol item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.UsuarioRol)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.UsuarioRol
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.UsuarioRol item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.UsuarioRol with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 usuarioid,Int64 aplicacionid,Int64 rolid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.UsuarioRol {Id = id,UsuarioId = usuarioid,AplicacionId = aplicacionid,RolId = rolid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.UsuarioRol
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.UsuarioRol item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.UsuarioRol with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.UsuarioRol {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.UsuarioRol> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioRol
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioSector : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					SectorId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Seguridad.UsuarioSector> _entities = new List<Entities.Tables.Seguridad.UsuarioSector>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public UsuarioSector() : base()
            {
                base._dataItem = new Entities.Tables.Seguridad.UsuarioSector();
            }
            public UsuarioSector(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Seguridad.UsuarioSector();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Seguridad.UsuarioSector item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioSector Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='SectorId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Seguridad.UsuarioSector</returns>
			public Entities.Tables.Seguridad.UsuarioSector Add(Int64 UsuarioId,Int64 SectorId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Seguridad.UsuarioSector)base.Add(new Entities.Tables.Seguridad.UsuarioSector(UsuarioId,SectorId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Seguridad.UsuarioSector> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Seguridad.UsuarioSector>().ToList<Entities.Tables.Seguridad.UsuarioSector>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.UsuarioSector items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.UsuarioSector> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Seguridad.UsuarioSector items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Seguridad.UsuarioSector> Items(Int64? Id,Int64? UsuarioId,Int64? SectorId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Seguridad.UsuarioSector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.UsuarioSector Add(Entities.Tables.Seguridad.UsuarioSector item)
            {
                return (Entities.Tables.Seguridad.UsuarioSector)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Seguridad.UsuarioSector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Seguridad.UsuarioSector AddOrUpdate(Entities.Tables.Seguridad.UsuarioSector item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Seguridad.UsuarioSector)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Seguridad.UsuarioSector
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Seguridad.UsuarioSector item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Seguridad.UsuarioSector with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 usuarioid,Int64 sectorid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Seguridad.UsuarioSector {Id = id,UsuarioId = usuarioid,SectorId = sectorid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Seguridad.UsuarioSector
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Seguridad.UsuarioSector item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Seguridad.UsuarioSector with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Seguridad.UsuarioSector {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Seguridad.UsuarioSector> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioSector
	} //namespace Permaquim.Depositary.Business.Tables.Seguridad
	namespace Permaquim.Depositary.Business.Tables.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Configuracion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadId,
					Segundos,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Sincronizacion.Configuracion> _entities = new List<Entities.Tables.Sincronizacion.Configuracion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Configuracion() : base()
            {
                base._dataItem = new Entities.Tables.Sincronizacion.Configuracion();
            }
            public Configuracion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Sincronizacion.Configuracion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Sincronizacion.Configuracion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Configuracion Add Method
         /// </summary>
         /// <param name='EntidadId'></param>
         /// <param name='Segundos'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Sincronizacion.Configuracion</returns>
			public Entities.Tables.Sincronizacion.Configuracion Add(Int64 EntidadId,Int64 Segundos,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Sincronizacion.Configuracion)base.Add(new Entities.Tables.Sincronizacion.Configuracion(EntidadId,Segundos,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Sincronizacion.Configuracion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Sincronizacion.Configuracion>().ToList<Entities.Tables.Sincronizacion.Configuracion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.Configuracion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.Configuracion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.Configuracion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Segundos"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.Configuracion> Items(Int64? Id,Int64? EntidadId,Int64? Segundos,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadId, sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EntidadId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                   
                }
                if (Segundos != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Segundos, sqlEnum.OperandEnum.Equal, Segundos);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Segundos, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Segundos);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Sincronizacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.Configuracion Add(Entities.Tables.Sincronizacion.Configuracion item)
            {
                return (Entities.Tables.Sincronizacion.Configuracion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Sincronizacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.Configuracion AddOrUpdate(Entities.Tables.Sincronizacion.Configuracion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Sincronizacion.Configuracion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Sincronizacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Sincronizacion.Configuracion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Sincronizacion.Configuracion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Segundos"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 entidadid,Int64 segundos,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Sincronizacion.Configuracion {Id = id,EntidadId = entidadid,Segundos = segundos,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Sincronizacion.Configuracion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Sincronizacion.Configuracion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Sincronizacion.Configuracion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Sincronizacion.Configuracion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Sincronizacion.Configuracion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Configuracion
	} //namespace Permaquim.Depositary.Business.Tables.Sincronizacion
	namespace Permaquim.Depositary.Business.Tables.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Entidad : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
         protected List<Entities.Tables.Sincronizacion.Entidad> _entities = new List<Entities.Tables.Sincronizacion.Entidad>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Entidad() : base()
            {
                base._dataItem = new Entities.Tables.Sincronizacion.Entidad();
            }
            public Entidad(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Sincronizacion.Entidad();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Sincronizacion.Entidad item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Entidad Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Tables.Sincronizacion.Entidad</returns>
			public Entities.Tables.Sincronizacion.Entidad Add(String Nombre,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Tables.Sincronizacion.Entidad)base.Add(new Entities.Tables.Sincronizacion.Entidad(Nombre,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Tables.Sincronizacion.Entidad> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Sincronizacion.Entidad>().ToList<Entities.Tables.Sincronizacion.Entidad>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.Entidad items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.Entidad> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.Entidad items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.Entidad> Items(Int64? Id,String Nombre,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Sincronizacion.Entidad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.Entidad Add(Entities.Tables.Sincronizacion.Entidad item)
            {
                return (Entities.Tables.Sincronizacion.Entidad)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Sincronizacion.Entidad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.Entidad AddOrUpdate(Entities.Tables.Sincronizacion.Entidad item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Sincronizacion.Entidad)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Sincronizacion.Entidad
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Sincronizacion.Entidad item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Sincronizacion.Entidad with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion,Boolean habilitado)
            {
                return base.Update((IDataItem) new Entities.Tables.Sincronizacion.Entidad {Id = id,Nombre = nombre,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion,Habilitado = habilitado});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Sincronizacion.Entidad
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Sincronizacion.Entidad item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Sincronizacion.Entidad with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Sincronizacion.Entidad {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Sincronizacion.Entidad> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Entidad
	} //namespace Permaquim.Depositary.Business.Tables.Sincronizacion
	namespace Permaquim.Depositary.Business.Tables.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EntidadCabecera : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadId,
					DepositarioId,
					Valor,
					Fechainicio,
					Fechafin
				}
         protected List<Entities.Tables.Sincronizacion.EntidadCabecera> _entities = new List<Entities.Tables.Sincronizacion.EntidadCabecera>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public EntidadCabecera() : base()
            {
                base._dataItem = new Entities.Tables.Sincronizacion.EntidadCabecera();
            }
            public EntidadCabecera(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Sincronizacion.EntidadCabecera();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Sincronizacion.EntidadCabecera item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EntidadCabecera Add Method
         /// </summary>
         /// <param name='EntidadId'></param>
         /// <param name='DepositarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Fechainicio'></param>
         /// <param name='Fechafin'></param>
         /// <returns>Entities.Tables.Sincronizacion.EntidadCabecera</returns>
			public Entities.Tables.Sincronizacion.EntidadCabecera Add(Int64 EntidadId,Int64 DepositarioId,String Valor,DateTime Fechainicio,DateTime? Fechafin) 
			{
			  return (Entities.Tables.Sincronizacion.EntidadCabecera)base.Add(new Entities.Tables.Sincronizacion.EntidadCabecera(EntidadId,DepositarioId,Valor,Fechainicio,Fechafin));
			}
            public new List<Entities.Tables.Sincronizacion.EntidadCabecera> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Sincronizacion.EntidadCabecera>().ToList<Entities.Tables.Sincronizacion.EntidadCabecera>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.EntidadCabecera items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.EntidadCabecera> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.EntidadCabecera items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Fechainicio"></param>
            /// <param name="Fechafin"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.EntidadCabecera> Items(Int64? Id,Int64? EntidadId,Int64? DepositarioId,String Valor,DateTime? Fechainicio,DateTime? Fechafin)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadId, sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EntidadId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DepositarioId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Valor, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Fechainicio != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fechainicio, sqlEnum.OperandEnum.Equal, Fechainicio);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fechainicio, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fechainicio);
                    }
                   
                }
                if (Fechafin != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fechafin, sqlEnum.OperandEnum.Equal, Fechafin);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fechafin, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fechafin);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Sincronizacion.EntidadCabecera
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.EntidadCabecera Add(Entities.Tables.Sincronizacion.EntidadCabecera item)
            {
                return (Entities.Tables.Sincronizacion.EntidadCabecera)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Sincronizacion.EntidadCabecera
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.EntidadCabecera AddOrUpdate(Entities.Tables.Sincronizacion.EntidadCabecera item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Sincronizacion.EntidadCabecera)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Sincronizacion.EntidadCabecera
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Sincronizacion.EntidadCabecera item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Sincronizacion.EntidadCabecera with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Fechainicio"></param>
            /// <param name="Fechafin"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 entidadid,Int64 depositarioid,String valor,DateTime fechainicio,DateTime? fechafin)
            {
                return base.Update((IDataItem) new Entities.Tables.Sincronizacion.EntidadCabecera {Id = id,EntidadId = entidadid,DepositarioId = depositarioid,Valor = valor,Fechainicio = fechainicio,Fechafin = fechafin});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Sincronizacion.EntidadCabecera
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Sincronizacion.EntidadCabecera item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Sincronizacion.EntidadCabecera with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Sincronizacion.EntidadCabecera {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Sincronizacion.EntidadCabecera> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EntidadCabecera
	} //namespace Permaquim.Depositary.Business.Tables.Sincronizacion
	namespace Permaquim.Depositary.Business.Tables.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EntidadDetalle : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadCabeceraId,
					FechaCreacion,
					OrigenId,
					DestinoId
				}
         protected List<Entities.Tables.Sincronizacion.EntidadDetalle> _entities = new List<Entities.Tables.Sincronizacion.EntidadDetalle>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public EntidadDetalle() : base()
            {
                base._dataItem = new Entities.Tables.Sincronizacion.EntidadDetalle();
            }
            public EntidadDetalle(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Sincronizacion.EntidadDetalle();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Sincronizacion.EntidadDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EntidadDetalle Add Method
         /// </summary>
         /// <param name='EntidadCabeceraId'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='OrigenId'></param>
         /// <param name='DestinoId'></param>
         /// <returns>Entities.Tables.Sincronizacion.EntidadDetalle</returns>
			public Entities.Tables.Sincronizacion.EntidadDetalle Add(Int64 EntidadCabeceraId,DateTime FechaCreacion,Int64 OrigenId,Int64 DestinoId) 
			{
			  return (Entities.Tables.Sincronizacion.EntidadDetalle)base.Add(new Entities.Tables.Sincronizacion.EntidadDetalle(EntidadCabeceraId,FechaCreacion,OrigenId,DestinoId));
			}
            public new List<Entities.Tables.Sincronizacion.EntidadDetalle> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Sincronizacion.EntidadDetalle>().ToList<Entities.Tables.Sincronizacion.EntidadDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.EntidadDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.EntidadDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Sincronizacion.EntidadDetalle items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadCabeceraId"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="OrigenId"></param>
            /// <param name="DestinoId"></param>
            /// <returns></returns>
            public List<Entities.Tables.Sincronizacion.EntidadDetalle> Items(Int64? Id,Int64? EntidadCabeceraId,DateTime? FechaCreacion,Int64? OrigenId,Int64? DestinoId)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadCabeceraId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadCabeceraId, sqlEnum.OperandEnum.Equal, EntidadCabeceraId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EntidadCabeceraId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EntidadCabeceraId);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (OrigenId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.OrigenId, sqlEnum.OperandEnum.Equal, OrigenId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.OrigenId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, OrigenId);
                    }
                   
                }
                if (DestinoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DestinoId, sqlEnum.OperandEnum.Equal, DestinoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.DestinoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, DestinoId);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Sincronizacion.EntidadDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.EntidadDetalle Add(Entities.Tables.Sincronizacion.EntidadDetalle item)
            {
                return (Entities.Tables.Sincronizacion.EntidadDetalle)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Sincronizacion.EntidadDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Sincronizacion.EntidadDetalle AddOrUpdate(Entities.Tables.Sincronizacion.EntidadDetalle item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Sincronizacion.EntidadDetalle)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Sincronizacion.EntidadDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Sincronizacion.EntidadDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Sincronizacion.EntidadDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadCabeceraId"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="OrigenId"></param>
            /// <param name="DestinoId"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 entidadcabeceraid,DateTime fechacreacion,Int64 origenid,Int64 destinoid)
            {
                return base.Update((IDataItem) new Entities.Tables.Sincronizacion.EntidadDetalle {Id = id,EntidadCabeceraId = entidadcabeceraid,FechaCreacion = fechacreacion,OrigenId = origenid,DestinoId = destinoid});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Sincronizacion.EntidadDetalle
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Sincronizacion.EntidadDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Sincronizacion.EntidadDetalle with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Sincronizacion.EntidadDetalle {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Sincronizacion.EntidadDetalle> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EntidadDetalle
	} //namespace Permaquim.Depositary.Business.Tables.Sincronizacion
	namespace Permaquim.Depositary.Business.Tables.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AgendaTurno : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					EsquemaDetalleTurnoId,
					Fecha,
					SectorId,
					Secuencia,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
         protected List<Entities.Tables.Turno.AgendaTurno> _entities = new List<Entities.Tables.Turno.AgendaTurno>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public AgendaTurno() : base()
            {
                base._dataItem = new Entities.Tables.Turno.AgendaTurno();
            }
            public AgendaTurno(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Turno.AgendaTurno();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Turno.AgendaTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AgendaTurno Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='EsquemaDetalleTurnoId'></param>
         /// <param name='Fecha'></param>
         /// <param name='SectorId'></param>
         /// <param name='Secuencia'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Tables.Turno.AgendaTurno</returns>
			public Entities.Tables.Turno.AgendaTurno Add(String Nombre,Int64 EsquemaDetalleTurnoId,DateTime Fecha,Int64 SectorId,Int32 Secuencia,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Tables.Turno.AgendaTurno)base.Add(new Entities.Tables.Turno.AgendaTurno(Nombre,EsquemaDetalleTurnoId,Fecha,SectorId,Secuencia,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Tables.Turno.AgendaTurno> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Turno.AgendaTurno>().ToList<Entities.Tables.Turno.AgendaTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.AgendaTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.AgendaTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.AgendaTurno items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="EsquemaDetalleTurnoId"></param>
            /// <param name="Fecha"></param>
            /// <param name="SectorId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.AgendaTurno> Items(Int64? Id,String Nombre,Int64? EsquemaDetalleTurnoId,DateTime? Fecha,Int64? SectorId,Int32? Secuencia,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (EsquemaDetalleTurnoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaDetalleTurnoId, sqlEnum.OperandEnum.Equal, EsquemaDetalleTurnoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsquemaDetalleTurnoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsquemaDetalleTurnoId);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Fecha, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.SectorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Secuencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Turno.AgendaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.AgendaTurno Add(Entities.Tables.Turno.AgendaTurno item)
            {
                return (Entities.Tables.Turno.AgendaTurno)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Turno.AgendaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.AgendaTurno AddOrUpdate(Entities.Tables.Turno.AgendaTurno item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Turno.AgendaTurno)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Turno.AgendaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Turno.AgendaTurno item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Turno.AgendaTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="EsquemaDetalleTurnoId"></param>
            /// <param name="Fecha"></param>
            /// <param name="SectorId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 esquemadetalleturnoid,DateTime fecha,Int64 sectorid,Int32 secuencia,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion,Boolean habilitado)
            {
                return base.Update((IDataItem) new Entities.Tables.Turno.AgendaTurno {Id = id,Nombre = nombre,EsquemaDetalleTurnoId = esquemadetalleturnoid,Fecha = fecha,SectorId = sectorid,Secuencia = secuencia,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion,Habilitado = habilitado});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Turno.AgendaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Turno.AgendaTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Turno.AgendaTurno with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Turno.AgendaTurno {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Turno.AgendaTurno> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AgendaTurno
	} //namespace Permaquim.Depositary.Business.Tables.Turno
	namespace Permaquim.Depositary.Business.Tables.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaDetalleTurno : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EsquemaTurnoId,
					Nombre,
					Secuencia,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Turno.EsquemaDetalleTurno> _entities = new List<Entities.Tables.Turno.EsquemaDetalleTurno>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public EsquemaDetalleTurno() : base()
            {
                base._dataItem = new Entities.Tables.Turno.EsquemaDetalleTurno();
            }
            public EsquemaDetalleTurno(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Turno.EsquemaDetalleTurno();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Turno.EsquemaDetalleTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaDetalleTurno Add Method
         /// </summary>
         /// <param name='EsquemaTurnoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Secuencia'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Turno.EsquemaDetalleTurno</returns>
			public Entities.Tables.Turno.EsquemaDetalleTurno Add(Int64 EsquemaTurnoId,String Nombre,Int32 Secuencia,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Turno.EsquemaDetalleTurno)base.Add(new Entities.Tables.Turno.EsquemaDetalleTurno(EsquemaTurnoId,Nombre,Secuencia,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Turno.EsquemaDetalleTurno> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Turno.EsquemaDetalleTurno>().ToList<Entities.Tables.Turno.EsquemaDetalleTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.EsquemaDetalleTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.EsquemaDetalleTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.EsquemaDetalleTurno items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaTurnoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.EsquemaDetalleTurno> Items(Int64? Id,Int64? EsquemaTurnoId,String Nombre,Int32? Secuencia,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EsquemaTurnoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaTurnoId, sqlEnum.OperandEnum.Equal, EsquemaTurnoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsquemaTurnoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsquemaTurnoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Secuencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Turno.EsquemaDetalleTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.EsquemaDetalleTurno Add(Entities.Tables.Turno.EsquemaDetalleTurno item)
            {
                return (Entities.Tables.Turno.EsquemaDetalleTurno)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Turno.EsquemaDetalleTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.EsquemaDetalleTurno AddOrUpdate(Entities.Tables.Turno.EsquemaDetalleTurno item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Turno.EsquemaDetalleTurno)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Turno.EsquemaDetalleTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Turno.EsquemaDetalleTurno item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Turno.EsquemaDetalleTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaTurnoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 esquematurnoid,String nombre,Int32 secuencia,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Turno.EsquemaDetalleTurno {Id = id,EsquemaTurnoId = esquematurnoid,Nombre = nombre,Secuencia = secuencia,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Turno.EsquemaDetalleTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Turno.EsquemaDetalleTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Turno.EsquemaDetalleTurno with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Turno.EsquemaDetalleTurno {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Turno.EsquemaDetalleTurno> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaDetalleTurno
	} //namespace Permaquim.Depositary.Business.Tables.Turno
	namespace Permaquim.Depositary.Business.Tables.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaTurno : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Turno.EsquemaTurno> _entities = new List<Entities.Tables.Turno.EsquemaTurno>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public EsquemaTurno() : base()
            {
                base._dataItem = new Entities.Tables.Turno.EsquemaTurno();
            }
            public EsquemaTurno(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Turno.EsquemaTurno();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Turno.EsquemaTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaTurno Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Turno.EsquemaTurno</returns>
			public Entities.Tables.Turno.EsquemaTurno Add(String Nombre,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Turno.EsquemaTurno)base.Add(new Entities.Tables.Turno.EsquemaTurno(Nombre,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Turno.EsquemaTurno> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Turno.EsquemaTurno>().ToList<Entities.Tables.Turno.EsquemaTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.EsquemaTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.EsquemaTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Turno.EsquemaTurno items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Turno.EsquemaTurno> Items(Int64? Id,String Nombre,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Turno.EsquemaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.EsquemaTurno Add(Entities.Tables.Turno.EsquemaTurno item)
            {
                return (Entities.Tables.Turno.EsquemaTurno)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Turno.EsquemaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Turno.EsquemaTurno AddOrUpdate(Entities.Tables.Turno.EsquemaTurno item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Turno.EsquemaTurno)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Turno.EsquemaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Turno.EsquemaTurno item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Turno.EsquemaTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Turno.EsquemaTurno {Id = id,Nombre = nombre,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Turno.EsquemaTurno
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Turno.EsquemaTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Turno.EsquemaTurno with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Turno.EsquemaTurno {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Turno.EsquemaTurno> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaTurno
	} //namespace Permaquim.Depositary.Business.Tables.Turno
	namespace Permaquim.Depositary.Business.Tables.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Denominacion : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					TipoValorId,
					MonedaId,
					Unidades,
					Imagen,
					CodigoCcTalk,
					Posicion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Valor.Denominacion> _entities = new List<Entities.Tables.Valor.Denominacion>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Denominacion() : base()
            {
                base._dataItem = new Entities.Tables.Valor.Denominacion();
            }
            public Denominacion(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Valor.Denominacion();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Valor.Denominacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Denominacion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='TipoValorId'></param>
         /// <param name='MonedaId'></param>
         /// <param name='Unidades'></param>
         /// <param name='Imagen'></param>
         /// <param name='CodigoCcTalk'></param>
         /// <param name='Posicion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Valor.Denominacion</returns>
			public Entities.Tables.Valor.Denominacion Add(String Nombre,Int64 TipoValorId,Int64 MonedaId,Decimal Unidades,String Imagen,String CodigoCcTalk,Int32 Posicion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Valor.Denominacion)base.Add(new Entities.Tables.Valor.Denominacion(Nombre,TipoValorId,MonedaId,Unidades,Imagen,CodigoCcTalk,Posicion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Valor.Denominacion> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Valor.Denominacion>().ToList<Entities.Tables.Valor.Denominacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Denominacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Denominacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Denominacion items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Unidades"></param>
            /// <param name="Imagen"></param>
            /// <param name="CodigoCcTalk"></param>
            /// <param name="Posicion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Denominacion> Items(Int64? Id,String Nombre,Int64? TipoValorId,Int64? MonedaId,Decimal? Unidades,String Imagen,String CodigoCcTalk,Int32? Posicion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (TipoValorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoValorId, sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoValorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (Unidades != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Unidades, sqlEnum.OperandEnum.Equal, Unidades);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Unidades, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Unidades);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Imagen, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (CodigoCcTalk != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoCcTalk, sqlEnum.OperandEnum.Equal, CodigoCcTalk);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.CodigoCcTalk, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, CodigoCcTalk);
                    }
                   
                }
                if (Posicion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Posicion, sqlEnum.OperandEnum.Equal, Posicion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Posicion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Posicion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Valor.Denominacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Denominacion Add(Entities.Tables.Valor.Denominacion item)
            {
                return (Entities.Tables.Valor.Denominacion)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Valor.Denominacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Denominacion AddOrUpdate(Entities.Tables.Valor.Denominacion item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Valor.Denominacion)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Valor.Denominacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Valor.Denominacion item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Valor.Denominacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Unidades"></param>
            /// <param name="Imagen"></param>
            /// <param name="CodigoCcTalk"></param>
            /// <param name="Posicion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 tipovalorid,Int64 monedaid,Decimal unidades,String imagen,String codigocctalk,Int32 posicion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Valor.Denominacion {Id = id,Nombre = nombre,TipoValorId = tipovalorid,MonedaId = monedaid,Unidades = unidades,Imagen = imagen,CodigoCcTalk = codigocctalk,Posicion = posicion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Valor.Denominacion
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Valor.Denominacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Valor.Denominacion with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Valor.Denominacion {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Valor.Denominacion> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Denominacion
	} //namespace Permaquim.Depositary.Business.Tables.Valor
	namespace Permaquim.Depositary.Business.Tables.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Moneda : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					PaisId,
					Codigo,
					Simbolo,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Valor.Moneda> _entities = new List<Entities.Tables.Valor.Moneda>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Moneda() : base()
            {
                base._dataItem = new Entities.Tables.Valor.Moneda();
            }
            public Moneda(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Valor.Moneda();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Valor.Moneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Moneda Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='PaisId'></param>
         /// <param name='Codigo'></param>
         /// <param name='Simbolo'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Valor.Moneda</returns>
			public Entities.Tables.Valor.Moneda Add(String Nombre,Int64 PaisId,String Codigo,String Simbolo,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Valor.Moneda)base.Add(new Entities.Tables.Valor.Moneda(Nombre,PaisId,Codigo,Simbolo,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Valor.Moneda> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Valor.Moneda>().ToList<Entities.Tables.Valor.Moneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Moneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Moneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Moneda items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="PaisId"></param>
            /// <param name="Codigo"></param>
            /// <param name="Simbolo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Moneda> Items(Int64? Id,String Nombre,Int64? PaisId,String Codigo,String Simbolo,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PaisId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Codigo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (Simbolo != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Simbolo, sqlEnum.OperandEnum.Equal, Simbolo);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Simbolo, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Simbolo);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Valor.Moneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Moneda Add(Entities.Tables.Valor.Moneda item)
            {
                return (Entities.Tables.Valor.Moneda)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Valor.Moneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Moneda AddOrUpdate(Entities.Tables.Valor.Moneda item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Valor.Moneda)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Valor.Moneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Valor.Moneda item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Valor.Moneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="PaisId"></param>
            /// <param name="Codigo"></param>
            /// <param name="Simbolo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,Int64 paisid,String codigo,String simbolo,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Valor.Moneda {Id = id,Nombre = nombre,PaisId = paisid,Codigo = codigo,Simbolo = simbolo,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Valor.Moneda
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Valor.Moneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Valor.Moneda with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Valor.Moneda {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Valor.Moneda> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Moneda
	} //namespace Permaquim.Depositary.Business.Tables.Valor
	namespace Permaquim.Depositary.Business.Tables.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class OrigenValor : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Valor.OrigenValor> _entities = new List<Entities.Tables.Valor.OrigenValor>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public OrigenValor() : base()
            {
                base._dataItem = new Entities.Tables.Valor.OrigenValor();
            }
            public OrigenValor(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Valor.OrigenValor();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Valor.OrigenValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// OrigenValor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Valor.OrigenValor</returns>
			public Entities.Tables.Valor.OrigenValor Add(String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Valor.OrigenValor)base.Add(new Entities.Tables.Valor.OrigenValor(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Valor.OrigenValor> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Valor.OrigenValor>().ToList<Entities.Tables.Valor.OrigenValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.OrigenValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.OrigenValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.OrigenValor items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.OrigenValor> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Valor.OrigenValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.OrigenValor Add(Entities.Tables.Valor.OrigenValor item)
            {
                return (Entities.Tables.Valor.OrigenValor)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Valor.OrigenValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.OrigenValor AddOrUpdate(Entities.Tables.Valor.OrigenValor item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Valor.OrigenValor)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Valor.OrigenValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Valor.OrigenValor item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Valor.OrigenValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Valor.OrigenValor {Id = id,Nombre = nombre,Descripcion = descripcion,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Valor.OrigenValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Valor.OrigenValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Valor.OrigenValor with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Valor.OrigenValor {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Valor.OrigenValor> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class OrigenValor
	} //namespace Permaquim.Depositary.Business.Tables.Valor
	namespace Permaquim.Depositary.Business.Tables.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RelacionMonedaTipoValor : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MonedaId,
					TipoValorId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Valor.RelacionMonedaTipoValor> _entities = new List<Entities.Tables.Valor.RelacionMonedaTipoValor>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public RelacionMonedaTipoValor() : base()
            {
                base._dataItem = new Entities.Tables.Valor.RelacionMonedaTipoValor();
            }
            public RelacionMonedaTipoValor(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Valor.RelacionMonedaTipoValor();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Valor.RelacionMonedaTipoValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RelacionMonedaTipoValor Add Method
         /// </summary>
         /// <param name='MonedaId'></param>
         /// <param name='TipoValorId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Valor.RelacionMonedaTipoValor</returns>
			public Entities.Tables.Valor.RelacionMonedaTipoValor Add(Int64 MonedaId,Int64 TipoValorId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Valor.RelacionMonedaTipoValor)base.Add(new Entities.Tables.Valor.RelacionMonedaTipoValor(MonedaId,TipoValorId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Valor.RelacionMonedaTipoValor> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Valor.RelacionMonedaTipoValor>().ToList<Entities.Tables.Valor.RelacionMonedaTipoValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.RelacionMonedaTipoValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.RelacionMonedaTipoValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.RelacionMonedaTipoValor items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.RelacionMonedaTipoValor> Items(Int64? Id,Int64? MonedaId,Int64? TipoValorId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.MonedaId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (TipoValorId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoValorId, sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.TipoValorId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Valor.RelacionMonedaTipoValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.RelacionMonedaTipoValor Add(Entities.Tables.Valor.RelacionMonedaTipoValor item)
            {
                return (Entities.Tables.Valor.RelacionMonedaTipoValor)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Valor.RelacionMonedaTipoValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.RelacionMonedaTipoValor AddOrUpdate(Entities.Tables.Valor.RelacionMonedaTipoValor item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Valor.RelacionMonedaTipoValor)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Valor.RelacionMonedaTipoValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Valor.RelacionMonedaTipoValor item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Valor.RelacionMonedaTipoValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 monedaid,Int64 tipovalorid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Valor.RelacionMonedaTipoValor {Id = id,MonedaId = monedaid,TipoValorId = tipovalorid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Valor.RelacionMonedaTipoValor
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Valor.RelacionMonedaTipoValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Valor.RelacionMonedaTipoValor with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Valor.RelacionMonedaTipoValor {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Valor.RelacionMonedaTipoValor> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RelacionMonedaTipoValor
	} //namespace Permaquim.Depositary.Business.Tables.Valor
	namespace Permaquim.Depositary.Business.Tables.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Tipo : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Imagen,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Valor.Tipo> _entities = new List<Entities.Tables.Valor.Tipo>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Tipo() : base()
            {
                base._dataItem = new Entities.Tables.Valor.Tipo();
            }
            public Tipo(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Valor.Tipo();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Valor.Tipo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Tipo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Imagen'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Valor.Tipo</returns>
			public Entities.Tables.Valor.Tipo Add(String Nombre,String Descripcion,String Imagen,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Valor.Tipo)base.Add(new Entities.Tables.Valor.Tipo(Nombre,Descripcion,Imagen,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Valor.Tipo> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Valor.Tipo>().ToList<Entities.Tables.Valor.Tipo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Tipo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Tipo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Valor.Tipo items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Valor.Tipo> Items(Int64? Id,String Nombre,String Descripcion,String Imagen,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Imagen, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Valor.Tipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Tipo Add(Entities.Tables.Valor.Tipo item)
            {
                return (Entities.Tables.Valor.Tipo)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Valor.Tipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Valor.Tipo AddOrUpdate(Entities.Tables.Valor.Tipo item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Valor.Tipo)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Valor.Tipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Valor.Tipo item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Valor.Tipo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,String imagen,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Valor.Tipo {Id = id,Nombre = nombre,Descripcion = descripcion,Imagen = imagen,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Valor.Tipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Valor.Tipo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Valor.Tipo with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Valor.Tipo {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Valor.Tipo> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Tipo
	} //namespace Permaquim.Depositary.Business.Tables.Valor
	namespace Permaquim.Depositary.Business.Tables.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Perfil : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					PerfilTipoId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Visualizacion.Perfil> _entities = new List<Entities.Tables.Visualizacion.Perfil>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public Perfil() : base()
            {
                base._dataItem = new Entities.Tables.Visualizacion.Perfil();
            }
            public Perfil(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Visualizacion.Perfil();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Visualizacion.Perfil item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Perfil Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PerfilTipoId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Visualizacion.Perfil</returns>
			public Entities.Tables.Visualizacion.Perfil Add(String Nombre,String Descripcion,Int64 PerfilTipoId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Visualizacion.Perfil)base.Add(new Entities.Tables.Visualizacion.Perfil(Nombre,Descripcion,PerfilTipoId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Visualizacion.Perfil> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Visualizacion.Perfil>().ToList<Entities.Tables.Visualizacion.Perfil>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.Perfil items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.Perfil> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.Perfil items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PerfilTipoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.Perfil> Items(Int64? Id,String Nombre,String Descripcion,Int64? PerfilTipoId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PerfilTipoId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilTipoId, sqlEnum.OperandEnum.Equal, PerfilTipoId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PerfilTipoId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PerfilTipoId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Visualizacion.Perfil
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.Perfil Add(Entities.Tables.Visualizacion.Perfil item)
            {
                return (Entities.Tables.Visualizacion.Perfil)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Visualizacion.Perfil
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.Perfil AddOrUpdate(Entities.Tables.Visualizacion.Perfil item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Visualizacion.Perfil)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Visualizacion.Perfil
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Visualizacion.Perfil item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Visualizacion.Perfil with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PerfilTipoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Int64 perfiltipoid,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Visualizacion.Perfil {Id = id,Nombre = nombre,Descripcion = descripcion,PerfilTipoId = perfiltipoid,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Visualizacion.Perfil
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Visualizacion.Perfil item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Visualizacion.Perfil with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Visualizacion.Perfil {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Visualizacion.Perfil> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Perfil
	} //namespace Permaquim.Depositary.Business.Tables.Visualizacion
	namespace Permaquim.Depositary.Business.Tables.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PerfilItem : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					PerfilId,
					IdTablaReferencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Visualizacion.PerfilItem> _entities = new List<Entities.Tables.Visualizacion.PerfilItem>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public PerfilItem() : base()
            {
                base._dataItem = new Entities.Tables.Visualizacion.PerfilItem();
            }
            public PerfilItem(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Visualizacion.PerfilItem();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Visualizacion.PerfilItem item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PerfilItem Add Method
         /// </summary>
         /// <param name='PerfilId'></param>
         /// <param name='IdTablaReferencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Visualizacion.PerfilItem</returns>
			public Entities.Tables.Visualizacion.PerfilItem Add(Int64 PerfilId,Int64 IdTablaReferencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Visualizacion.PerfilItem)base.Add(new Entities.Tables.Visualizacion.PerfilItem(PerfilId,IdTablaReferencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Visualizacion.PerfilItem> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Visualizacion.PerfilItem>().ToList<Entities.Tables.Visualizacion.PerfilItem>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.PerfilItem items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.PerfilItem> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.PerfilItem items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PerfilId"></param>
            /// <param name="IdTablaReferencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.PerfilItem> Items(Int64? Id,Int64? PerfilId,Int64? IdTablaReferencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (PerfilId != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilId, sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.PerfilId, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                   
                }
                if (IdTablaReferencia != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.IdTablaReferencia, sqlEnum.OperandEnum.Equal, IdTablaReferencia);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.IdTablaReferencia, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, IdTablaReferencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Visualizacion.PerfilItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.PerfilItem Add(Entities.Tables.Visualizacion.PerfilItem item)
            {
                return (Entities.Tables.Visualizacion.PerfilItem)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Visualizacion.PerfilItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.PerfilItem AddOrUpdate(Entities.Tables.Visualizacion.PerfilItem item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Visualizacion.PerfilItem)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Visualizacion.PerfilItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Visualizacion.PerfilItem item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Visualizacion.PerfilItem with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PerfilId"></param>
            /// <param name="IdTablaReferencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,Int64 perfilid,Int64 idtablareferencia,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Visualizacion.PerfilItem {Id = id,PerfilId = perfilid,IdTablaReferencia = idtablareferencia,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Visualizacion.PerfilItem
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Visualizacion.PerfilItem item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Visualizacion.PerfilItem with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Visualizacion.PerfilItem {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Visualizacion.PerfilItem> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PerfilItem
	} //namespace Permaquim.Depositary.Business.Tables.Visualizacion
	namespace Permaquim.Depositary.Business.Tables.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PerfilTipo : DataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsAdministrador,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
         protected List<Entities.Tables.Visualizacion.PerfilTipo> _entities = new List<Entities.Tables.Visualizacion.PerfilTipo>();
         protected List<IDataItem> _cacheItemList = new List<IDataItem>();
         public WhereCollection Where = new WhereCollection();
         public OrderByCollection OrderBy = new OrderByCollection();
         public GroupByCollection GroupBy = new GroupByCollection();
         public AggregateCollection Aggregate { get; set; }
            public PerfilTipo() : base()
            {
                base._dataItem = new Entities.Tables.Visualizacion.PerfilTipo();
            }
            public PerfilTipo(IDataHandler dataHandler)
                : base(dataHandler)
            {
                base._transaction = dataHandler.GetTransaction();
                base._dataItem = new Entities.Tables.Visualizacion.PerfilTipo();
            }
            public class AggregateCollection : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(Permaquim.Depositary.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Tables.Visualizacion.PerfilTipo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PerfilTipo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsAdministrador'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Tables.Visualizacion.PerfilTipo</returns>
			public Entities.Tables.Visualizacion.PerfilTipo Add(String Nombre,String Descripcion,Boolean EsAdministrador,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion) 
			{
			  return (Entities.Tables.Visualizacion.PerfilTipo)base.Add(new Entities.Tables.Visualizacion.PerfilTipo(Nombre,Descripcion,EsAdministrador,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Tables.Visualizacion.PerfilTipo> Items()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                _entities = dh.Items().Cast<Entities.Tables.Visualizacion.PerfilTipo>().ToList<Entities.Tables.Visualizacion.PerfilTipo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.PerfilTipo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.PerfilTipo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets Entities.Tables.Visualizacion.PerfilTipo items with parameters.
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsAdministrador"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Tables.Visualizacion.PerfilTipo> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsAdministrador,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.Clear();
                if (Id != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Nombre, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Descripcion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsAdministrador != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsAdministrador, sqlEnum.OperandEnum.Equal, EsAdministrador);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.EsAdministrador, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, EsAdministrador);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.Habilitado, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaCreacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.UsuarioModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(sqlEnum.ConjunctionEnum.AND,ColumnEnum.FechaModificacion, Permaquim.Depositary.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            /// <summary>
            /// Adds an instance of Entities.Tables.Visualizacion.PerfilTipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.PerfilTipo Add(Entities.Tables.Visualizacion.PerfilTipo item)
            {
                return (Entities.Tables.Visualizacion.PerfilTipo)base.Add((IDataItem)item);
            }
            /// <summary>
            /// Adds or updates an instance of Entities.Tables.Visualizacion.PerfilTipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Entities.Tables.Visualizacion.PerfilTipo AddOrUpdate(Entities.Tables.Visualizacion.PerfilTipo item)
            {
                 if (Items(item.Id).Count == 0)
                 {
                     return (Entities.Tables.Visualizacion.PerfilTipo)base.Add((IDataItem)item);
                 }
                 else
                 {
                     Update(item);
                     return item;
                 }
             }
            /// <summary>
            /// Updates an instance of Entities.Tables.Visualizacion.PerfilTipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns><Int64/returns>
            public Int64 Update(Entities.Tables.Visualizacion.PerfilTipo item)
            {
                return base.Update((IDataItem)item);
            }
            /// Updates an instance of Entities.Tables.Visualizacion.PerfilTipo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsAdministrador"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 id,String nombre,String descripcion,Boolean esadministrador,Boolean habilitado,Int64 usuariocreacion,DateTime fechacreacion,Int64? usuariomodificacion,DateTime? fechamodificacion)
            {
                return base.Update((IDataItem) new Entities.Tables.Visualizacion.PerfilTipo {Id = id,Nombre = nombre,Descripcion = descripcion,EsAdministrador = esadministrador,Habilitado = habilitado,UsuarioCreacion = usuariocreacion,FechaCreacion = fechacreacion,UsuarioModificacion = usuariomodificacion,FechaModificacion = fechamodificacion});
            }
            /// <summary>
            /// Deletes an instance of Entities.Tables.Visualizacion.PerfilTipo
            /// </summary>
            /// <param name="item"></param>
            /// <returns></returns>
            public Int64 Delete(Entities.Tables.Visualizacion.PerfilTipo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// <summary>
            /// Deletes Entities.Tables.Visualizacion.PerfilTipo with where conditions
            /// </summary>
            /// <returns></returns>
            public new Int64 Delete()
            {
                DataHandler dh =  new DataHandler(this._dataItem);
                dh.WhereParameter = this.Where;
                dh.OrderByParameter = this.OrderBy;
                dh.GroupByParameter = this.GroupBy;
                return dh.Delete();
            }
            /// <summary>
            /// Deletes by Pks
            /// </summary>
            /// <returns></returns>
            public Int64 Delete(Int64 id)
            {
                return base.DeleteItem((IDataItem) new Entities.Tables.Visualizacion.PerfilTipo {Id = id});
            }
            /// <summary>
            /// Holds last Items() executed.
            /// </summary>
            /// <returns>Last Items()</returns>
            public List<Entities.Tables.Visualizacion.PerfilTipo> Result
            {
                get{return _entities;}
            }
            public class WhereCollection : WhereParameter {
                 public void Add(ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand,object value)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, Permaquim.Depositary.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void AddOperand(Permaquim.Depositary.sqlEnum.ConjunctionEnum Conjunction)
                 {
                     base.AddConjunction(Conjunction);
                 }
                 public void OpenParentheses()
                 {
                     base.OpenParentheses();
                 }
                 public void CloseParentheses()
                 {
                     base.CloseParentheses();
                 }
                 public void Add(Permaquim.Depositary.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, Permaquim.Depositary.sqlEnum.OperandEnum operand, object value)
                 {
                     base.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public new void Clear()
                 {
                     base.Clear();
                 }
                 public new long Count
                 {
                     get {
                         return base.Count;
                     }
                 }
            }
            public class OrderByCollection : OrderByParameter {
                 public void Add(ColumnEnum column, Permaquim.Depositary.sqlEnum.DirEnum direction = Permaquim.Depositary.sqlEnum.DirEnum.ASC)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class GroupByCollection : GroupByParameter {
                 public void Add(ColumnEnum column)
                 {
                     base.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PerfilTipo
	} //namespace Permaquim.Depositary.Business.Tables.Visualizacion
