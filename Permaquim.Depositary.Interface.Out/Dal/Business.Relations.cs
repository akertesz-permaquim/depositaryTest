using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
	namespace DefaultNamespace.Business.Relations.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Configuracion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					ValidacionDatoId,
					Descripcion,
					Clave,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Aplicacion.Configuracion> _cacheItemList = new List<Entities.Relations.Aplicacion.Configuracion>();
			   protected List<Entities.Relations.Aplicacion.Configuracion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Configuracion() : base()
            {
                base._dataItem = new Entities.Relations.Aplicacion.Configuracion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Aplicacion.Configuracion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Configuracion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Clave'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Aplicacion.Configuracion</returns>
			public Entities.Relations.Aplicacion.Configuracion Add(DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Aplicacion.Configuracion)base.Add(new Entities.Relations.Aplicacion.Configuracion(AplicacionId,ValidacionDatoId,Descripcion,Clave,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Aplicacion.Configuracion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Aplicacion.Configuracion>().ToList<Entities.Relations.Aplicacion.Configuracion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Aplicacion.Configuracion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.Configuracion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.Configuracion> Items(Int64? Id,Int64? AplicacionId,Int64? ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (ValidacionDatoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Aplicacion.Configuracion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Aplicacion.Configuracion Add(Entities.Relations.Aplicacion.Configuracion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Aplicacion.Configuracion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Aplicacion.Configuracion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Aplicacion.Configuracion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Aplicacion.Configuracion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 AplicacionId,Int64 ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Aplicacion.Configuracion item = new Entities.Tables.Aplicacion.Configuracion();
                 item.Id = Id;
                 item.AplicacionId = AplicacionId;
                 item.ValidacionDatoId = ValidacionDatoId;
                 item.Descripcion = Descripcion;
                 item.Clave = Clave;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Configuracion
	} //namespace DefaultNamespace.Business.Relations.Aplicacion
	namespace DefaultNamespace.Business.Relations.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionEmpresa : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EmpresaId,
					ValidacionDatoId,
					Descripcion,
					Clave,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> _cacheItemList = new List<Entities.Relations.Aplicacion.ConfiguracionEmpresa>();
			   protected List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ConfiguracionEmpresa() : base()
            {
                base._dataItem = new Entities.Relations.Aplicacion.ConfiguracionEmpresa();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Aplicacion.ConfiguracionEmpresa item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionEmpresa Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Clave'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Aplicacion.ConfiguracionEmpresa</returns>
			public Entities.Relations.Aplicacion.ConfiguracionEmpresa Add(DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Aplicacion.ConfiguracionEmpresa)base.Add(new Entities.Relations.Aplicacion.ConfiguracionEmpresa(EmpresaId,ValidacionDatoId,Descripcion,Clave,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Aplicacion.ConfiguracionEmpresa>().ToList<Entities.Relations.Aplicacion.ConfiguracionEmpresa>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Aplicacion.ConfiguracionEmpresa items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> Items(Int64? Id,Int64? EmpresaId,Int64? ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (ValidacionDatoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Aplicacion.ConfiguracionEmpresa> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Aplicacion.ConfiguracionEmpresa Add(Entities.Relations.Aplicacion.ConfiguracionEmpresa item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Aplicacion.ConfiguracionEmpresa)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Aplicacion.ConfiguracionEmpresa item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Aplicacion.ConfiguracionEmpresa item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Aplicacion.ConfiguracionEmpresa with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Clave"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EmpresaId,Int64 ValidacionDatoId,String Descripcion,String Clave,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Aplicacion.ConfiguracionEmpresa item = new Entities.Tables.Aplicacion.ConfiguracionEmpresa();
                 item.Id = Id;
                 item.EmpresaId = EmpresaId;
                 item.ValidacionDatoId = ValidacionDatoId;
                 item.Descripcion = Descripcion;
                 item.Clave = Clave;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionEmpresa
	} //namespace DefaultNamespace.Business.Relations.Aplicacion
	namespace DefaultNamespace.Business.Relations.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionTipoDato : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> _cacheItemList = new List<Entities.Relations.Aplicacion.ConfiguracionTipoDato>();
			   protected List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ConfiguracionTipoDato() : base()
            {
                base._dataItem = new Entities.Relations.Aplicacion.ConfiguracionTipoDato();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Aplicacion.ConfiguracionTipoDato item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionTipoDato Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Aplicacion.ConfiguracionTipoDato</returns>
			public Entities.Relations.Aplicacion.ConfiguracionTipoDato Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Aplicacion.ConfiguracionTipoDato)base.Add(new Entities.Relations.Aplicacion.ConfiguracionTipoDato(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Aplicacion.ConfiguracionTipoDato>().ToList<Entities.Relations.Aplicacion.ConfiguracionTipoDato>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Aplicacion.ConfiguracionTipoDato items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Aplicacion.ConfiguracionTipoDato> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Aplicacion.ConfiguracionTipoDato Add(Entities.Relations.Aplicacion.ConfiguracionTipoDato item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Aplicacion.ConfiguracionTipoDato)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Aplicacion.ConfiguracionTipoDato item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Aplicacion.ConfiguracionTipoDato item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Aplicacion.ConfiguracionTipoDato with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Aplicacion.ConfiguracionTipoDato item = new Entities.Tables.Aplicacion.ConfiguracionTipoDato();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionTipoDato
	} //namespace DefaultNamespace.Business.Relations.Aplicacion
	namespace DefaultNamespace.Business.Relations.Aplicacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionValidacionDato : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoDatoId,
					Nombre,
					Descripcion,
					ExpresionRegular,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> _cacheItemList = new List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato>();
			   protected List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ConfiguracionValidacionDato() : base()
            {
                base._dataItem = new Entities.Relations.Aplicacion.ConfiguracionValidacionDato();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Aplicacion.ConfiguracionValidacionDato item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionValidacionDato Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionTipoDato TipoDatoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='ExpresionRegular'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Aplicacion.ConfiguracionValidacionDato</returns>
			public Entities.Relations.Aplicacion.ConfiguracionValidacionDato Add(DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionTipoDato TipoDatoId,String Nombre,String Descripcion,String ExpresionRegular,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Aplicacion.ConfiguracionValidacionDato)base.Add(new Entities.Relations.Aplicacion.ConfiguracionValidacionDato(TipoDatoId,Nombre,Descripcion,ExpresionRegular,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Aplicacion.ConfiguracionValidacionDato>().ToList<Entities.Relations.Aplicacion.ConfiguracionValidacionDato>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Aplicacion.ConfiguracionValidacionDato items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoDatoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ExpresionRegular"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> Items(Int64? Id,Int64? TipoDatoId,String Nombre,String Descripcion,String ExpresionRegular,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoDatoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoDatoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoDatoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (ExpresionRegular != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ExpresionRegular, DefaultNamespace.sqlEnum.OperandEnum.Equal, ExpresionRegular);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ExpresionRegular, DefaultNamespace.sqlEnum.OperandEnum.Equal, ExpresionRegular);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Aplicacion.ConfiguracionValidacionDato> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Aplicacion.ConfiguracionValidacionDato Add(Entities.Relations.Aplicacion.ConfiguracionValidacionDato item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Aplicacion.ConfiguracionValidacionDato)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Aplicacion.ConfiguracionValidacionDato item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Aplicacion.ConfiguracionValidacionDato item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Aplicacion.ConfiguracionValidacionDato with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoDatoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ExpresionRegular"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoDatoId,String Nombre,String Descripcion,String ExpresionRegular,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Aplicacion.ConfiguracionValidacionDato item = new Entities.Tables.Aplicacion.ConfiguracionValidacionDato();
                 item.Id = Id;
                 item.TipoDatoId = TipoDatoId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.ExpresionRegular = ExpresionRegular;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionValidacionDato
	} //namespace DefaultNamespace.Business.Relations.Aplicacion
	namespace DefaultNamespace.Business.Relations.Auditoria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Log : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					AplicacionId,
					Fecha,
					Descripcion,
					Detalle,
					Modulo,
					Metodo,
					UsuarioId
				}
			   protected List<Entities.Relations.Auditoria.Log> _cacheItemList = new List<Entities.Relations.Auditoria.Log>();
			   protected List<Entities.Relations.Auditoria.Log> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Log() : base()
            {
                base._dataItem = new Entities.Relations.Auditoria.Log();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Auditoria.Log item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Log Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Auditoria.TipoLog TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='Fecha'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Detalle'></param>
         /// <param name='Modulo'></param>
         /// <param name='Metodo'></param>
         /// <param name='UsuarioId'></param>
         /// <returns>Entities.Relations.Auditoria.Log</returns>
			public Entities.Relations.Auditoria.Log Add(DefaultNamespace.Entities.Relations.Auditoria.TipoLog TipoId,DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,DateTime Fecha,String Descripcion,String Detalle,String Modulo,String Metodo,Int64 UsuarioId) 
			{
			  return (Entities.Relations.Auditoria.Log)base.Add(new Entities.Relations.Auditoria.Log(TipoId,AplicacionId,Fecha,Descripcion,Detalle,Modulo,Metodo,UsuarioId));
			}
            public new List<Entities.Relations.Auditoria.Log> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Auditoria.Log>().ToList<Entities.Relations.Auditoria.Log>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Auditoria.Log items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Auditoria.Log> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Fecha"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Detalle"></param>
            /// <param name="Modulo"></param>
            /// <param name="Metodo"></param>
            /// <param name="UsuarioId"></param>
            /// <returns></returns>
            public List<Entities.Relations.Auditoria.Log> Items(Int64? Id,Int64? TipoId,Int64? AplicacionId,DateTime? Fecha,String Descripcion,String Detalle,String Modulo,String Metodo,Int64? UsuarioId)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Detalle != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Detalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, Detalle);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Detalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, Detalle);
                    }
                   
                }
                if (Modulo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Modulo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Modulo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Modulo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Modulo);
                    }
                   
                }
                if (Metodo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Metodo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Metodo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Metodo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Metodo);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Auditoria.Log> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Auditoria.Log Add(Entities.Relations.Auditoria.Log item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Auditoria.Log)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Auditoria.Log item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Auditoria.Log item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Auditoria.Log with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Fecha"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Detalle"></param>
            /// <param name="Modulo"></param>
            /// <param name="Metodo"></param>
            /// <param name="UsuarioId"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 AplicacionId,DateTime Fecha,String Descripcion,String Detalle,String Modulo,String Metodo,Int64 UsuarioId)
            {
                 Entities.Tables.Auditoria.Log item = new Entities.Tables.Auditoria.Log();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.AplicacionId = AplicacionId;
                 item.Fecha = Fecha;
                 item.Descripcion = Descripcion;
                 item.Detalle = Detalle;
                 item.Modulo = Modulo;
                 item.Metodo = Metodo;
                 item.UsuarioId = UsuarioId;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Log
	} //namespace DefaultNamespace.Business.Relations.Auditoria
	namespace DefaultNamespace.Business.Relations.Auditoria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoLog : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Auditoria.TipoLog> _cacheItemList = new List<Entities.Relations.Auditoria.TipoLog>();
			   protected List<Entities.Relations.Auditoria.TipoLog> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoLog() : base()
            {
                base._dataItem = new Entities.Relations.Auditoria.TipoLog();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Auditoria.TipoLog item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoLog Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Auditoria.TipoLog</returns>
			public Entities.Relations.Auditoria.TipoLog Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Auditoria.TipoLog)base.Add(new Entities.Relations.Auditoria.TipoLog(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Auditoria.TipoLog> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Auditoria.TipoLog>().ToList<Entities.Relations.Auditoria.TipoLog>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Auditoria.TipoLog items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Auditoria.TipoLog> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Auditoria.TipoLog> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Auditoria.TipoLog> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Auditoria.TipoLog Add(Entities.Relations.Auditoria.TipoLog item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Auditoria.TipoLog)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Auditoria.TipoLog item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Auditoria.TipoLog item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Auditoria.TipoLog with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Auditoria.TipoLog item = new Entities.Tables.Auditoria.TipoLog();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoLog
	} //namespace DefaultNamespace.Business.Relations.Auditoria
	namespace DefaultNamespace.Business.Relations.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Banco : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					PaisId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Banca.Banco> _cacheItemList = new List<Entities.Relations.Banca.Banco>();
			   protected List<Entities.Relations.Banca.Banco> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Banco() : base()
            {
                base._dataItem = new Entities.Relations.Banca.Banco();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Banca.Banco item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Banco Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Pais PaisId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Banca.Banco</returns>
			public Entities.Relations.Banca.Banco Add(String Nombre,String Descripcion,String Codigo,DefaultNamespace.Entities.Relations.Geografia.Pais PaisId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Banca.Banco)base.Add(new Entities.Relations.Banca.Banco(Nombre,Descripcion,Codigo,PaisId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Banca.Banco> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Banca.Banco>().ToList<Entities.Relations.Banca.Banco>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Banca.Banco items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.Banco> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="PaisId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.Banco> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,Int64? PaisId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Banca.Banco> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Banca.Banco Add(Entities.Relations.Banca.Banco item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Banca.Banco)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Banca.Banco item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Banca.Banco item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Banca.Banco with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="PaisId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Codigo,Int64 PaisId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Banca.Banco item = new Entities.Tables.Banca.Banco();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Codigo = Codigo;
                 item.PaisId = PaisId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Banco
	} //namespace DefaultNamespace.Business.Relations.Banca
	namespace DefaultNamespace.Business.Relations.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Cuenta : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					EmpresaId,
					Nombre,
					Numero,
					Alias,
					CBU,
					BancoId,
					SucursalBancaria,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Banca.Cuenta> _cacheItemList = new List<Entities.Relations.Banca.Cuenta>();
			   protected List<Entities.Relations.Banca.Cuenta> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Cuenta() : base()
            {
                base._dataItem = new Entities.Relations.Banca.Cuenta();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Banca.Cuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Cuenta Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Banca.TipoCuenta TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Numero'></param>
         /// <param name='Alias'></param>
         /// <param name='CBU'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Banca.Banco BancoId'></param>
         /// <param name='SucursalBancaria'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Banca.Cuenta</returns>
			public Entities.Relations.Banca.Cuenta Add(DefaultNamespace.Entities.Relations.Banca.TipoCuenta TipoId,DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,String Nombre,String Numero,String Alias,String CBU,DefaultNamespace.Entities.Relations.Banca.Banco BancoId,String SucursalBancaria,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Banca.Cuenta)base.Add(new Entities.Relations.Banca.Cuenta(TipoId,EmpresaId,Nombre,Numero,Alias,CBU,BancoId,SucursalBancaria,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Banca.Cuenta> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Banca.Cuenta>().ToList<Entities.Relations.Banca.Cuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Banca.Cuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.Cuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Numero"></param>
            /// <param name="Alias"></param>
            /// <param name="CBU"></param>
            /// <param name="BancoId"></param>
            /// <param name="SucursalBancaria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.Cuenta> Items(Int64? Id,Int64? TipoId,Int64? EmpresaId,String Nombre,String Numero,String Alias,String CBU,Int64? BancoId,String SucursalBancaria,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Numero != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Numero, DefaultNamespace.sqlEnum.OperandEnum.Equal, Numero);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Numero, DefaultNamespace.sqlEnum.OperandEnum.Equal, Numero);
                    }
                   
                }
                if (Alias != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Alias, DefaultNamespace.sqlEnum.OperandEnum.Equal, Alias);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Alias, DefaultNamespace.sqlEnum.OperandEnum.Equal, Alias);
                    }
                   
                }
                if (CBU != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CBU, DefaultNamespace.sqlEnum.OperandEnum.Equal, CBU);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CBU, DefaultNamespace.sqlEnum.OperandEnum.Equal, CBU);
                    }
                   
                }
                if (BancoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BancoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, BancoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BancoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, BancoId);
                    }
                   
                }
                if (SucursalBancaria != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalBancaria, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalBancaria);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SucursalBancaria, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalBancaria);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Banca.Cuenta> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Banca.Cuenta Add(Entities.Relations.Banca.Cuenta item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Banca.Cuenta)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Banca.Cuenta item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Banca.Cuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Banca.Cuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Numero"></param>
            /// <param name="Alias"></param>
            /// <param name="CBU"></param>
            /// <param name="BancoId"></param>
            /// <param name="SucursalBancaria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 EmpresaId,String Nombre,String Numero,String Alias,String CBU,Int64 BancoId,String SucursalBancaria,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Banca.Cuenta item = new Entities.Tables.Banca.Cuenta();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.EmpresaId = EmpresaId;
                 item.Nombre = Nombre;
                 item.Numero = Numero;
                 item.Alias = Alias;
                 item.CBU = CBU;
                 item.BancoId = BancoId;
                 item.SucursalBancaria = SucursalBancaria;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Cuenta
	} //namespace DefaultNamespace.Business.Relations.Banca
	namespace DefaultNamespace.Business.Relations.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoCuenta : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MonedaId,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Banca.TipoCuenta> _cacheItemList = new List<Entities.Relations.Banca.TipoCuenta>();
			   protected List<Entities.Relations.Banca.TipoCuenta> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoCuenta() : base()
            {
                base._dataItem = new Entities.Relations.Banca.TipoCuenta();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Banca.TipoCuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoCuenta Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Banca.TipoCuenta</returns>
			public Entities.Relations.Banca.TipoCuenta Add(DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Banca.TipoCuenta)base.Add(new Entities.Relations.Banca.TipoCuenta(MonedaId,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Banca.TipoCuenta> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Banca.TipoCuenta>().ToList<Entities.Relations.Banca.TipoCuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Banca.TipoCuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.TipoCuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.TipoCuenta> Items(Int64? Id,Int64? MonedaId,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Banca.TipoCuenta> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Banca.TipoCuenta Add(Entities.Relations.Banca.TipoCuenta item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Banca.TipoCuenta)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Banca.TipoCuenta item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Banca.TipoCuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Banca.TipoCuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 MonedaId,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Banca.TipoCuenta item = new Entities.Tables.Banca.TipoCuenta();
                 item.Id = Id;
                 item.MonedaId = MonedaId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoCuenta
	} //namespace DefaultNamespace.Business.Relations.Banca
	namespace DefaultNamespace.Business.Relations.Banca {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioCuenta : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					CuentaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Banca.UsuarioCuenta> _cacheItemList = new List<Entities.Relations.Banca.UsuarioCuenta>();
			   protected List<Entities.Relations.Banca.UsuarioCuenta> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public UsuarioCuenta() : base()
            {
                base._dataItem = new Entities.Relations.Banca.UsuarioCuenta();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Banca.UsuarioCuenta item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioCuenta Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Banca.Cuenta CuentaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Banca.UsuarioCuenta</returns>
			public Entities.Relations.Banca.UsuarioCuenta Add(DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId,DefaultNamespace.Entities.Relations.Banca.Cuenta CuentaId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Banca.UsuarioCuenta)base.Add(new Entities.Relations.Banca.UsuarioCuenta(UsuarioId,CuentaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Banca.UsuarioCuenta> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Banca.UsuarioCuenta>().ToList<Entities.Relations.Banca.UsuarioCuenta>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Banca.UsuarioCuenta items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.UsuarioCuenta> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Banca.UsuarioCuenta> Items(Int64? Id,Int64? UsuarioId,Int64? CuentaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (CuentaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CuentaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CuentaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Banca.UsuarioCuenta> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Banca.UsuarioCuenta Add(Entities.Relations.Banca.UsuarioCuenta item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Banca.UsuarioCuenta)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Banca.UsuarioCuenta item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Banca.UsuarioCuenta item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Banca.UsuarioCuenta with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 UsuarioId,Int64 CuentaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Banca.UsuarioCuenta item = new Entities.Tables.Banca.UsuarioCuenta();
                 item.Id = Id;
                 item.UsuarioId = UsuarioId;
                 item.CuentaId = CuentaId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioCuenta
	} //namespace DefaultNamespace.Business.Relations.Banca
	namespace DefaultNamespace.Business.Relations.Biometria {
	    /// <summary>
	    /// 
	    /// </summary>
		public class HuellaDactilar : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					Dedo,
					Huella,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Biometria.HuellaDactilar> _cacheItemList = new List<Entities.Relations.Biometria.HuellaDactilar>();
			   protected List<Entities.Relations.Biometria.HuellaDactilar> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public HuellaDactilar() : base()
            {
                base._dataItem = new Entities.Relations.Biometria.HuellaDactilar();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Biometria.HuellaDactilar item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// HuellaDactilar Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='Dedo'></param>
         /// <param name='Huella'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Biometria.HuellaDactilar</returns>
			public Entities.Relations.Biometria.HuellaDactilar Add(Int64 UsuarioId,Byte Dedo,String Huella,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Biometria.HuellaDactilar)base.Add(new Entities.Relations.Biometria.HuellaDactilar(UsuarioId,Dedo,Huella,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Biometria.HuellaDactilar> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Biometria.HuellaDactilar>().ToList<Entities.Relations.Biometria.HuellaDactilar>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Biometria.HuellaDactilar items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Biometria.HuellaDactilar> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Dedo"></param>
            /// <param name="Huella"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Biometria.HuellaDactilar> Items(Int64? Id,Int64? UsuarioId,Byte? Dedo,String Huella,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (Dedo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Dedo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Dedo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Dedo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Dedo);
                    }
                   
                }
                if (Huella != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Huella, DefaultNamespace.sqlEnum.OperandEnum.Equal, Huella);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Huella, DefaultNamespace.sqlEnum.OperandEnum.Equal, Huella);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Biometria.HuellaDactilar> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Biometria.HuellaDactilar Add(Entities.Relations.Biometria.HuellaDactilar item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Biometria.HuellaDactilar)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Biometria.HuellaDactilar item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Biometria.HuellaDactilar item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Biometria.HuellaDactilar with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Dedo"></param>
            /// <param name="Huella"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 UsuarioId,Byte Dedo,String Huella,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Biometria.HuellaDactilar item = new Entities.Tables.Biometria.HuellaDactilar();
                 item.Id = Id;
                 item.UsuarioId = UsuarioId;
                 item.Dedo = Dedo;
                 item.Huella = Huella;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class HuellaDactilar
	} //namespace DefaultNamespace.Business.Relations.Biometria
	namespace DefaultNamespace.Business.Relations.Customizador {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Entidad : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Tipo,
					Nombre,
					Esquema,
					HabilitarAgrupamiento,
					HabilitarMovilidad,
					HabilitarFiltrado,
					HabilitarColumnasOpcionales,
					HabilitarOrdenamiento,
					HabilitarRedimensionamiento,
					HabilitarPaginado,
					HabilitarAuditoria,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Customizador.Entidad> _cacheItemList = new List<Entities.Relations.Customizador.Entidad>();
			   protected List<Entities.Relations.Customizador.Entidad> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Entidad() : base()
            {
                base._dataItem = new Entities.Relations.Customizador.Entidad();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Customizador.Entidad item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Entidad Add Method
         /// </summary>
         /// <param name='Tipo'></param>
         /// <param name='Nombre'></param>
         /// <param name='Esquema'></param>
         /// <param name='HabilitarAgrupamiento'></param>
         /// <param name='HabilitarMovilidad'></param>
         /// <param name='HabilitarFiltrado'></param>
         /// <param name='HabilitarColumnasOpcionales'></param>
         /// <param name='HabilitarOrdenamiento'></param>
         /// <param name='HabilitarRedimensionamiento'></param>
         /// <param name='HabilitarPaginado'></param>
         /// <param name='HabilitarAuditoria'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Customizador.Entidad</returns>
			public Entities.Relations.Customizador.Entidad Add(String Tipo,String Nombre,String Esquema,Boolean HabilitarAgrupamiento,Boolean HabilitarMovilidad,Boolean HabilitarFiltrado,Boolean HabilitarColumnasOpcionales,Boolean HabilitarOrdenamiento,Boolean HabilitarRedimensionamiento,Boolean HabilitarPaginado,Boolean HabilitarAuditoria,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Customizador.Entidad)base.Add(new Entities.Relations.Customizador.Entidad(Tipo,Nombre,Esquema,HabilitarAgrupamiento,HabilitarMovilidad,HabilitarFiltrado,HabilitarColumnasOpcionales,HabilitarOrdenamiento,HabilitarRedimensionamiento,HabilitarPaginado,HabilitarAuditoria,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Customizador.Entidad> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Customizador.Entidad>().ToList<Entities.Relations.Customizador.Entidad>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Customizador.Entidad items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Customizador.Entidad> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Tipo"></param>
            /// <param name="Nombre"></param>
            /// <param name="Esquema"></param>
            /// <param name="HabilitarAgrupamiento"></param>
            /// <param name="HabilitarMovilidad"></param>
            /// <param name="HabilitarFiltrado"></param>
            /// <param name="HabilitarColumnasOpcionales"></param>
            /// <param name="HabilitarOrdenamiento"></param>
            /// <param name="HabilitarRedimensionamiento"></param>
            /// <param name="HabilitarPaginado"></param>
            /// <param name="HabilitarAuditoria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Customizador.Entidad> Items(Int64? Id,String Tipo,String Nombre,String Esquema,Boolean? HabilitarAgrupamiento,Boolean? HabilitarMovilidad,Boolean? HabilitarFiltrado,Boolean? HabilitarColumnasOpcionales,Boolean? HabilitarOrdenamiento,Boolean? HabilitarRedimensionamiento,Boolean? HabilitarPaginado,Boolean? HabilitarAuditoria,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Tipo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Tipo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Tipo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Tipo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Tipo);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Esquema != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Esquema, DefaultNamespace.sqlEnum.OperandEnum.Equal, Esquema);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Esquema, DefaultNamespace.sqlEnum.OperandEnum.Equal, Esquema);
                    }
                   
                }
                if (HabilitarAgrupamiento != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarAgrupamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarAgrupamiento);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarAgrupamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarAgrupamiento);
                    }
                   
                }
                if (HabilitarMovilidad != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarMovilidad, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarMovilidad);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarMovilidad, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarMovilidad);
                    }
                   
                }
                if (HabilitarFiltrado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarFiltrado, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarFiltrado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarFiltrado, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarFiltrado);
                    }
                   
                }
                if (HabilitarColumnasOpcionales != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarColumnasOpcionales, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarColumnasOpcionales);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarColumnasOpcionales, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarColumnasOpcionales);
                    }
                   
                }
                if (HabilitarOrdenamiento != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarOrdenamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarOrdenamiento);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarOrdenamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarOrdenamiento);
                    }
                   
                }
                if (HabilitarRedimensionamiento != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarRedimensionamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarRedimensionamiento);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarRedimensionamiento, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarRedimensionamiento);
                    }
                   
                }
                if (HabilitarPaginado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarPaginado, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarPaginado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarPaginado, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarPaginado);
                    }
                   
                }
                if (HabilitarAuditoria != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.HabilitarAuditoria, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarAuditoria);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.HabilitarAuditoria, DefaultNamespace.sqlEnum.OperandEnum.Equal, HabilitarAuditoria);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Customizador.Entidad> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Customizador.Entidad Add(Entities.Relations.Customizador.Entidad item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Customizador.Entidad)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Customizador.Entidad item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Customizador.Entidad item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Customizador.Entidad with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Tipo"></param>
            /// <param name="Nombre"></param>
            /// <param name="Esquema"></param>
            /// <param name="HabilitarAgrupamiento"></param>
            /// <param name="HabilitarMovilidad"></param>
            /// <param name="HabilitarFiltrado"></param>
            /// <param name="HabilitarColumnasOpcionales"></param>
            /// <param name="HabilitarOrdenamiento"></param>
            /// <param name="HabilitarRedimensionamiento"></param>
            /// <param name="HabilitarPaginado"></param>
            /// <param name="HabilitarAuditoria"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Tipo,String Nombre,String Esquema,Boolean HabilitarAgrupamiento,Boolean HabilitarMovilidad,Boolean HabilitarFiltrado,Boolean HabilitarColumnasOpcionales,Boolean HabilitarOrdenamiento,Boolean HabilitarRedimensionamiento,Boolean HabilitarPaginado,Boolean HabilitarAuditoria,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Customizador.Entidad item = new Entities.Tables.Customizador.Entidad();
                 item.Id = Id;
                 item.Tipo = Tipo;
                 item.Nombre = Nombre;
                 item.Esquema = Esquema;
                 item.HabilitarAgrupamiento = HabilitarAgrupamiento;
                 item.HabilitarMovilidad = HabilitarMovilidad;
                 item.HabilitarFiltrado = HabilitarFiltrado;
                 item.HabilitarColumnasOpcionales = HabilitarColumnasOpcionales;
                 item.HabilitarOrdenamiento = HabilitarOrdenamiento;
                 item.HabilitarRedimensionamiento = HabilitarRedimensionamiento;
                 item.HabilitarPaginado = HabilitarPaginado;
                 item.HabilitarAuditoria = HabilitarAuditoria;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Entidad
	} //namespace DefaultNamespace.Business.Relations.Customizador
	namespace DefaultNamespace.Business.Relations.Customizador {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EntidadAtributo : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadId,
					Nombre,
					VisibleEnGrilla,
					VisibleEnSelectorColumnas,
					Redimensionable,
					Agrupable,
					Movible,
					Ordenable,
					Filtrable,
					PosicionEnGrilla,
					AnchoMinimoEnGrilla,
					AnchoEnGrilla,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Customizador.EntidadAtributo> _cacheItemList = new List<Entities.Relations.Customizador.EntidadAtributo>();
			   protected List<Entities.Relations.Customizador.EntidadAtributo> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EntidadAtributo() : base()
            {
                base._dataItem = new Entities.Relations.Customizador.EntidadAtributo();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Customizador.EntidadAtributo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EntidadAtributo Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Customizador.Entidad EntidadId'></param>
         /// <param name='Nombre'></param>
         /// <param name='VisibleEnGrilla'></param>
         /// <param name='VisibleEnSelectorColumnas'></param>
         /// <param name='Redimensionable'></param>
         /// <param name='Agrupable'></param>
         /// <param name='Movible'></param>
         /// <param name='Ordenable'></param>
         /// <param name='Filtrable'></param>
         /// <param name='PosicionEnGrilla'></param>
         /// <param name='AnchoMinimoEnGrilla'></param>
         /// <param name='AnchoEnGrilla'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Customizador.EntidadAtributo</returns>
			public Entities.Relations.Customizador.EntidadAtributo Add(DefaultNamespace.Entities.Relations.Customizador.Entidad EntidadId,String Nombre,Boolean VisibleEnGrilla,Boolean VisibleEnSelectorColumnas,Boolean Redimensionable,Boolean Agrupable,Boolean Movible,Boolean Ordenable,Boolean Filtrable,Int32 PosicionEnGrilla,Int32 AnchoMinimoEnGrilla,Int32 AnchoEnGrilla,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Customizador.EntidadAtributo)base.Add(new Entities.Relations.Customizador.EntidadAtributo(EntidadId,Nombre,VisibleEnGrilla,VisibleEnSelectorColumnas,Redimensionable,Agrupable,Movible,Ordenable,Filtrable,PosicionEnGrilla,AnchoMinimoEnGrilla,AnchoEnGrilla,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Customizador.EntidadAtributo> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Customizador.EntidadAtributo>().ToList<Entities.Relations.Customizador.EntidadAtributo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Customizador.EntidadAtributo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Customizador.EntidadAtributo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Nombre"></param>
            /// <param name="VisibleEnGrilla"></param>
            /// <param name="VisibleEnSelectorColumnas"></param>
            /// <param name="Redimensionable"></param>
            /// <param name="Agrupable"></param>
            /// <param name="Movible"></param>
            /// <param name="Ordenable"></param>
            /// <param name="Filtrable"></param>
            /// <param name="PosicionEnGrilla"></param>
            /// <param name="AnchoMinimoEnGrilla"></param>
            /// <param name="AnchoEnGrilla"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Customizador.EntidadAtributo> Items(Int64? Id,Int64? EntidadId,String Nombre,Boolean? VisibleEnGrilla,Boolean? VisibleEnSelectorColumnas,Boolean? Redimensionable,Boolean? Agrupable,Boolean? Movible,Boolean? Ordenable,Boolean? Filtrable,Int32? PosicionEnGrilla,Int32? AnchoMinimoEnGrilla,Int32? AnchoEnGrilla,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (VisibleEnGrilla != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.VisibleEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, VisibleEnGrilla);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.VisibleEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, VisibleEnGrilla);
                    }
                   
                }
                if (VisibleEnSelectorColumnas != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.VisibleEnSelectorColumnas, DefaultNamespace.sqlEnum.OperandEnum.Equal, VisibleEnSelectorColumnas);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.VisibleEnSelectorColumnas, DefaultNamespace.sqlEnum.OperandEnum.Equal, VisibleEnSelectorColumnas);
                    }
                   
                }
                if (Redimensionable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Redimensionable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Redimensionable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Redimensionable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Redimensionable);
                    }
                   
                }
                if (Agrupable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Agrupable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Agrupable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Agrupable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Agrupable);
                    }
                   
                }
                if (Movible != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Movible, DefaultNamespace.sqlEnum.OperandEnum.Equal, Movible);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Movible, DefaultNamespace.sqlEnum.OperandEnum.Equal, Movible);
                    }
                   
                }
                if (Ordenable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Ordenable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Ordenable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Ordenable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Ordenable);
                    }
                   
                }
                if (Filtrable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Filtrable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Filtrable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Filtrable, DefaultNamespace.sqlEnum.OperandEnum.Equal, Filtrable);
                    }
                   
                }
                if (PosicionEnGrilla != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PosicionEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, PosicionEnGrilla);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PosicionEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, PosicionEnGrilla);
                    }
                   
                }
                if (AnchoMinimoEnGrilla != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoMinimoEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoMinimoEnGrilla);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoMinimoEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoMinimoEnGrilla);
                    }
                   
                }
                if (AnchoEnGrilla != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoEnGrilla);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoEnGrilla, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoEnGrilla);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Customizador.EntidadAtributo> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Customizador.EntidadAtributo Add(Entities.Relations.Customizador.EntidadAtributo item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Customizador.EntidadAtributo)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Customizador.EntidadAtributo item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Customizador.EntidadAtributo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Customizador.EntidadAtributo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Nombre"></param>
            /// <param name="VisibleEnGrilla"></param>
            /// <param name="VisibleEnSelectorColumnas"></param>
            /// <param name="Redimensionable"></param>
            /// <param name="Agrupable"></param>
            /// <param name="Movible"></param>
            /// <param name="Ordenable"></param>
            /// <param name="Filtrable"></param>
            /// <param name="PosicionEnGrilla"></param>
            /// <param name="AnchoMinimoEnGrilla"></param>
            /// <param name="AnchoEnGrilla"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EntidadId,String Nombre,Boolean VisibleEnGrilla,Boolean VisibleEnSelectorColumnas,Boolean Redimensionable,Boolean Agrupable,Boolean Movible,Boolean Ordenable,Boolean Filtrable,Int32 PosicionEnGrilla,Int32 AnchoMinimoEnGrilla,Int32 AnchoEnGrilla,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Customizador.EntidadAtributo item = new Entities.Tables.Customizador.EntidadAtributo();
                 item.Id = Id;
                 item.EntidadId = EntidadId;
                 item.Nombre = Nombre;
                 item.VisibleEnGrilla = VisibleEnGrilla;
                 item.VisibleEnSelectorColumnas = VisibleEnSelectorColumnas;
                 item.Redimensionable = Redimensionable;
                 item.Agrupable = Agrupable;
                 item.Movible = Movible;
                 item.Ordenable = Ordenable;
                 item.Filtrable = Filtrable;
                 item.PosicionEnGrilla = PosicionEnGrilla;
                 item.AnchoMinimoEnGrilla = AnchoMinimoEnGrilla;
                 item.AnchoEnGrilla = AnchoEnGrilla;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EntidadAtributo
	} //namespace DefaultNamespace.Business.Relations.Customizador
	namespace DefaultNamespace.Business.Relations.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Empresa : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					GrupoId,
					CodigoExterno,
					Direccion,
					CodigoPostalId,
					EstiloEsquemaId,
					LenguajeId,
					Habilitado,
					EsDefault,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Directorio.Empresa> _cacheItemList = new List<Entities.Relations.Directorio.Empresa>();
			   protected List<Entities.Relations.Directorio.Empresa> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Empresa() : base()
            {
                base._dataItem = new Entities.Relations.Directorio.Empresa();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Directorio.Empresa item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Empresa Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Grupo GrupoId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Direccion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.CodigoPostal CodigoPostalId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Estilo.Esquema EstiloEsquemaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='EsDefault'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Directorio.Empresa</returns>
			public Entities.Relations.Directorio.Empresa Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Directorio.Grupo GrupoId,String CodigoExterno,String Direccion,DefaultNamespace.Entities.Relations.Geografia.CodigoPostal CodigoPostalId,DefaultNamespace.Entities.Relations.Estilo.Esquema EstiloEsquemaId,DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId,Boolean Habilitado,Boolean EsDefault,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Directorio.Empresa)base.Add(new Entities.Relations.Directorio.Empresa(Nombre,Descripcion,GrupoId,CodigoExterno,Direccion,CodigoPostalId,EstiloEsquemaId,LenguajeId,Habilitado,EsDefault,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Directorio.Empresa> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Directorio.Empresa>().ToList<Entities.Relations.Directorio.Empresa>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Directorio.Empresa items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Empresa> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="GrupoId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="EstiloEsquemaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="EsDefault"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Empresa> Items(Int64? Id,String Nombre,String Descripcion,Int64? GrupoId,String CodigoExterno,String Direccion,Int64? CodigoPostalId,Int64? EstiloEsquemaId,Int64? LenguajeId,Boolean? Habilitado,Boolean? EsDefault,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (GrupoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.GrupoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, GrupoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.GrupoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, GrupoId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Direccion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Direccion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Direccion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                   
                }
                if (CodigoPostalId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoPostalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoPostalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                   
                }
                if (EstiloEsquemaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EstiloEsquemaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EstiloEsquemaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EstiloEsquemaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EstiloEsquemaId);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Directorio.Empresa> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Directorio.Empresa Add(Entities.Relations.Directorio.Empresa item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Directorio.Empresa)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Directorio.Empresa item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Directorio.Empresa item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Directorio.Empresa with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="GrupoId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="EstiloEsquemaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="EsDefault"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 GrupoId,String CodigoExterno,String Direccion,Int64 CodigoPostalId,Int64 EstiloEsquemaId,Int64 LenguajeId,Boolean Habilitado,Boolean EsDefault,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Directorio.Empresa item = new Entities.Tables.Directorio.Empresa();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.GrupoId = GrupoId;
                 item.CodigoExterno = CodigoExterno;
                 item.Direccion = Direccion;
                 item.CodigoPostalId = CodigoPostalId;
                 item.EstiloEsquemaId = EstiloEsquemaId;
                 item.LenguajeId = LenguajeId;
                 item.Habilitado = Habilitado;
                 item.EsDefault = EsDefault;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Empresa
	} //namespace DefaultNamespace.Business.Relations.Directorio
	namespace DefaultNamespace.Business.Relations.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Grupo : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Directorio.Grupo> _cacheItemList = new List<Entities.Relations.Directorio.Grupo>();
			   protected List<Entities.Relations.Directorio.Grupo> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Grupo() : base()
            {
                base._dataItem = new Entities.Relations.Directorio.Grupo();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Directorio.Grupo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Grupo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Directorio.Grupo</returns>
			public Entities.Relations.Directorio.Grupo Add(String Nombre,String Descripcion,String CodigoExterno,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Directorio.Grupo)base.Add(new Entities.Relations.Directorio.Grupo(Nombre,Descripcion,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Directorio.Grupo> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Directorio.Grupo>().ToList<Entities.Relations.Directorio.Grupo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Directorio.Grupo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Grupo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Grupo> Items(Int64? Id,String Nombre,String Descripcion,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Directorio.Grupo> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Directorio.Grupo Add(Entities.Relations.Directorio.Grupo item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Directorio.Grupo)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Directorio.Grupo item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Directorio.Grupo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Directorio.Grupo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Directorio.Grupo item = new Entities.Tables.Directorio.Grupo();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.CodigoExterno = CodigoExterno;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Grupo
	} //namespace DefaultNamespace.Business.Relations.Directorio
	namespace DefaultNamespace.Business.Relations.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RelacionMonedaSucursal : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MonedaId,
					SucursalId,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Directorio.RelacionMonedaSucursal> _cacheItemList = new List<Entities.Relations.Directorio.RelacionMonedaSucursal>();
			   protected List<Entities.Relations.Directorio.RelacionMonedaSucursal> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public RelacionMonedaSucursal() : base()
            {
                base._dataItem = new Entities.Relations.Directorio.RelacionMonedaSucursal();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Directorio.RelacionMonedaSucursal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RelacionMonedaSucursal Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Directorio.RelacionMonedaSucursal</returns>
			public Entities.Relations.Directorio.RelacionMonedaSucursal Add(DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId,Boolean EsDefault,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Directorio.RelacionMonedaSucursal)base.Add(new Entities.Relations.Directorio.RelacionMonedaSucursal(MonedaId,SucursalId,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Directorio.RelacionMonedaSucursal> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Directorio.RelacionMonedaSucursal>().ToList<Entities.Relations.Directorio.RelacionMonedaSucursal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Directorio.RelacionMonedaSucursal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.RelacionMonedaSucursal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.RelacionMonedaSucursal> Items(Int64? Id,Int64? MonedaId,Int64? SucursalId,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Directorio.RelacionMonedaSucursal> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Directorio.RelacionMonedaSucursal Add(Entities.Relations.Directorio.RelacionMonedaSucursal item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Directorio.RelacionMonedaSucursal)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Directorio.RelacionMonedaSucursal item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Directorio.RelacionMonedaSucursal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Directorio.RelacionMonedaSucursal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 MonedaId,Int64 SucursalId,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Directorio.RelacionMonedaSucursal item = new Entities.Tables.Directorio.RelacionMonedaSucursal();
                 item.Id = Id;
                 item.MonedaId = MonedaId;
                 item.SucursalId = SucursalId;
                 item.EsDefault = EsDefault;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RelacionMonedaSucursal
	} //namespace DefaultNamespace.Business.Relations.Directorio
	namespace DefaultNamespace.Business.Relations.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sector : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					SucursalId,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Directorio.Sector> _cacheItemList = new List<Entities.Relations.Directorio.Sector>();
			   protected List<Entities.Relations.Directorio.Sector> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Sector() : base()
            {
                base._dataItem = new Entities.Relations.Directorio.Sector();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Directorio.Sector item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sector Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Directorio.Sector</returns>
			public Entities.Relations.Directorio.Sector Add(DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId,String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Directorio.Sector)base.Add(new Entities.Relations.Directorio.Sector(SucursalId,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Directorio.Sector> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Directorio.Sector>().ToList<Entities.Relations.Directorio.Sector>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Directorio.Sector items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Sector> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SucursalId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Sector> Items(Int64? Id,Int64? SucursalId,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Directorio.Sector> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Directorio.Sector Add(Entities.Relations.Directorio.Sector item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Directorio.Sector)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Directorio.Sector item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Directorio.Sector item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Directorio.Sector with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SucursalId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 SucursalId,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Directorio.Sector item = new Entities.Tables.Directorio.Sector();
                 item.Id = Id;
                 item.SucursalId = SucursalId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sector
	} //namespace DefaultNamespace.Business.Relations.Directorio
	namespace DefaultNamespace.Business.Relations.Directorio {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sucursal : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EmpresaId,
					CodigoExterno,
					Direccion,
					CodigoPostalId,
					ZonaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Directorio.Sucursal> _cacheItemList = new List<Entities.Relations.Directorio.Sucursal>();
			   protected List<Entities.Relations.Directorio.Sucursal> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Sucursal() : base()
            {
                base._dataItem = new Entities.Relations.Directorio.Sucursal();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Directorio.Sucursal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sucursal Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Direccion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.CodigoPostal CodigoPostalId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Zona ZonaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Directorio.Sucursal</returns>
			public Entities.Relations.Directorio.Sucursal Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,String CodigoExterno,String Direccion,DefaultNamespace.Entities.Relations.Geografia.CodigoPostal CodigoPostalId,DefaultNamespace.Entities.Relations.Geografia.Zona ZonaId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Directorio.Sucursal)base.Add(new Entities.Relations.Directorio.Sucursal(Nombre,Descripcion,EmpresaId,CodigoExterno,Direccion,CodigoPostalId,ZonaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Directorio.Sucursal> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Directorio.Sucursal>().ToList<Entities.Relations.Directorio.Sucursal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Directorio.Sucursal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Sucursal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="ZonaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Directorio.Sucursal> Items(Int64? Id,String Nombre,String Descripcion,Int64? EmpresaId,String CodigoExterno,String Direccion,Int64? CodigoPostalId,Int64? ZonaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Direccion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Direccion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Direccion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Direccion);
                    }
                   
                }
                if (CodigoPostalId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoPostalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoPostalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoPostalId);
                    }
                   
                }
                if (ZonaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ZonaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ZonaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ZonaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ZonaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Directorio.Sucursal> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Directorio.Sucursal Add(Entities.Relations.Directorio.Sucursal item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Directorio.Sucursal)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Directorio.Sucursal item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Directorio.Sucursal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Directorio.Sucursal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Direccion"></param>
            /// <param name="CodigoPostalId"></param>
            /// <param name="ZonaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 EmpresaId,String CodigoExterno,String Direccion,Int64 CodigoPostalId,Int64 ZonaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Directorio.Sucursal item = new Entities.Tables.Directorio.Sucursal();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.EmpresaId = EmpresaId;
                 item.CodigoExterno = CodigoExterno;
                 item.Direccion = Direccion;
                 item.CodigoPostalId = CodigoPostalId;
                 item.ZonaId = ZonaId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sucursal
	} //namespace DefaultNamespace.Business.Relations.Directorio
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ComandoContadora : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoContadoraId,
					Nombre,
					Descripcion,
					Comando,
					TiempoDetencion,
					Respuesta,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.ComandoContadora> _cacheItemList = new List<Entities.Relations.Dispositivo.ComandoContadora>();
			   protected List<Entities.Relations.Dispositivo.ComandoContadora> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ComandoContadora() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.ComandoContadora();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.ComandoContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ComandoContadora Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.TipoContadora TipoContadoraId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Comando'></param>
         /// <param name='TiempoDetencion'></param>
         /// <param name='Respuesta'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.ComandoContadora</returns>
			public Entities.Relations.Dispositivo.ComandoContadora Add(DefaultNamespace.Entities.Relations.Dispositivo.TipoContadora TipoContadoraId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.ComandoContadora)base.Add(new Entities.Relations.Dispositivo.ComandoContadora(TipoContadoraId,Nombre,Descripcion,Comando,TiempoDetencion,Respuesta,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.ComandoContadora> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.ComandoContadora>().ToList<Entities.Relations.Dispositivo.ComandoContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.ComandoContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ComandoContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ComandoContadora> Items(Int64? Id,Int64? TipoContadoraId,String Nombre,String Descripcion,String Comando,Int64? TiempoDetencion,String Respuesta,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoContadoraId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoContadoraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoContadoraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Comando != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Comando, DefaultNamespace.sqlEnum.OperandEnum.Equal, Comando);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Comando, DefaultNamespace.sqlEnum.OperandEnum.Equal, Comando);
                    }
                   
                }
                if (TiempoDetencion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TiempoDetencion, DefaultNamespace.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TiempoDetencion, DefaultNamespace.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                   
                }
                if (Respuesta != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Respuesta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Respuesta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.ComandoContadora> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.ComandoContadora Add(Entities.Relations.Dispositivo.ComandoContadora item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.ComandoContadora)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.ComandoContadora item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.ComandoContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.ComandoContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoContadoraId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.ComandoContadora item = new Entities.Tables.Dispositivo.ComandoContadora();
                 item.Id = Id;
                 item.TipoContadoraId = TipoContadoraId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Comando = Comando;
                 item.TiempoDetencion = TiempoDetencion;
                 item.Respuesta = Respuesta;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ComandoContadora
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ComandoPlaca : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoPlacaId,
					Nombre,
					Descripcion,
					Comando,
					TiempoDetencion,
					Respuesta,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.ComandoPlaca> _cacheItemList = new List<Entities.Relations.Dispositivo.ComandoPlaca>();
			   protected List<Entities.Relations.Dispositivo.ComandoPlaca> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ComandoPlaca() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.ComandoPlaca();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.ComandoPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ComandoPlaca Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.TipoPlaca TipoPlacaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Comando'></param>
         /// <param name='TiempoDetencion'></param>
         /// <param name='Respuesta'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.ComandoPlaca</returns>
			public Entities.Relations.Dispositivo.ComandoPlaca Add(DefaultNamespace.Entities.Relations.Dispositivo.TipoPlaca TipoPlacaId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.ComandoPlaca)base.Add(new Entities.Relations.Dispositivo.ComandoPlaca(TipoPlacaId,Nombre,Descripcion,Comando,TiempoDetencion,Respuesta,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.ComandoPlaca> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.ComandoPlaca>().ToList<Entities.Relations.Dispositivo.ComandoPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.ComandoPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ComandoPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ComandoPlaca> Items(Int64? Id,Int64? TipoPlacaId,String Nombre,String Descripcion,String Comando,Int64? TiempoDetencion,String Respuesta,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoPlacaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoPlacaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoPlacaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Comando != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Comando, DefaultNamespace.sqlEnum.OperandEnum.Equal, Comando);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Comando, DefaultNamespace.sqlEnum.OperandEnum.Equal, Comando);
                    }
                   
                }
                if (TiempoDetencion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TiempoDetencion, DefaultNamespace.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TiempoDetencion, DefaultNamespace.sqlEnum.OperandEnum.Equal, TiempoDetencion);
                    }
                   
                }
                if (Respuesta != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Respuesta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Respuesta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Respuesta);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.ComandoPlaca> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.ComandoPlaca Add(Entities.Relations.Dispositivo.ComandoPlaca item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.ComandoPlaca)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.ComandoPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.ComandoPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.ComandoPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Comando"></param>
            /// <param name="TiempoDetencion"></param>
            /// <param name="Respuesta"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoPlacaId,String Nombre,String Descripcion,String Comando,Int64 TiempoDetencion,String Respuesta,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.ComandoPlaca item = new Entities.Tables.Dispositivo.ComandoPlaca();
                 item.Id = Id;
                 item.TipoPlacaId = TipoPlacaId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Comando = Comando;
                 item.TiempoDetencion = TiempoDetencion;
                 item.Respuesta = Respuesta;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ComandoPlaca
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class ConfiguracionDepositario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.ConfiguracionDepositario> _cacheItemList = new List<Entities.Relations.Dispositivo.ConfiguracionDepositario>();
			   protected List<Entities.Relations.Dispositivo.ConfiguracionDepositario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public ConfiguracionDepositario() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.ConfiguracionDepositario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.ConfiguracionDepositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// ConfiguracionDepositario Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.TipoConfiguracionDepositario TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.ConfiguracionDepositario</returns>
			public Entities.Relations.Dispositivo.ConfiguracionDepositario Add(DefaultNamespace.Entities.Relations.Dispositivo.TipoConfiguracionDepositario TipoId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.ConfiguracionDepositario)base.Add(new Entities.Relations.Dispositivo.ConfiguracionDepositario(TipoId,DepositarioId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.ConfiguracionDepositario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.ConfiguracionDepositario>().ToList<Entities.Relations.Dispositivo.ConfiguracionDepositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.ConfiguracionDepositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ConfiguracionDepositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.ConfiguracionDepositario> Items(Int64? Id,Int64? TipoId,Int64? DepositarioId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.ConfiguracionDepositario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.ConfiguracionDepositario Add(Entities.Relations.Dispositivo.ConfiguracionDepositario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.ConfiguracionDepositario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.ConfiguracionDepositario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.ConfiguracionDepositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.ConfiguracionDepositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 DepositarioId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.ConfiguracionDepositario item = new Entities.Tables.Dispositivo.ConfiguracionDepositario();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.DepositarioId = DepositarioId;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class ConfiguracionDepositario
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Depositario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					SectorId,
					NumeroSerie,
					CodigoExterno,
					ModeloId,
					TipoContenedorId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.Depositario> _cacheItemList = new List<Entities.Relations.Dispositivo.Depositario>();
			   protected List<Entities.Relations.Dispositivo.Depositario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Depositario() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.Depositario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.Depositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Depositario Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sector SectorId'></param>
         /// <param name='NumeroSerie'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.TipoContenedor TipoContenedorId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.Depositario</returns>
			public Entities.Relations.Dispositivo.Depositario Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Directorio.Sector SectorId,String NumeroSerie,String CodigoExterno,DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId,DefaultNamespace.Entities.Relations.Operacion.TipoContenedor TipoContenedorId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.Depositario)base.Add(new Entities.Relations.Dispositivo.Depositario(Nombre,Descripcion,SectorId,NumeroSerie,CodigoExterno,ModeloId,TipoContenedorId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.Depositario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.Depositario>().ToList<Entities.Relations.Dispositivo.Depositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.Depositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Depositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="SectorId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="ModeloId"></param>
            /// <param name="TipoContenedorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Depositario> Items(Int64? Id,String Nombre,String Descripcion,Int64? SectorId,String NumeroSerie,String CodigoExterno,Int64? ModeloId,Int64? TipoContenedorId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (NumeroSerie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NumeroSerie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NumeroSerie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (TipoContenedorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoContenedorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContenedorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoContenedorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContenedorId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.Depositario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.Depositario Add(Entities.Relations.Dispositivo.Depositario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.Depositario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.Depositario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.Depositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.Depositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="SectorId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="ModeloId"></param>
            /// <param name="TipoContenedorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 SectorId,String NumeroSerie,String CodigoExterno,Int64 ModeloId,Int64 TipoContenedorId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.Depositario item = new Entities.Tables.Dispositivo.Depositario();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.SectorId = SectorId;
                 item.NumeroSerie = NumeroSerie;
                 item.CodigoExterno = CodigoExterno;
                 item.ModeloId = ModeloId;
                 item.TipoContenedorId = TipoContenedorId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Depositario
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioContadora : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoContadoraId,
					DepositarioId,
					NumeroSerie,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					PollTime,
					Sleeptime,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.DepositarioContadora> _cacheItemList = new List<Entities.Relations.Dispositivo.DepositarioContadora>();
			   protected List<Entities.Relations.Dispositivo.DepositarioContadora> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public DepositarioContadora() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.DepositarioContadora();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.DepositarioContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioContadora Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.TipoContadora TipoContadoraId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='NumeroSerie'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='PollTime'></param>
         /// <param name='Sleeptime'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.DepositarioContadora</returns>
			public Entities.Relations.Dispositivo.DepositarioContadora Add(DefaultNamespace.Entities.Relations.Dispositivo.TipoContadora TipoContadoraId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,String NumeroSerie,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.DepositarioContadora)base.Add(new Entities.Relations.Dispositivo.DepositarioContadora(TipoContadoraId,DepositarioId,NumeroSerie,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,PollTime,Sleeptime,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.DepositarioContadora> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.DepositarioContadora>().ToList<Entities.Relations.Dispositivo.DepositarioContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.DepositarioContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioContadora> Items(Int64? Id,Int64? TipoContadoraId,Int64? DepositarioId,String NumeroSerie,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Int32? PollTime,Int32? Sleeptime,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoContadoraId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoContadoraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoContadoraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoContadoraId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (NumeroSerie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NumeroSerie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NumeroSerie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NumeroSerie);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (PollTime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                   
                }
                if (Sleeptime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.DepositarioContadora> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.DepositarioContadora Add(Entities.Relations.Dispositivo.DepositarioContadora item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.DepositarioContadora)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.DepositarioContadora item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.DepositarioContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.DepositarioContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoContadoraId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="NumeroSerie"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoContadoraId,Int64 DepositarioId,String NumeroSerie,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.DepositarioContadora item = new Entities.Tables.Dispositivo.DepositarioContadora();
                 item.Id = Id;
                 item.TipoContadoraId = TipoContadoraId;
                 item.DepositarioId = DepositarioId;
                 item.NumeroSerie = NumeroSerie;
                 item.PortName = PortName;
                 item.Parity = Parity;
                 item.DataBits = DataBits;
                 item.ReadBufferSize = ReadBufferSize;
                 item.StopBits = StopBits;
                 item.ReadTimeout = ReadTimeout;
                 item.Handshake = Handshake;
                 item.BaudRate = BaudRate;
                 item.RtsEnable = RtsEnable;
                 item.PollTime = PollTime;
                 item.Sleeptime = Sleeptime;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioContadora
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioEstado : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					ContadoraA,
					ContadoraB,
					Placa,
					Puerta,
					Contenedor,
					Impresora,
					FueraDeServicio,
					Observaciones,
					Fecha
				}
			   protected List<Entities.Relations.Dispositivo.DepositarioEstado> _cacheItemList = new List<Entities.Relations.Dispositivo.DepositarioEstado>();
			   protected List<Entities.Relations.Dispositivo.DepositarioEstado> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public DepositarioEstado() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.DepositarioEstado();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.DepositarioEstado item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioEstado Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='ContadoraA'></param>
         /// <param name='ContadoraB'></param>
         /// <param name='Placa'></param>
         /// <param name='Puerta'></param>
         /// <param name='Contenedor'></param>
         /// <param name='Impresora'></param>
         /// <param name='FueraDeServicio'></param>
         /// <param name='Observaciones'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Relations.Dispositivo.DepositarioEstado</returns>
			public Entities.Relations.Dispositivo.DepositarioEstado Add(DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,String ContadoraA,String ContadoraB,String Placa,String Puerta,String Contenedor,String Impresora,Boolean FueraDeServicio,String Observaciones,DateTime Fecha) 
			{
			  return (Entities.Relations.Dispositivo.DepositarioEstado)base.Add(new Entities.Relations.Dispositivo.DepositarioEstado(DepositarioId,ContadoraA,ContadoraB,Placa,Puerta,Contenedor,Impresora,FueraDeServicio,Observaciones,Fecha));
			}
            public new List<Entities.Relations.Dispositivo.DepositarioEstado> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.DepositarioEstado>().ToList<Entities.Relations.Dispositivo.DepositarioEstado>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.DepositarioEstado items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioEstado> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="ContadoraA"></param>
            /// <param name="ContadoraB"></param>
            /// <param name="Placa"></param>
            /// <param name="Puerta"></param>
            /// <param name="Contenedor"></param>
            /// <param name="Impresora"></param>
            /// <param name="FueraDeServicio"></param>
            /// <param name="Observaciones"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioEstado> Items(Int64? Id,Int64? DepositarioId,String ContadoraA,String ContadoraB,String Placa,String Puerta,String Contenedor,String Impresora,Boolean? FueraDeServicio,String Observaciones,DateTime? Fecha)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (ContadoraA != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContadoraA, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContadoraA);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ContadoraA, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContadoraA);
                    }
                   
                }
                if (ContadoraB != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContadoraB, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContadoraB);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ContadoraB, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContadoraB);
                    }
                   
                }
                if (Placa != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Placa, DefaultNamespace.sqlEnum.OperandEnum.Equal, Placa);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Placa, DefaultNamespace.sqlEnum.OperandEnum.Equal, Placa);
                    }
                   
                }
                if (Puerta != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Puerta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Puerta);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Puerta, DefaultNamespace.sqlEnum.OperandEnum.Equal, Puerta);
                    }
                   
                }
                if (Contenedor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Contenedor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Contenedor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Contenedor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Contenedor);
                    }
                   
                }
                if (Impresora != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                   
                }
                if (FueraDeServicio != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FueraDeServicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, FueraDeServicio);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FueraDeServicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, FueraDeServicio);
                    }
                   
                }
                if (Observaciones != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Observaciones, DefaultNamespace.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Observaciones, DefaultNamespace.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.DepositarioEstado> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.DepositarioEstado Add(Entities.Relations.Dispositivo.DepositarioEstado item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.DepositarioEstado)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.DepositarioEstado item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.DepositarioEstado item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.DepositarioEstado with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="ContadoraA"></param>
            /// <param name="ContadoraB"></param>
            /// <param name="Placa"></param>
            /// <param name="Puerta"></param>
            /// <param name="Contenedor"></param>
            /// <param name="Impresora"></param>
            /// <param name="FueraDeServicio"></param>
            /// <param name="Observaciones"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 DepositarioId,String ContadoraA,String ContadoraB,String Placa,String Puerta,String Contenedor,String Impresora,Boolean FueraDeServicio,String Observaciones,DateTime Fecha)
            {
                 Entities.Tables.Dispositivo.DepositarioEstado item = new Entities.Tables.Dispositivo.DepositarioEstado();
                 item.Id = Id;
                 item.DepositarioId = DepositarioId;
                 item.ContadoraA = ContadoraA;
                 item.ContadoraB = ContadoraB;
                 item.Placa = Placa;
                 item.Puerta = Puerta;
                 item.Contenedor = Contenedor;
                 item.Impresora = Impresora;
                 item.FueraDeServicio = FueraDeServicio;
                 item.Observaciones = Observaciones;
                 item.Fecha = Fecha;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioEstado
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioMoneda : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					MonedaId,
					IndiceEnContadora,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.DepositarioMoneda> _cacheItemList = new List<Entities.Relations.Dispositivo.DepositarioMoneda>();
			   protected List<Entities.Relations.Dispositivo.DepositarioMoneda> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public DepositarioMoneda() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.DepositarioMoneda();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.DepositarioMoneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioMoneda Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='IndiceEnContadora'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.DepositarioMoneda</returns>
			public Entities.Relations.Dispositivo.DepositarioMoneda Add(DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,Int32 IndiceEnContadora,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.DepositarioMoneda)base.Add(new Entities.Relations.Dispositivo.DepositarioMoneda(DepositarioId,MonedaId,IndiceEnContadora,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.DepositarioMoneda> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.DepositarioMoneda>().ToList<Entities.Relations.Dispositivo.DepositarioMoneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.DepositarioMoneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioMoneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="IndiceEnContadora"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioMoneda> Items(Int64? Id,Int64? DepositarioId,Int64? MonedaId,Int32? IndiceEnContadora,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (IndiceEnContadora != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.IndiceEnContadora, DefaultNamespace.sqlEnum.OperandEnum.Equal, IndiceEnContadora);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.IndiceEnContadora, DefaultNamespace.sqlEnum.OperandEnum.Equal, IndiceEnContadora);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.DepositarioMoneda> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.DepositarioMoneda Add(Entities.Relations.Dispositivo.DepositarioMoneda item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.DepositarioMoneda)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.DepositarioMoneda item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.DepositarioMoneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.DepositarioMoneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="IndiceEnContadora"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 DepositarioId,Int64 MonedaId,Int32 IndiceEnContadora,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.DepositarioMoneda item = new Entities.Tables.Dispositivo.DepositarioMoneda();
                 item.Id = Id;
                 item.DepositarioId = DepositarioId;
                 item.MonedaId = MonedaId;
                 item.IndiceEnContadora = IndiceEnContadora;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioMoneda
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class DepositarioPlaca : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					TipoPlacaId,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					SensorA,
					BitSensorA,
					SensorB,
					BitSensorB,
					SensorC,
					BitSensorC,
					SensorD,
					BitSensorD,
					SensorL,
					BitSensorL,
					PollTime,
					Sleeptime,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.DepositarioPlaca> _cacheItemList = new List<Entities.Relations.Dispositivo.DepositarioPlaca>();
			   protected List<Entities.Relations.Dispositivo.DepositarioPlaca> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public DepositarioPlaca() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.DepositarioPlaca();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.DepositarioPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// DepositarioPlaca Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.TipoPlaca TipoPlacaId'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='SensorA'></param>
         /// <param name='BitSensorA'></param>
         /// <param name='SensorB'></param>
         /// <param name='BitSensorB'></param>
         /// <param name='SensorC'></param>
         /// <param name='BitSensorC'></param>
         /// <param name='SensorD'></param>
         /// <param name='BitSensorD'></param>
         /// <param name='SensorL'></param>
         /// <param name='BitSensorL'></param>
         /// <param name='PollTime'></param>
         /// <param name='Sleeptime'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.DepositarioPlaca</returns>
			public Entities.Relations.Dispositivo.DepositarioPlaca Add(DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Dispositivo.TipoPlaca TipoPlacaId,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.DepositarioPlaca)base.Add(new Entities.Relations.Dispositivo.DepositarioPlaca(DepositarioId,TipoPlacaId,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,SensorA,BitSensorA,SensorB,BitSensorB,SensorC,BitSensorC,SensorD,BitSensorD,SensorL,BitSensorL,PollTime,Sleeptime,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.DepositarioPlaca> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.DepositarioPlaca>().ToList<Entities.Relations.Dispositivo.DepositarioPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.DepositarioPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.DepositarioPlaca> Items(Int64? Id,Int64? DepositarioId,Int64? TipoPlacaId,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? SensorA,Int16? BitSensorA,Boolean? SensorB,Int16? BitSensorB,Boolean? SensorC,Int16? BitSensorC,Boolean? SensorD,Int16? BitSensorD,Boolean? SensorL,Int16? BitSensorL,Int32? PollTime,Int32? Sleeptime,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (TipoPlacaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoPlacaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoPlacaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoPlacaId);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (SensorA != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                   
                }
                if (BitSensorA != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                   
                }
                if (SensorB != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                   
                }
                if (BitSensorB != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                   
                }
                if (SensorC != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                   
                }
                if (BitSensorC != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                   
                }
                if (SensorD != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                   
                }
                if (BitSensorD != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                   
                }
                if (SensorL != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                   
                }
                if (BitSensorL != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                   
                }
                if (PollTime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                   
                }
                if (Sleeptime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.DepositarioPlaca> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.DepositarioPlaca Add(Entities.Relations.Dispositivo.DepositarioPlaca item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.DepositarioPlaca)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.DepositarioPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.DepositarioPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.DepositarioPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoPlacaId"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 DepositarioId,Int64 TipoPlacaId,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.DepositarioPlaca item = new Entities.Tables.Dispositivo.DepositarioPlaca();
                 item.Id = Id;
                 item.DepositarioId = DepositarioId;
                 item.TipoPlacaId = TipoPlacaId;
                 item.PortName = PortName;
                 item.Parity = Parity;
                 item.DataBits = DataBits;
                 item.ReadBufferSize = ReadBufferSize;
                 item.StopBits = StopBits;
                 item.ReadTimeout = ReadTimeout;
                 item.Handshake = Handshake;
                 item.BaudRate = BaudRate;
                 item.RtsEnable = RtsEnable;
                 item.SensorA = SensorA;
                 item.BitSensorA = BitSensorA;
                 item.SensorB = SensorB;
                 item.BitSensorB = BitSensorB;
                 item.SensorC = SensorC;
                 item.BitSensorC = BitSensorC;
                 item.SensorD = SensorD;
                 item.BitSensorD = BitSensorD;
                 item.SensorL = SensorL;
                 item.BitSensorL = BitSensorL;
                 item.PollTime = PollTime;
                 item.Sleeptime = Sleeptime;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class DepositarioPlaca
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Marca : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.Marca> _cacheItemList = new List<Entities.Relations.Dispositivo.Marca>();
			   protected List<Entities.Relations.Dispositivo.Marca> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Marca() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.Marca();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.Marca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Marca Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.Marca</returns>
			public Entities.Relations.Dispositivo.Marca Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.Marca)base.Add(new Entities.Relations.Dispositivo.Marca(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.Marca> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.Marca>().ToList<Entities.Relations.Dispositivo.Marca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.Marca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Marca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Marca> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.Marca> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.Marca Add(Entities.Relations.Dispositivo.Marca item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.Marca)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.Marca item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.Marca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.Marca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.Marca item = new Entities.Tables.Dispositivo.Marca();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Marca
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Modelo : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MarcaId,
					Nombre,
					Descripcion,
					Imagen,
					PlantillaMonedaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.Modelo> _cacheItemList = new List<Entities.Relations.Dispositivo.Modelo>();
			   protected List<Entities.Relations.Dispositivo.Modelo> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Modelo() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.Modelo();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.Modelo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Modelo Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Marca MarcaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Imagen'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.PlantillaMoneda PlantillaMonedaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.Modelo</returns>
			public Entities.Relations.Dispositivo.Modelo Add(DefaultNamespace.Entities.Relations.Dispositivo.Marca MarcaId,String Nombre,String Descripcion,String Imagen,DefaultNamespace.Entities.Relations.Dispositivo.PlantillaMoneda PlantillaMonedaId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.Modelo)base.Add(new Entities.Relations.Dispositivo.Modelo(MarcaId,Nombre,Descripcion,Imagen,PlantillaMonedaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.Modelo> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.Modelo>().ToList<Entities.Relations.Dispositivo.Modelo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.Modelo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Modelo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MarcaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.Modelo> Items(Int64? Id,Int64? MarcaId,String Nombre,String Descripcion,String Imagen,Int64? PlantillaMonedaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MarcaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MarcaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MarcaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MarcaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MarcaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (PlantillaMonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PlantillaMonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PlantillaMonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.Modelo> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.Modelo Add(Entities.Relations.Dispositivo.Modelo item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.Modelo)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.Modelo item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.Modelo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.Modelo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MarcaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 MarcaId,String Nombre,String Descripcion,String Imagen,Int64 PlantillaMonedaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.Modelo item = new Entities.Tables.Dispositivo.Modelo();
                 item.Id = Id;
                 item.MarcaId = MarcaId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Imagen = Imagen;
                 item.PlantillaMonedaId = PlantillaMonedaId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Modelo
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PlantillaMoneda : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Decripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.PlantillaMoneda> _cacheItemList = new List<Entities.Relations.Dispositivo.PlantillaMoneda>();
			   protected List<Entities.Relations.Dispositivo.PlantillaMoneda> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public PlantillaMoneda() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.PlantillaMoneda();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.PlantillaMoneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PlantillaMoneda Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Decripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.PlantillaMoneda</returns>
			public Entities.Relations.Dispositivo.PlantillaMoneda Add(String Nombre,String Decripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.PlantillaMoneda)base.Add(new Entities.Relations.Dispositivo.PlantillaMoneda(Nombre,Decripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.PlantillaMoneda> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.PlantillaMoneda>().ToList<Entities.Relations.Dispositivo.PlantillaMoneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.PlantillaMoneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.PlantillaMoneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.PlantillaMoneda> Items(Int64? Id,String Nombre,String Decripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Decripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Decripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Decripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.PlantillaMoneda> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.PlantillaMoneda Add(Entities.Relations.Dispositivo.PlantillaMoneda item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.PlantillaMoneda)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.PlantillaMoneda item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.PlantillaMoneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.PlantillaMoneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Decripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.PlantillaMoneda item = new Entities.Tables.Dispositivo.PlantillaMoneda();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Decripcion = Decripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PlantillaMoneda
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PlantillaMonedaDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					PlantillaMonedaId,
					Nombre,
					Decripcion,
					MonedaId,
					Secuencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> _cacheItemList = new List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle>();
			   protected List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public PlantillaMonedaDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.PlantillaMonedaDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.PlantillaMonedaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PlantillaMonedaDetalle Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.PlantillaMoneda PlantillaMonedaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Decripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='Secuencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.PlantillaMonedaDetalle</returns>
			public Entities.Relations.Dispositivo.PlantillaMonedaDetalle Add(DefaultNamespace.Entities.Relations.Dispositivo.PlantillaMoneda PlantillaMonedaId,String Nombre,String Decripcion,DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,Int16 Secuencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.PlantillaMonedaDetalle)base.Add(new Entities.Relations.Dispositivo.PlantillaMonedaDetalle(PlantillaMonedaId,Nombre,Decripcion,MonedaId,Secuencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.PlantillaMonedaDetalle>().ToList<Entities.Relations.Dispositivo.PlantillaMonedaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.PlantillaMonedaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> Items(Int64? Id,Int64? PlantillaMonedaId,String Nombre,String Decripcion,Int64? MonedaId,Int16? Secuencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (PlantillaMonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PlantillaMonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PlantillaMonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PlantillaMonedaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Decripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Decripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Decripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Decripcion);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.PlantillaMonedaDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.PlantillaMonedaDetalle Add(Entities.Relations.Dispositivo.PlantillaMonedaDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.PlantillaMonedaDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.PlantillaMonedaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.PlantillaMonedaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.PlantillaMonedaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PlantillaMonedaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Decripcion"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 PlantillaMonedaId,String Nombre,String Decripcion,Int64 MonedaId,Int16 Secuencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.PlantillaMonedaDetalle item = new Entities.Tables.Dispositivo.PlantillaMonedaDetalle();
                 item.Id = Id;
                 item.PlantillaMonedaId = PlantillaMonedaId;
                 item.Nombre = Nombre;
                 item.Decripcion = Decripcion;
                 item.MonedaId = MonedaId;
                 item.Secuencia = Secuencia;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PlantillaMonedaDetalle
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoConfiguracionDepositario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Clave,
					Nombre,
					Descripcion,
					ValidacionDatoId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> _cacheItemList = new List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario>();
			   protected List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoConfiguracionDepositario() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.TipoConfiguracionDepositario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.TipoConfiguracionDepositario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoConfiguracionDepositario Add Method
         /// </summary>
         /// <param name='Clave'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.TipoConfiguracionDepositario</returns>
			public Entities.Relations.Dispositivo.TipoConfiguracionDepositario Add(String Clave,String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Aplicacion.ConfiguracionValidacionDato ValidacionDatoId,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.TipoConfiguracionDepositario)base.Add(new Entities.Relations.Dispositivo.TipoConfiguracionDepositario(Clave,Nombre,Descripcion,ValidacionDatoId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.TipoConfiguracionDepositario>().ToList<Entities.Relations.Dispositivo.TipoConfiguracionDepositario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.TipoConfiguracionDepositario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Clave"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> Items(Int64? Id,String Clave,String Nombre,String Descripcion,Int64? ValidacionDatoId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (ValidacionDatoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ValidacionDatoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValidacionDatoId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.TipoConfiguracionDepositario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.TipoConfiguracionDepositario Add(Entities.Relations.Dispositivo.TipoConfiguracionDepositario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.TipoConfiguracionDepositario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.TipoConfiguracionDepositario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.TipoConfiguracionDepositario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.TipoConfiguracionDepositario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Clave"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ValidacionDatoId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Clave,String Nombre,String Descripcion,Int64 ValidacionDatoId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.TipoConfiguracionDepositario item = new Entities.Tables.Dispositivo.TipoConfiguracionDepositario();
                 item.Id = Id;
                 item.Clave = Clave;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.ValidacionDatoId = ValidacionDatoId;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoConfiguracionDepositario
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoContadora : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					ModeloId,
					Nombre,
					Descripcion,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					PollTime,
					Sleeptime,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.TipoContadora> _cacheItemList = new List<Entities.Relations.Dispositivo.TipoContadora>();
			   protected List<Entities.Relations.Dispositivo.TipoContadora> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoContadora() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.TipoContadora();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.TipoContadora item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoContadora Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='PollTime'></param>
         /// <param name='Sleeptime'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.TipoContadora</returns>
			public Entities.Relations.Dispositivo.TipoContadora Add(DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.TipoContadora)base.Add(new Entities.Relations.Dispositivo.TipoContadora(ModeloId,Nombre,Descripcion,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,PollTime,Sleeptime,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.TipoContadora> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.TipoContadora>().ToList<Entities.Relations.Dispositivo.TipoContadora>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.TipoContadora items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoContadora> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoContadora> Items(Int64? Id,Int64? ModeloId,String Nombre,String Descripcion,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Int32? PollTime,Int32? Sleeptime,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (PollTime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                   
                }
                if (Sleeptime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.TipoContadora> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.TipoContadora Add(Entities.Relations.Dispositivo.TipoContadora item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.TipoContadora)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.TipoContadora item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.TipoContadora item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.TipoContadora with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.TipoContadora item = new Entities.Tables.Dispositivo.TipoContadora();
                 item.Id = Id;
                 item.ModeloId = ModeloId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.PortName = PortName;
                 item.Parity = Parity;
                 item.DataBits = DataBits;
                 item.ReadBufferSize = ReadBufferSize;
                 item.StopBits = StopBits;
                 item.ReadTimeout = ReadTimeout;
                 item.Handshake = Handshake;
                 item.BaudRate = BaudRate;
                 item.RtsEnable = RtsEnable;
                 item.PollTime = PollTime;
                 item.Sleeptime = Sleeptime;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoContadora
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Dispositivo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoPlaca : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					ModeloId,
					Nombre,
					Descripcion,
					PortName,
					Parity,
					DataBits,
					ReadBufferSize,
					StopBits,
					ReadTimeout,
					Handshake,
					BaudRate,
					RtsEnable,
					SensorA,
					BitSensorA,
					SensorB,
					BitSensorB,
					SensorC,
					BitSensorC,
					SensorD,
					BitSensorD,
					SensorL,
					BitSensorL,
					PollTime,
					Sleeptime,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Dispositivo.TipoPlaca> _cacheItemList = new List<Entities.Relations.Dispositivo.TipoPlaca>();
			   protected List<Entities.Relations.Dispositivo.TipoPlaca> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoPlaca() : base()
            {
                base._dataItem = new Entities.Relations.Dispositivo.TipoPlaca();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Dispositivo.TipoPlaca item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoPlaca Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PortName'></param>
         /// <param name='Parity'></param>
         /// <param name='DataBits'></param>
         /// <param name='ReadBufferSize'></param>
         /// <param name='StopBits'></param>
         /// <param name='ReadTimeout'></param>
         /// <param name='Handshake'></param>
         /// <param name='BaudRate'></param>
         /// <param name='RtsEnable'></param>
         /// <param name='SensorA'></param>
         /// <param name='BitSensorA'></param>
         /// <param name='SensorB'></param>
         /// <param name='BitSensorB'></param>
         /// <param name='SensorC'></param>
         /// <param name='BitSensorC'></param>
         /// <param name='SensorD'></param>
         /// <param name='BitSensorD'></param>
         /// <param name='SensorL'></param>
         /// <param name='BitSensorL'></param>
         /// <param name='PollTime'></param>
         /// <param name='Sleeptime'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Dispositivo.TipoPlaca</returns>
			public Entities.Relations.Dispositivo.TipoPlaca Add(DefaultNamespace.Entities.Relations.Dispositivo.Modelo ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Dispositivo.TipoPlaca)base.Add(new Entities.Relations.Dispositivo.TipoPlaca(ModeloId,Nombre,Descripcion,PortName,Parity,DataBits,ReadBufferSize,StopBits,ReadTimeout,Handshake,BaudRate,RtsEnable,SensorA,BitSensorA,SensorB,BitSensorB,SensorC,BitSensorC,SensorD,BitSensorD,SensorL,BitSensorL,PollTime,Sleeptime,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Dispositivo.TipoPlaca> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Dispositivo.TipoPlaca>().ToList<Entities.Relations.Dispositivo.TipoPlaca>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Dispositivo.TipoPlaca items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoPlaca> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Dispositivo.TipoPlaca> Items(Int64? Id,Int64? ModeloId,String Nombre,String Descripcion,String PortName,Int32? Parity,Int32? DataBits,Int32? ReadBufferSize,Int32? StopBits,Int32? ReadTimeout,Int32? Handshake,Int32? BaudRate,Boolean? RtsEnable,Boolean? SensorA,Int16? BitSensorA,Boolean? SensorB,Int16? BitSensorB,Boolean? SensorC,Int16? BitSensorC,Boolean? SensorD,Int16? BitSensorD,Boolean? SensorL,Int16? BitSensorL,Int32? PollTime,Int32? Sleeptime,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (ModeloId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ModeloId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PortName != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PortName, DefaultNamespace.sqlEnum.OperandEnum.Equal, PortName);
                    }
                   
                }
                if (Parity != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Parity, DefaultNamespace.sqlEnum.OperandEnum.Equal, Parity);
                    }
                   
                }
                if (DataBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DataBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, DataBits);
                    }
                   
                }
                if (ReadBufferSize != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadBufferSize, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadBufferSize);
                    }
                   
                }
                if (StopBits != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.StopBits, DefaultNamespace.sqlEnum.OperandEnum.Equal, StopBits);
                    }
                   
                }
                if (ReadTimeout != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ReadTimeout, DefaultNamespace.sqlEnum.OperandEnum.Equal, ReadTimeout);
                    }
                   
                }
                if (Handshake != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Handshake, DefaultNamespace.sqlEnum.OperandEnum.Equal, Handshake);
                    }
                   
                }
                if (BaudRate != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BaudRate, DefaultNamespace.sqlEnum.OperandEnum.Equal, BaudRate);
                    }
                   
                }
                if (RtsEnable != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RtsEnable, DefaultNamespace.sqlEnum.OperandEnum.Equal, RtsEnable);
                    }
                   
                }
                if (SensorA != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorA);
                    }
                   
                }
                if (BitSensorA != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorA, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorA);
                    }
                   
                }
                if (SensorB != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorB);
                    }
                   
                }
                if (BitSensorB != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorB, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorB);
                    }
                   
                }
                if (SensorC != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorC);
                    }
                   
                }
                if (BitSensorC != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorC, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorC);
                    }
                   
                }
                if (SensorD != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorD);
                    }
                   
                }
                if (BitSensorD != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorD, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorD);
                    }
                   
                }
                if (SensorL != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, SensorL);
                    }
                   
                }
                if (BitSensorL != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.BitSensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.BitSensorL, DefaultNamespace.sqlEnum.OperandEnum.Equal, BitSensorL);
                    }
                   
                }
                if (PollTime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PollTime, DefaultNamespace.sqlEnum.OperandEnum.Equal, PollTime);
                    }
                   
                }
                if (Sleeptime != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Sleeptime, DefaultNamespace.sqlEnum.OperandEnum.Equal, Sleeptime);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Dispositivo.TipoPlaca> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Dispositivo.TipoPlaca Add(Entities.Relations.Dispositivo.TipoPlaca item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Dispositivo.TipoPlaca)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Dispositivo.TipoPlaca item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Dispositivo.TipoPlaca item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Dispositivo.TipoPlaca with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="ModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PortName"></param>
            /// <param name="Parity"></param>
            /// <param name="DataBits"></param>
            /// <param name="ReadBufferSize"></param>
            /// <param name="StopBits"></param>
            /// <param name="ReadTimeout"></param>
            /// <param name="Handshake"></param>
            /// <param name="BaudRate"></param>
            /// <param name="RtsEnable"></param>
            /// <param name="SensorA"></param>
            /// <param name="BitSensorA"></param>
            /// <param name="SensorB"></param>
            /// <param name="BitSensorB"></param>
            /// <param name="SensorC"></param>
            /// <param name="BitSensorC"></param>
            /// <param name="SensorD"></param>
            /// <param name="BitSensorD"></param>
            /// <param name="SensorL"></param>
            /// <param name="BitSensorL"></param>
            /// <param name="PollTime"></param>
            /// <param name="Sleeptime"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 ModeloId,String Nombre,String Descripcion,String PortName,Int32 Parity,Int32 DataBits,Int32 ReadBufferSize,Int32 StopBits,Int32 ReadTimeout,Int32 Handshake,Int32 BaudRate,Boolean RtsEnable,Boolean SensorA,Int16 BitSensorA,Boolean SensorB,Int16 BitSensorB,Boolean SensorC,Int16 BitSensorC,Boolean SensorD,Int16 BitSensorD,Boolean SensorL,Int16 BitSensorL,Int32 PollTime,Int32 Sleeptime,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Dispositivo.TipoPlaca item = new Entities.Tables.Dispositivo.TipoPlaca();
                 item.Id = Id;
                 item.ModeloId = ModeloId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.PortName = PortName;
                 item.Parity = Parity;
                 item.DataBits = DataBits;
                 item.ReadBufferSize = ReadBufferSize;
                 item.StopBits = StopBits;
                 item.ReadTimeout = ReadTimeout;
                 item.Handshake = Handshake;
                 item.BaudRate = BaudRate;
                 item.RtsEnable = RtsEnable;
                 item.SensorA = SensorA;
                 item.BitSensorA = BitSensorA;
                 item.SensorB = SensorB;
                 item.BitSensorB = BitSensorB;
                 item.SensorC = SensorC;
                 item.BitSensorC = BitSensorC;
                 item.SensorD = SensorD;
                 item.BitSensorD = BitSensorD;
                 item.SensorL = SensorL;
                 item.BitSensorL = BitSensorL;
                 item.PollTime = PollTime;
                 item.Sleeptime = Sleeptime;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoPlaca
	} //namespace DefaultNamespace.Business.Relations.Dispositivo
	namespace DefaultNamespace.Business.Relations.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Esquema : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Estilo.Esquema> _cacheItemList = new List<Entities.Relations.Estilo.Esquema>();
			   protected List<Entities.Relations.Estilo.Esquema> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Esquema() : base()
            {
                base._dataItem = new Entities.Relations.Estilo.Esquema();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Estilo.Esquema item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Esquema Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Estilo.Esquema</returns>
			public Entities.Relations.Estilo.Esquema Add(String Nombre,String Descripcion,Boolean EsDefault,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Estilo.Esquema)base.Add(new Entities.Relations.Estilo.Esquema(Nombre,Descripcion,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Estilo.Esquema> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Estilo.Esquema>().ToList<Entities.Relations.Estilo.Esquema>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Estilo.Esquema items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.Esquema> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.Esquema> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Estilo.Esquema> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Estilo.Esquema Add(Entities.Relations.Estilo.Esquema item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Estilo.Esquema)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Estilo.Esquema item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Estilo.Esquema item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Estilo.Esquema with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Estilo.Esquema item = new Entities.Tables.Estilo.Esquema();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.EsDefault = EsDefault;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Esquema
	} //namespace DefaultNamespace.Business.Relations.Estilo
	namespace DefaultNamespace.Business.Relations.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EsquemaId,
					AplicacionId,
					TipoEsquemaDetalleId,
					Nombre,
					Descripcion,
					Valor,
					Imagen,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Estilo.EsquemaDetalle> _cacheItemList = new List<Entities.Relations.Estilo.EsquemaDetalle>();
			   protected List<Entities.Relations.Estilo.EsquemaDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EsquemaDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Estilo.EsquemaDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Estilo.EsquemaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaDetalle Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Estilo.Esquema EsquemaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Estilo.TipoEsquemaDetalle TipoEsquemaDetalleId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Valor'></param>
         /// <param name='Imagen'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Estilo.EsquemaDetalle</returns>
			public Entities.Relations.Estilo.EsquemaDetalle Add(DefaultNamespace.Entities.Relations.Estilo.Esquema EsquemaId,DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,DefaultNamespace.Entities.Relations.Estilo.TipoEsquemaDetalle TipoEsquemaDetalleId,String Nombre,String Descripcion,String Valor,String Imagen,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Estilo.EsquemaDetalle)base.Add(new Entities.Relations.Estilo.EsquemaDetalle(EsquemaId,AplicacionId,TipoEsquemaDetalleId,Nombre,Descripcion,Valor,Imagen,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Estilo.EsquemaDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Estilo.EsquemaDetalle>().ToList<Entities.Relations.Estilo.EsquemaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Estilo.EsquemaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.EsquemaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoEsquemaDetalleId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Valor"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.EsquemaDetalle> Items(Int64? Id,Int64? EsquemaId,Int64? AplicacionId,Int64? TipoEsquemaDetalleId,String Nombre,String Descripcion,String Valor,String Imagen,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EsquemaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsquemaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaId);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (TipoEsquemaDetalleId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoEsquemaDetalleId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoEsquemaDetalleId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoEsquemaDetalleId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoEsquemaDetalleId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Estilo.EsquemaDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Estilo.EsquemaDetalle Add(Entities.Relations.Estilo.EsquemaDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Estilo.EsquemaDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Estilo.EsquemaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Estilo.EsquemaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Estilo.EsquemaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaId"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoEsquemaDetalleId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Valor"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EsquemaId,Int64 AplicacionId,Int64 TipoEsquemaDetalleId,String Nombre,String Descripcion,String Valor,String Imagen,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Estilo.EsquemaDetalle item = new Entities.Tables.Estilo.EsquemaDetalle();
                 item.Id = Id;
                 item.EsquemaId = EsquemaId;
                 item.AplicacionId = AplicacionId;
                 item.TipoEsquemaDetalleId = TipoEsquemaDetalleId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Valor = Valor;
                 item.Imagen = Imagen;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaDetalle
	} //namespace DefaultNamespace.Business.Relations.Estilo
	namespace DefaultNamespace.Business.Relations.Estilo {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoEsquemaDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Estilo.TipoEsquemaDetalle> _cacheItemList = new List<Entities.Relations.Estilo.TipoEsquemaDetalle>();
			   protected List<Entities.Relations.Estilo.TipoEsquemaDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoEsquemaDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Estilo.TipoEsquemaDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Estilo.TipoEsquemaDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoEsquemaDetalle Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Estilo.TipoEsquemaDetalle</returns>
			public Entities.Relations.Estilo.TipoEsquemaDetalle Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Estilo.TipoEsquemaDetalle)base.Add(new Entities.Relations.Estilo.TipoEsquemaDetalle(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Estilo.TipoEsquemaDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Estilo.TipoEsquemaDetalle>().ToList<Entities.Relations.Estilo.TipoEsquemaDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Estilo.TipoEsquemaDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.TipoEsquemaDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Estilo.TipoEsquemaDetalle> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Estilo.TipoEsquemaDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Estilo.TipoEsquemaDetalle Add(Entities.Relations.Estilo.TipoEsquemaDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Estilo.TipoEsquemaDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Estilo.TipoEsquemaDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Estilo.TipoEsquemaDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Estilo.TipoEsquemaDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Estilo.TipoEsquemaDetalle item = new Entities.Tables.Estilo.TipoEsquemaDetalle();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoEsquemaDetalle
	} //namespace DefaultNamespace.Business.Relations.Estilo
	namespace DefaultNamespace.Business.Relations.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Ciudad : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					ProvinciaId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Geografia.Ciudad> _cacheItemList = new List<Entities.Relations.Geografia.Ciudad>();
			   protected List<Entities.Relations.Geografia.Ciudad> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Ciudad() : base()
            {
                base._dataItem = new Entities.Relations.Geografia.Ciudad();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Geografia.Ciudad item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Ciudad Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Provincia ProvinciaId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Geografia.Ciudad</returns>
			public Entities.Relations.Geografia.Ciudad Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Geografia.Provincia ProvinciaId,String CodigoExterno,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Geografia.Ciudad)base.Add(new Entities.Relations.Geografia.Ciudad(Nombre,Descripcion,ProvinciaId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Geografia.Ciudad> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Geografia.Ciudad>().ToList<Entities.Relations.Geografia.Ciudad>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Geografia.Ciudad items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Ciudad> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ProvinciaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Ciudad> Items(Int64? Id,String Nombre,String Descripcion,Int64? ProvinciaId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (ProvinciaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ProvinciaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ProvinciaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ProvinciaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ProvinciaId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Geografia.Ciudad> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Geografia.Ciudad Add(Entities.Relations.Geografia.Ciudad item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Geografia.Ciudad)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Geografia.Ciudad item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Geografia.Ciudad item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Geografia.Ciudad with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="ProvinciaId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 ProvinciaId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Geografia.Ciudad item = new Entities.Tables.Geografia.Ciudad();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.ProvinciaId = ProvinciaId;
                 item.CodigoExterno = CodigoExterno;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Ciudad
	} //namespace DefaultNamespace.Business.Relations.Geografia
	namespace DefaultNamespace.Business.Relations.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class CodigoPostal : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					CiudadId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Geografia.CodigoPostal> _cacheItemList = new List<Entities.Relations.Geografia.CodigoPostal>();
			   protected List<Entities.Relations.Geografia.CodigoPostal> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public CodigoPostal() : base()
            {
                base._dataItem = new Entities.Relations.Geografia.CodigoPostal();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Geografia.CodigoPostal item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// CodigoPostal Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Ciudad CiudadId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Geografia.CodigoPostal</returns>
			public Entities.Relations.Geografia.CodigoPostal Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Geografia.Ciudad CiudadId,String CodigoExterno,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Geografia.CodigoPostal)base.Add(new Entities.Relations.Geografia.CodigoPostal(Nombre,Descripcion,CiudadId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Geografia.CodigoPostal> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Geografia.CodigoPostal>().ToList<Entities.Relations.Geografia.CodigoPostal>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Geografia.CodigoPostal items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.CodigoPostal> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CiudadId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.CodigoPostal> Items(Int64? Id,String Nombre,String Descripcion,Int64? CiudadId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (CiudadId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CiudadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CiudadId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CiudadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CiudadId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Geografia.CodigoPostal> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Geografia.CodigoPostal Add(Entities.Relations.Geografia.CodigoPostal item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Geografia.CodigoPostal)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Geografia.CodigoPostal item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Geografia.CodigoPostal item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Geografia.CodigoPostal with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="CiudadId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 CiudadId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Geografia.CodigoPostal item = new Entities.Tables.Geografia.CodigoPostal();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.CiudadId = CiudadId;
                 item.CodigoExterno = CodigoExterno;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class CodigoPostal
	} //namespace DefaultNamespace.Business.Relations.Geografia
	namespace DefaultNamespace.Business.Relations.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Pais : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Geografia.Pais> _cacheItemList = new List<Entities.Relations.Geografia.Pais>();
			   protected List<Entities.Relations.Geografia.Pais> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Pais() : base()
            {
                base._dataItem = new Entities.Relations.Geografia.Pais();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Geografia.Pais item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Pais Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Geografia.Pais</returns>
			public Entities.Relations.Geografia.Pais Add(String Nombre,String Descripcion,String Codigo,String CodigoExterno,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Geografia.Pais)base.Add(new Entities.Relations.Geografia.Pais(Nombre,Descripcion,Codigo,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Geografia.Pais> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Geografia.Pais>().ToList<Entities.Relations.Geografia.Pais>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Geografia.Pais items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Pais> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Pais> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Geografia.Pais> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Geografia.Pais Add(Entities.Relations.Geografia.Pais item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Geografia.Pais)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Geografia.Pais item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Geografia.Pais item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Geografia.Pais with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Codigo,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Geografia.Pais item = new Entities.Tables.Geografia.Pais();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Codigo = Codigo;
                 item.CodigoExterno = CodigoExterno;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Pais
	} //namespace DefaultNamespace.Business.Relations.Geografia
	namespace DefaultNamespace.Business.Relations.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Provincia : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					PaisId,
					CodigoExterno,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Geografia.Provincia> _cacheItemList = new List<Entities.Relations.Geografia.Provincia>();
			   protected List<Entities.Relations.Geografia.Provincia> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Provincia() : base()
            {
                base._dataItem = new Entities.Relations.Geografia.Provincia();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Geografia.Provincia item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Provincia Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Pais PaisId'></param>
         /// <param name='CodigoExterno'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Geografia.Provincia</returns>
			public Entities.Relations.Geografia.Provincia Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Geografia.Pais PaisId,String CodigoExterno,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Geografia.Provincia)base.Add(new Entities.Relations.Geografia.Provincia(Nombre,Descripcion,PaisId,CodigoExterno,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Geografia.Provincia> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Geografia.Provincia>().ToList<Entities.Relations.Geografia.Provincia>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Geografia.Provincia items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Provincia> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PaisId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Provincia> Items(Int64? Id,String Nombre,String Descripcion,Int64? PaisId,String CodigoExterno,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (CodigoExterno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoExterno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoExterno);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Geografia.Provincia> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Geografia.Provincia Add(Entities.Relations.Geografia.Provincia item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Geografia.Provincia)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Geografia.Provincia item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Geografia.Provincia item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Geografia.Provincia with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PaisId"></param>
            /// <param name="CodigoExterno"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 PaisId,String CodigoExterno,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Geografia.Provincia item = new Entities.Tables.Geografia.Provincia();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.PaisId = PaisId;
                 item.CodigoExterno = CodigoExterno;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Provincia
	} //namespace DefaultNamespace.Business.Relations.Geografia
	namespace DefaultNamespace.Business.Relations.Geografia {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Zona : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Geografia.Zona> _cacheItemList = new List<Entities.Relations.Geografia.Zona>();
			   protected List<Entities.Relations.Geografia.Zona> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Zona() : base()
            {
                base._dataItem = new Entities.Relations.Geografia.Zona();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Geografia.Zona item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Zona Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Geografia.Zona</returns>
			public Entities.Relations.Geografia.Zona Add(String Nombre,String Descripcion,String Codigo,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Geografia.Zona)base.Add(new Entities.Relations.Geografia.Zona(Nombre,Descripcion,Codigo,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Geografia.Zona> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Geografia.Zona>().ToList<Entities.Relations.Geografia.Zona>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Geografia.Zona items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Zona> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Geografia.Zona> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Geografia.Zona> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Geografia.Zona Add(Entities.Relations.Geografia.Zona item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Geografia.Zona)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Geografia.Zona item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Geografia.Zona item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Geografia.Zona with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Codigo,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Geografia.Zona item = new Entities.Tables.Geografia.Zona();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Codigo = Codigo;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Zona
	} //namespace DefaultNamespace.Business.Relations.Geografia
	namespace DefaultNamespace.Business.Relations.Impresion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PlantillaTicket : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioModeloId,
					Nombre,
					Descripcion,
					Impresora,
					TextoCabecera,
					NombreFuenteCabecera,
					TamanioFuenteCabecera,
					UbicacionTextoCabecera,
					TextoPie,
					NombreFuentePie,
					TamanioFuentePie,
					UbicacionTextoPie,
					Imagen,
					UbicacionImagen,
					UbicacionTextoDetalle,
					AnchoDetalle,
					TamanioEntreLineas,
					AnchoReporte,
					FactorAltoReporte,
					LineasAlFinal
				}
			   protected List<Entities.Relations.Impresion.PlantillaTicket> _cacheItemList = new List<Entities.Relations.Impresion.PlantillaTicket>();
			   protected List<Entities.Relations.Impresion.PlantillaTicket> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public PlantillaTicket() : base()
            {
                base._dataItem = new Entities.Relations.Impresion.PlantillaTicket();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Impresion.PlantillaTicket item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PlantillaTicket Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Impresion.TipoTicket TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Modelo DepositarioModeloId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Impresora'></param>
         /// <param name='TextoCabecera'></param>
         /// <param name='NombreFuenteCabecera'></param>
         /// <param name='TamanioFuenteCabecera'></param>
         /// <param name='UbicacionTextoCabecera'></param>
         /// <param name='TextoPie'></param>
         /// <param name='NombreFuentePie'></param>
         /// <param name='TamanioFuentePie'></param>
         /// <param name='UbicacionTextoPie'></param>
         /// <param name='Imagen'></param>
         /// <param name='UbicacionImagen'></param>
         /// <param name='UbicacionTextoDetalle'></param>
         /// <param name='AnchoDetalle'></param>
         /// <param name='TamanioEntreLineas'></param>
         /// <param name='AnchoReporte'></param>
         /// <param name='FactorAltoReporte'></param>
         /// <param name='LineasAlFinal'></param>
         /// <returns>Entities.Relations.Impresion.PlantillaTicket</returns>
			public Entities.Relations.Impresion.PlantillaTicket Add(DefaultNamespace.Entities.Relations.Impresion.TipoTicket TipoId,DefaultNamespace.Entities.Relations.Dispositivo.Modelo DepositarioModeloId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32 TamanioFuenteCabecera,Int32 UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32 TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32 UbicacionTextoDetalle,Int32 AnchoDetalle,Int32 TamanioEntreLineas,Int32 AnchoReporte,Int32 FactorAltoReporte,Int32 LineasAlFinal) 
			{
			  return (Entities.Relations.Impresion.PlantillaTicket)base.Add(new Entities.Relations.Impresion.PlantillaTicket(TipoId,DepositarioModeloId,Nombre,Descripcion,Impresora,TextoCabecera,NombreFuenteCabecera,TamanioFuenteCabecera,UbicacionTextoCabecera,TextoPie,NombreFuentePie,TamanioFuentePie,UbicacionTextoPie,Imagen,UbicacionImagen,UbicacionTextoDetalle,AnchoDetalle,TamanioEntreLineas,AnchoReporte,FactorAltoReporte,LineasAlFinal));
			}
            public new List<Entities.Relations.Impresion.PlantillaTicket> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Impresion.PlantillaTicket>().ToList<Entities.Relations.Impresion.PlantillaTicket>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Impresion.PlantillaTicket items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.PlantillaTicket> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Impresora"></param>
            /// <param name="TextoCabecera"></param>
            /// <param name="NombreFuenteCabecera"></param>
            /// <param name="TamanioFuenteCabecera"></param>
            /// <param name="UbicacionTextoCabecera"></param>
            /// <param name="TextoPie"></param>
            /// <param name="NombreFuentePie"></param>
            /// <param name="TamanioFuentePie"></param>
            /// <param name="UbicacionTextoPie"></param>
            /// <param name="Imagen"></param>
            /// <param name="UbicacionImagen"></param>
            /// <param name="UbicacionTextoDetalle"></param>
            /// <param name="AnchoDetalle"></param>
            /// <param name="TamanioEntreLineas"></param>
            /// <param name="AnchoReporte"></param>
            /// <param name="FactorAltoReporte"></param>
            /// <param name="LineasAlFinal"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.PlantillaTicket> Items(Int64? Id,Int64? TipoId,Int64? DepositarioModeloId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32? TamanioFuenteCabecera,Int32? UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32? TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32? UbicacionTextoDetalle,Int32? AnchoDetalle,Int32? TamanioEntreLineas,Int32? AnchoReporte,Int32? FactorAltoReporte,Int32? LineasAlFinal)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioModeloId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioModeloId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioModeloId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Impresora != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                   
                }
                if (TextoCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoCabecera);
                    }
                   
                }
                if (NombreFuenteCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuenteCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NombreFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuenteCabecera);
                    }
                   
                }
                if (TamanioFuenteCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuenteCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuenteCabecera);
                    }
                   
                }
                if (UbicacionTextoCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoCabecera);
                    }
                   
                }
                if (TextoPie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoPie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoPie);
                    }
                   
                }
                if (NombreFuentePie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuentePie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NombreFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuentePie);
                    }
                   
                }
                if (TamanioFuentePie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuentePie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuentePie);
                    }
                   
                }
                if (UbicacionTextoPie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoPie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoPie);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (UbicacionImagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionImagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionImagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionImagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionImagen);
                    }
                   
                }
                if (UbicacionTextoDetalle != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoDetalle);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoDetalle);
                    }
                   
                }
                if (AnchoDetalle != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoDetalle);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoDetalle);
                    }
                   
                }
                if (TamanioEntreLineas != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioEntreLineas, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioEntreLineas);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioEntreLineas, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioEntreLineas);
                    }
                   
                }
                if (AnchoReporte != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoReporte);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoReporte);
                    }
                   
                }
                if (FactorAltoReporte != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FactorAltoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, FactorAltoReporte);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FactorAltoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, FactorAltoReporte);
                    }
                   
                }
                if (LineasAlFinal != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LineasAlFinal, DefaultNamespace.sqlEnum.OperandEnum.Equal, LineasAlFinal);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LineasAlFinal, DefaultNamespace.sqlEnum.OperandEnum.Equal, LineasAlFinal);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Impresion.PlantillaTicket> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Impresion.PlantillaTicket Add(Entities.Relations.Impresion.PlantillaTicket item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Impresion.PlantillaTicket)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Impresion.PlantillaTicket item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Impresion.PlantillaTicket item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Impresion.PlantillaTicket with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioModeloId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Impresora"></param>
            /// <param name="TextoCabecera"></param>
            /// <param name="NombreFuenteCabecera"></param>
            /// <param name="TamanioFuenteCabecera"></param>
            /// <param name="UbicacionTextoCabecera"></param>
            /// <param name="TextoPie"></param>
            /// <param name="NombreFuentePie"></param>
            /// <param name="TamanioFuentePie"></param>
            /// <param name="UbicacionTextoPie"></param>
            /// <param name="Imagen"></param>
            /// <param name="UbicacionImagen"></param>
            /// <param name="UbicacionTextoDetalle"></param>
            /// <param name="AnchoDetalle"></param>
            /// <param name="TamanioEntreLineas"></param>
            /// <param name="AnchoReporte"></param>
            /// <param name="FactorAltoReporte"></param>
            /// <param name="LineasAlFinal"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 DepositarioModeloId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32 TamanioFuenteCabecera,Int32 UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32 TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32 UbicacionTextoDetalle,Int32 AnchoDetalle,Int32 TamanioEntreLineas,Int32 AnchoReporte,Int32 FactorAltoReporte,Int32 LineasAlFinal)
            {
                 Entities.Tables.Impresion.PlantillaTicket item = new Entities.Tables.Impresion.PlantillaTicket();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.DepositarioModeloId = DepositarioModeloId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Impresora = Impresora;
                 item.TextoCabecera = TextoCabecera;
                 item.NombreFuenteCabecera = NombreFuenteCabecera;
                 item.TamanioFuenteCabecera = TamanioFuenteCabecera;
                 item.UbicacionTextoCabecera = UbicacionTextoCabecera;
                 item.TextoPie = TextoPie;
                 item.NombreFuentePie = NombreFuentePie;
                 item.TamanioFuentePie = TamanioFuentePie;
                 item.UbicacionTextoPie = UbicacionTextoPie;
                 item.Imagen = Imagen;
                 item.UbicacionImagen = UbicacionImagen;
                 item.UbicacionTextoDetalle = UbicacionTextoDetalle;
                 item.AnchoDetalle = AnchoDetalle;
                 item.TamanioEntreLineas = TamanioEntreLineas;
                 item.AnchoReporte = AnchoReporte;
                 item.FactorAltoReporte = FactorAltoReporte;
                 item.LineasAlFinal = LineasAlFinal;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PlantillaTicket
	} //namespace DefaultNamespace.Business.Relations.Impresion
	namespace DefaultNamespace.Business.Relations.Impresion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Ticket : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioModeloId,
					EmpresaId,
					Nombre,
					Descripcion,
					Impresora,
					TextoCabecera,
					NombreFuenteCabecera,
					TamanioFuenteCabecera,
					UbicacionTextoCabecera,
					TextoPie,
					NombreFuentePie,
					TamanioFuentePie,
					UbicacionTextoPie,
					Imagen,
					UbicacionImagen,
					UbicacionTextoDetalle,
					AnchoDetalle,
					TamanioEntreLineas,
					AnchoReporte,
					FactorAltoReporte,
					LineasAlFinal,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Impresion.Ticket> _cacheItemList = new List<Entities.Relations.Impresion.Ticket>();
			   protected List<Entities.Relations.Impresion.Ticket> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Ticket() : base()
            {
                base._dataItem = new Entities.Relations.Impresion.Ticket();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Impresion.Ticket item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Ticket Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Impresion.TipoTicket TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Modelo DepositarioModeloId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Impresora'></param>
         /// <param name='TextoCabecera'></param>
         /// <param name='NombreFuenteCabecera'></param>
         /// <param name='TamanioFuenteCabecera'></param>
         /// <param name='UbicacionTextoCabecera'></param>
         /// <param name='TextoPie'></param>
         /// <param name='NombreFuentePie'></param>
         /// <param name='TamanioFuentePie'></param>
         /// <param name='UbicacionTextoPie'></param>
         /// <param name='Imagen'></param>
         /// <param name='UbicacionImagen'></param>
         /// <param name='UbicacionTextoDetalle'></param>
         /// <param name='AnchoDetalle'></param>
         /// <param name='TamanioEntreLineas'></param>
         /// <param name='AnchoReporte'></param>
         /// <param name='FactorAltoReporte'></param>
         /// <param name='LineasAlFinal'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Impresion.Ticket</returns>
			public Entities.Relations.Impresion.Ticket Add(DefaultNamespace.Entities.Relations.Impresion.TipoTicket TipoId,DefaultNamespace.Entities.Relations.Dispositivo.Modelo DepositarioModeloId,DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32 TamanioFuenteCabecera,Int32 UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32 TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32 UbicacionTextoDetalle,Int32 AnchoDetalle,Int32 TamanioEntreLineas,Int32 AnchoReporte,Int32 FactorAltoReporte,Int32 LineasAlFinal,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Impresion.Ticket)base.Add(new Entities.Relations.Impresion.Ticket(TipoId,DepositarioModeloId,EmpresaId,Nombre,Descripcion,Impresora,TextoCabecera,NombreFuenteCabecera,TamanioFuenteCabecera,UbicacionTextoCabecera,TextoPie,NombreFuentePie,TamanioFuentePie,UbicacionTextoPie,Imagen,UbicacionImagen,UbicacionTextoDetalle,AnchoDetalle,TamanioEntreLineas,AnchoReporte,FactorAltoReporte,LineasAlFinal,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Impresion.Ticket> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Impresion.Ticket>().ToList<Entities.Relations.Impresion.Ticket>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Impresion.Ticket items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.Ticket> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioModeloId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Impresora"></param>
            /// <param name="TextoCabecera"></param>
            /// <param name="NombreFuenteCabecera"></param>
            /// <param name="TamanioFuenteCabecera"></param>
            /// <param name="UbicacionTextoCabecera"></param>
            /// <param name="TextoPie"></param>
            /// <param name="NombreFuentePie"></param>
            /// <param name="TamanioFuentePie"></param>
            /// <param name="UbicacionTextoPie"></param>
            /// <param name="Imagen"></param>
            /// <param name="UbicacionImagen"></param>
            /// <param name="UbicacionTextoDetalle"></param>
            /// <param name="AnchoDetalle"></param>
            /// <param name="TamanioEntreLineas"></param>
            /// <param name="AnchoReporte"></param>
            /// <param name="FactorAltoReporte"></param>
            /// <param name="LineasAlFinal"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.Ticket> Items(Int64? Id,Int64? TipoId,Int64? DepositarioModeloId,Int64? EmpresaId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32? TamanioFuenteCabecera,Int32? UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32? TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32? UbicacionTextoDetalle,Int32? AnchoDetalle,Int32? TamanioEntreLineas,Int32? AnchoReporte,Int32? FactorAltoReporte,Int32? LineasAlFinal,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioModeloId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioModeloId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioModeloId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioModeloId);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Impresora != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Impresora, DefaultNamespace.sqlEnum.OperandEnum.Equal, Impresora);
                    }
                   
                }
                if (TextoCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoCabecera);
                    }
                   
                }
                if (NombreFuenteCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuenteCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NombreFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuenteCabecera);
                    }
                   
                }
                if (TamanioFuenteCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuenteCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioFuenteCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuenteCabecera);
                    }
                   
                }
                if (UbicacionTextoCabecera != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoCabecera);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoCabecera, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoCabecera);
                    }
                   
                }
                if (TextoPie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoPie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TextoPie);
                    }
                   
                }
                if (NombreFuentePie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuentePie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NombreFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreFuentePie);
                    }
                   
                }
                if (TamanioFuentePie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuentePie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioFuentePie, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioFuentePie);
                    }
                   
                }
                if (UbicacionTextoPie != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoPie);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoPie, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoPie);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (UbicacionImagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionImagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionImagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionImagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionImagen);
                    }
                   
                }
                if (UbicacionTextoDetalle != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UbicacionTextoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoDetalle);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UbicacionTextoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, UbicacionTextoDetalle);
                    }
                   
                }
                if (AnchoDetalle != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoDetalle);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoDetalle, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoDetalle);
                    }
                   
                }
                if (TamanioEntreLineas != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TamanioEntreLineas, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioEntreLineas);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TamanioEntreLineas, DefaultNamespace.sqlEnum.OperandEnum.Equal, TamanioEntreLineas);
                    }
                   
                }
                if (AnchoReporte != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AnchoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoReporte);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AnchoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, AnchoReporte);
                    }
                   
                }
                if (FactorAltoReporte != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FactorAltoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, FactorAltoReporte);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FactorAltoReporte, DefaultNamespace.sqlEnum.OperandEnum.Equal, FactorAltoReporte);
                    }
                   
                }
                if (LineasAlFinal != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LineasAlFinal, DefaultNamespace.sqlEnum.OperandEnum.Equal, LineasAlFinal);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LineasAlFinal, DefaultNamespace.sqlEnum.OperandEnum.Equal, LineasAlFinal);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Impresion.Ticket> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Impresion.Ticket Add(Entities.Relations.Impresion.Ticket item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Impresion.Ticket)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Impresion.Ticket item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Impresion.Ticket item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Impresion.Ticket with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioModeloId"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Impresora"></param>
            /// <param name="TextoCabecera"></param>
            /// <param name="NombreFuenteCabecera"></param>
            /// <param name="TamanioFuenteCabecera"></param>
            /// <param name="UbicacionTextoCabecera"></param>
            /// <param name="TextoPie"></param>
            /// <param name="NombreFuentePie"></param>
            /// <param name="TamanioFuentePie"></param>
            /// <param name="UbicacionTextoPie"></param>
            /// <param name="Imagen"></param>
            /// <param name="UbicacionImagen"></param>
            /// <param name="UbicacionTextoDetalle"></param>
            /// <param name="AnchoDetalle"></param>
            /// <param name="TamanioEntreLineas"></param>
            /// <param name="AnchoReporte"></param>
            /// <param name="FactorAltoReporte"></param>
            /// <param name="LineasAlFinal"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 DepositarioModeloId,Int64 EmpresaId,String Nombre,String Descripcion,String Impresora,String TextoCabecera,String NombreFuenteCabecera,Int32 TamanioFuenteCabecera,Int32 UbicacionTextoCabecera,String TextoPie,String NombreFuentePie,Int32 TamanioFuentePie,String UbicacionTextoPie,String Imagen,String UbicacionImagen,Int32 UbicacionTextoDetalle,Int32 AnchoDetalle,Int32 TamanioEntreLineas,Int32 AnchoReporte,Int32 FactorAltoReporte,Int32 LineasAlFinal,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Impresion.Ticket item = new Entities.Tables.Impresion.Ticket();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.DepositarioModeloId = DepositarioModeloId;
                 item.EmpresaId = EmpresaId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Impresora = Impresora;
                 item.TextoCabecera = TextoCabecera;
                 item.NombreFuenteCabecera = NombreFuenteCabecera;
                 item.TamanioFuenteCabecera = TamanioFuenteCabecera;
                 item.UbicacionTextoCabecera = UbicacionTextoCabecera;
                 item.TextoPie = TextoPie;
                 item.NombreFuentePie = NombreFuentePie;
                 item.TamanioFuentePie = TamanioFuentePie;
                 item.UbicacionTextoPie = UbicacionTextoPie;
                 item.Imagen = Imagen;
                 item.UbicacionImagen = UbicacionImagen;
                 item.UbicacionTextoDetalle = UbicacionTextoDetalle;
                 item.AnchoDetalle = AnchoDetalle;
                 item.TamanioEntreLineas = TamanioEntreLineas;
                 item.AnchoReporte = AnchoReporte;
                 item.FactorAltoReporte = FactorAltoReporte;
                 item.LineasAlFinal = LineasAlFinal;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Ticket
	} //namespace DefaultNamespace.Business.Relations.Impresion
	namespace DefaultNamespace.Business.Relations.Impresion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoTicket : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Codigo,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Impresion.TipoTicket> _cacheItemList = new List<Entities.Relations.Impresion.TipoTicket>();
			   protected List<Entities.Relations.Impresion.TipoTicket> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoTicket() : base()
            {
                base._dataItem = new Entities.Relations.Impresion.TipoTicket();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Impresion.TipoTicket item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoTicket Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Codigo'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Impresion.TipoTicket</returns>
			public Entities.Relations.Impresion.TipoTicket Add(String Nombre,String Descripcion,String Codigo,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Impresion.TipoTicket)base.Add(new Entities.Relations.Impresion.TipoTicket(Nombre,Descripcion,Codigo,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Impresion.TipoTicket> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Impresion.TipoTicket>().ToList<Entities.Relations.Impresion.TipoTicket>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Impresion.TipoTicket items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.TipoTicket> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Impresion.TipoTicket> Items(Int64? Id,String Nombre,String Descripcion,String Codigo,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Impresion.TipoTicket> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Impresion.TipoTicket Add(Entities.Relations.Impresion.TipoTicket item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Impresion.TipoTicket)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Impresion.TipoTicket item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Impresion.TipoTicket item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Impresion.TipoTicket with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Codigo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Codigo,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Impresion.TipoTicket item = new Entities.Tables.Impresion.TipoTicket();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Codigo = Codigo;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoTicket
	} //namespace DefaultNamespace.Business.Relations.Impresion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class CierreDiario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Fecha,
					DepositarioId,
					SesionId,
					CodigoCierre,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.CierreDiario> _cacheItemList = new List<Entities.Relations.Operacion.CierreDiario>();
			   protected List<Entities.Relations.Operacion.CierreDiario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public CierreDiario() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.CierreDiario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.CierreDiario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// CierreDiario Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Fecha'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Sesion SesionId'></param>
         /// <param name='CodigoCierre'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.CierreDiario</returns>
			public Entities.Relations.Operacion.CierreDiario Add(String Nombre,DateTime Fecha,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Operacion.Sesion SesionId,String CodigoCierre,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.CierreDiario)base.Add(new Entities.Relations.Operacion.CierreDiario(Nombre,Fecha,DepositarioId,SesionId,CodigoCierre,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.CierreDiario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.CierreDiario>().ToList<Entities.Relations.Operacion.CierreDiario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.CierreDiario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.CierreDiario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Fecha"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SesionId"></param>
            /// <param name="CodigoCierre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.CierreDiario> Items(Int64? Id,String Nombre,DateTime? Fecha,Int64? DepositarioId,Int64? SesionId,String CodigoCierre,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (CodigoCierre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoCierre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoCierre);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.CierreDiario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.CierreDiario Add(Entities.Relations.Operacion.CierreDiario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.CierreDiario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.CierreDiario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.CierreDiario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.CierreDiario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Fecha"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SesionId"></param>
            /// <param name="CodigoCierre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,DateTime Fecha,Int64 DepositarioId,Int64 SesionId,String CodigoCierre,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.CierreDiario item = new Entities.Tables.Operacion.CierreDiario();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Fecha = Fecha;
                 item.DepositarioId = DepositarioId;
                 item.SesionId = SesionId;
                 item.CodigoCierre = CodigoCierre;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class CierreDiario
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Contenedor : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					DepositarioId,
					TipoId,
					Identificador,
					FechaApertura,
					FechaCierre,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.Contenedor> _cacheItemList = new List<Entities.Relations.Operacion.Contenedor>();
			   protected List<Entities.Relations.Operacion.Contenedor> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Contenedor() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.Contenedor();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.Contenedor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Contenedor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.TipoContenedor TipoId'></param>
         /// <param name='Identificador'></param>
         /// <param name='FechaApertura'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.Contenedor</returns>
			public Entities.Relations.Operacion.Contenedor Add(String Nombre,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Operacion.TipoContenedor TipoId,String Identificador,DateTime FechaApertura,DateTime FechaCierre,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.Contenedor)base.Add(new Entities.Relations.Operacion.Contenedor(Nombre,DepositarioId,TipoId,Identificador,FechaApertura,FechaCierre,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.Contenedor> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.Contenedor>().ToList<Entities.Relations.Operacion.Contenedor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.Contenedor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Contenedor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Identificador"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Contenedor> Items(Int64? Id,String Nombre,Int64? DepositarioId,Int64? TipoId,String Identificador,DateTime? FechaApertura,DateTime? FechaCierre,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Identificador != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Identificador, DefaultNamespace.sqlEnum.OperandEnum.Equal, Identificador);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Identificador, DefaultNamespace.sqlEnum.OperandEnum.Equal, Identificador);
                    }
                   
                }
                if (FechaApertura != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaApertura, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaApertura, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.Contenedor> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.Contenedor Add(Entities.Relations.Operacion.Contenedor item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.Contenedor)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.Contenedor item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.Contenedor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.Contenedor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Identificador"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Int64 DepositarioId,Int64 TipoId,String Identificador,DateTime FechaApertura,DateTime FechaCierre,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.Contenedor item = new Entities.Tables.Operacion.Contenedor();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.DepositarioId = DepositarioId;
                 item.TipoId = TipoId;
                 item.Identificador = Identificador;
                 item.FechaApertura = FechaApertura;
                 item.FechaCierre = FechaCierre;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Contenedor
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Evento : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					SesionId,
					DepositarioId,
					Mensaje,
					Valor,
					Fecha
				}
			   protected List<Entities.Relations.Operacion.Evento> _cacheItemList = new List<Entities.Relations.Operacion.Evento>();
			   protected List<Entities.Relations.Operacion.Evento> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Evento() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.Evento();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.Evento item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Evento Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.TipoEvento TipoId'></param>
         /// <param name='SesionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='Mensaje'></param>
         /// <param name='Valor'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Relations.Operacion.Evento</returns>
			public Entities.Relations.Operacion.Evento Add(DefaultNamespace.Entities.Relations.Operacion.TipoEvento TipoId,Int64 SesionId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,String Mensaje,String Valor,DateTime Fecha) 
			{
			  return (Entities.Relations.Operacion.Evento)base.Add(new Entities.Relations.Operacion.Evento(TipoId,SesionId,DepositarioId,Mensaje,Valor,Fecha));
			}
            public new List<Entities.Relations.Operacion.Evento> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.Evento>().ToList<Entities.Relations.Operacion.Evento>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.Evento items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Evento> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="SesionId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Mensaje"></param>
            /// <param name="Valor"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Evento> Items(Int64? Id,Int64? TipoId,Int64? SesionId,Int64? DepositarioId,String Mensaje,String Valor,DateTime? Fecha)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Mensaje != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mensaje, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mensaje);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Mensaje, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mensaje);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.Evento> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.Evento Add(Entities.Relations.Operacion.Evento item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.Evento)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.Evento item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.Evento item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.Evento with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="SesionId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Mensaje"></param>
            /// <param name="Valor"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 SesionId,Int64 DepositarioId,String Mensaje,String Valor,DateTime Fecha)
            {
                 Entities.Tables.Operacion.Evento item = new Entities.Tables.Operacion.Evento();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.SesionId = SesionId;
                 item.DepositarioId = DepositarioId;
                 item.Mensaje = Mensaje;
                 item.Valor = Valor;
                 item.Fecha = Fecha;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Evento
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Sesion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					DepositarioId,
					UsuarioId,
					FechaInicio,
					FechaCierre,
					EsCierreAutomatico
				}
			   protected List<Entities.Relations.Operacion.Sesion> _cacheItemList = new List<Entities.Relations.Operacion.Sesion>();
			   protected List<Entities.Relations.Operacion.Sesion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Sesion() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.Sesion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.Sesion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Sesion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='UsuarioId'></param>
         /// <param name='FechaInicio'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='EsCierreAutomatico'></param>
         /// <returns>Entities.Relations.Operacion.Sesion</returns>
			public Entities.Relations.Operacion.Sesion Add(DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,Int64 UsuarioId,DateTime FechaInicio,DateTime FechaCierre,Boolean EsCierreAutomatico) 
			{
			  return (Entities.Relations.Operacion.Sesion)base.Add(new Entities.Relations.Operacion.Sesion(DepositarioId,UsuarioId,FechaInicio,FechaCierre,EsCierreAutomatico));
			}
            public new List<Entities.Relations.Operacion.Sesion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.Sesion>().ToList<Entities.Relations.Operacion.Sesion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.Sesion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Sesion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="FechaInicio"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="EsCierreAutomatico"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Sesion> Items(Int64? Id,Int64? DepositarioId,Int64? UsuarioId,DateTime? FechaInicio,DateTime? FechaCierre,Boolean? EsCierreAutomatico)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (FechaInicio != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaInicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaInicio);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaInicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaInicio);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (EsCierreAutomatico != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsCierreAutomatico, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsCierreAutomatico);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsCierreAutomatico, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsCierreAutomatico);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.Sesion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.Sesion Add(Entities.Relations.Operacion.Sesion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.Sesion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.Sesion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.Sesion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.Sesion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="FechaInicio"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="EsCierreAutomatico"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 DepositarioId,Int64 UsuarioId,DateTime FechaInicio,DateTime FechaCierre,Boolean EsCierreAutomatico)
            {
                 Entities.Tables.Operacion.Sesion item = new Entities.Tables.Operacion.Sesion();
                 item.Id = Id;
                 item.DepositarioId = DepositarioId;
                 item.UsuarioId = UsuarioId;
                 item.FechaInicio = FechaInicio;
                 item.FechaCierre = FechaCierre;
                 item.EsCierreAutomatico = EsCierreAutomatico;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Sesion
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoContenedor : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Capacidad,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.TipoContenedor> _cacheItemList = new List<Entities.Relations.Operacion.TipoContenedor>();
			   protected List<Entities.Relations.Operacion.TipoContenedor> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoContenedor() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TipoContenedor();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TipoContenedor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoContenedor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Capacidad'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.TipoContenedor</returns>
			public Entities.Relations.Operacion.TipoContenedor Add(String Nombre,String Descripcion,Int32 Capacidad,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.TipoContenedor)base.Add(new Entities.Relations.Operacion.TipoContenedor(Nombre,Descripcion,Capacidad,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.TipoContenedor> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TipoContenedor>().ToList<Entities.Relations.Operacion.TipoContenedor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TipoContenedor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoContenedor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Capacidad"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoContenedor> Items(Int64? Id,String Nombre,String Descripcion,Int32? Capacidad,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Capacidad != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Capacidad, DefaultNamespace.sqlEnum.OperandEnum.Equal, Capacidad);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Capacidad, DefaultNamespace.sqlEnum.OperandEnum.Equal, Capacidad);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TipoContenedor> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TipoContenedor Add(Entities.Relations.Operacion.TipoContenedor item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TipoContenedor)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TipoContenedor item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TipoContenedor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TipoContenedor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Capacidad"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int32 Capacidad,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.TipoContenedor item = new Entities.Tables.Operacion.TipoContenedor();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Capacidad = Capacidad;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoContenedor
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoEvento : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsBloqueante,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.TipoEvento> _cacheItemList = new List<Entities.Relations.Operacion.TipoEvento>();
			   protected List<Entities.Relations.Operacion.TipoEvento> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoEvento() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TipoEvento();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TipoEvento item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoEvento Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsBloqueante'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.TipoEvento</returns>
			public Entities.Relations.Operacion.TipoEvento Add(String Nombre,String Descripcion,Boolean EsBloqueante,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.TipoEvento)base.Add(new Entities.Relations.Operacion.TipoEvento(Nombre,Descripcion,EsBloqueante,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.TipoEvento> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TipoEvento>().ToList<Entities.Relations.Operacion.TipoEvento>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TipoEvento items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoEvento> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsBloqueante"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoEvento> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsBloqueante,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsBloqueante != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsBloqueante, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsBloqueante);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsBloqueante, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsBloqueante);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TipoEvento> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TipoEvento Add(Entities.Relations.Operacion.TipoEvento item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TipoEvento)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TipoEvento item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TipoEvento item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TipoEvento with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsBloqueante"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean EsBloqueante,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.TipoEvento item = new Entities.Tables.Operacion.TipoEvento();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.EsBloqueante = EsBloqueante;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoEvento
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoTransaccion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					FuncionId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.TipoTransaccion> _cacheItemList = new List<Entities.Relations.Operacion.TipoTransaccion>();
			   protected List<Entities.Relations.Operacion.TipoTransaccion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoTransaccion() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TipoTransaccion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TipoTransaccion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoTransaccion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='FuncionId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.TipoTransaccion</returns>
			public Entities.Relations.Operacion.TipoTransaccion Add(String Nombre,String Descripcion,Int64 FuncionId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.TipoTransaccion)base.Add(new Entities.Relations.Operacion.TipoTransaccion(Nombre,Descripcion,FuncionId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.TipoTransaccion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TipoTransaccion>().ToList<Entities.Relations.Operacion.TipoTransaccion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TipoTransaccion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoTransaccion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TipoTransaccion> Items(Int64? Id,String Nombre,String Descripcion,Int64? FuncionId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TipoTransaccion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TipoTransaccion Add(Entities.Relations.Operacion.TipoTransaccion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TipoTransaccion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TipoTransaccion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TipoTransaccion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TipoTransaccion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 FuncionId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.TipoTransaccion item = new Entities.Tables.Operacion.TipoTransaccion();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.FuncionId = FuncionId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoTransaccion
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Transaccion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					DepositarioId,
					SectorId,
					SucursalId,
					MonedaId,
					UsuarioId,
					CuentaId,
					ContenedorId,
					SesionId,
					TurnoId,
					CierreDiarioId,
					TotalValidado,
					TotalAValidar,
					Fecha,
					Finalizada,
					EsDepositoAutomatico,
					OrigenValorId,
					CodigoOperacion
				}
			   protected List<Entities.Relations.Operacion.Transaccion> _cacheItemList = new List<Entities.Relations.Operacion.Transaccion>();
			   protected List<Entities.Relations.Operacion.Transaccion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Transaccion() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.Transaccion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.Transaccion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Transaccion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.TipoTransaccion TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sector SectorId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Banca.Cuenta CuentaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Contenedor ContenedorId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Sesion SesionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Turno TurnoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.CierreDiario CierreDiarioId'></param>
         /// <param name='TotalValidado'></param>
         /// <param name='TotalAValidar'></param>
         /// <param name='Fecha'></param>
         /// <param name='Finalizada'></param>
         /// <param name='EsDepositoAutomatico'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.OrigenValor OrigenValorId'></param>
         /// <param name='CodigoOperacion'></param>
         /// <returns>Entities.Relations.Operacion.Transaccion</returns>
			public Entities.Relations.Operacion.Transaccion Add(DefaultNamespace.Entities.Relations.Operacion.TipoTransaccion TipoId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Directorio.Sector SectorId,DefaultNamespace.Entities.Relations.Directorio.Sucursal SucursalId,DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId,DefaultNamespace.Entities.Relations.Banca.Cuenta CuentaId,DefaultNamespace.Entities.Relations.Operacion.Contenedor ContenedorId,DefaultNamespace.Entities.Relations.Operacion.Sesion SesionId,DefaultNamespace.Entities.Relations.Operacion.Turno TurnoId,DefaultNamespace.Entities.Relations.Operacion.CierreDiario CierreDiarioId,Double TotalValidado,Double TotalAValidar,DateTime Fecha,Boolean Finalizada,Boolean EsDepositoAutomatico,DefaultNamespace.Entities.Relations.Valor.OrigenValor OrigenValorId,String CodigoOperacion) 
			{
			  return (Entities.Relations.Operacion.Transaccion)base.Add(new Entities.Relations.Operacion.Transaccion(TipoId,DepositarioId,SectorId,SucursalId,MonedaId,UsuarioId,CuentaId,ContenedorId,SesionId,TurnoId,CierreDiarioId,TotalValidado,TotalAValidar,Fecha,Finalizada,EsDepositoAutomatico,OrigenValorId,CodigoOperacion));
			}
            public new List<Entities.Relations.Operacion.Transaccion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.Transaccion>().ToList<Entities.Relations.Operacion.Transaccion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.Transaccion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Transaccion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="ContenedorId"></param>
            /// <param name="SesionId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="TotalValidado"></param>
            /// <param name="TotalAValidar"></param>
            /// <param name="Fecha"></param>
            /// <param name="Finalizada"></param>
            /// <param name="EsDepositoAutomatico"></param>
            /// <param name="OrigenValorId"></param>
            /// <param name="CodigoOperacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Transaccion> Items(Int64? Id,Int64? TipoId,Int64? DepositarioId,Int64? SectorId,Int64? SucursalId,Int64? MonedaId,Int64? UsuarioId,Int64? CuentaId,Int64? ContenedorId,Int64? SesionId,Int64? TurnoId,Int64? CierreDiarioId,Double? TotalValidado,Double? TotalAValidar,DateTime? Fecha,Boolean? Finalizada,Boolean? EsDepositoAutomatico,Int64? OrigenValorId,String CodigoOperacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (SucursalId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SucursalId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SucursalId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (CuentaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CuentaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CuentaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CuentaId);
                    }
                   
                }
                if (ContenedorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ContenedorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContenedorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ContenedorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ContenedorId);
                    }
                   
                }
                if (SesionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SesionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SesionId);
                    }
                   
                }
                if (TurnoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                   
                }
                if (CierreDiarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CierreDiarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CierreDiarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                   
                }
                if (TotalValidado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TotalValidado, DefaultNamespace.sqlEnum.OperandEnum.Equal, TotalValidado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TotalValidado, DefaultNamespace.sqlEnum.OperandEnum.Equal, TotalValidado);
                    }
                   
                }
                if (TotalAValidar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TotalAValidar, DefaultNamespace.sqlEnum.OperandEnum.Equal, TotalAValidar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TotalAValidar, DefaultNamespace.sqlEnum.OperandEnum.Equal, TotalAValidar);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Finalizada != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Finalizada, DefaultNamespace.sqlEnum.OperandEnum.Equal, Finalizada);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Finalizada, DefaultNamespace.sqlEnum.OperandEnum.Equal, Finalizada);
                    }
                   
                }
                if (EsDepositoAutomatico != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDepositoAutomatico, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDepositoAutomatico);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsDepositoAutomatico, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDepositoAutomatico);
                    }
                   
                }
                if (OrigenValorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.OrigenValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, OrigenValorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.OrigenValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, OrigenValorId);
                    }
                   
                }
                if (CodigoOperacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoOperacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoOperacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoOperacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoOperacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.Transaccion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.Transaccion Add(Entities.Relations.Operacion.Transaccion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.Transaccion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.Transaccion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.Transaccion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.Transaccion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="SucursalId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="CuentaId"></param>
            /// <param name="ContenedorId"></param>
            /// <param name="SesionId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="TotalValidado"></param>
            /// <param name="TotalAValidar"></param>
            /// <param name="Fecha"></param>
            /// <param name="Finalizada"></param>
            /// <param name="EsDepositoAutomatico"></param>
            /// <param name="OrigenValorId"></param>
            /// <param name="CodigoOperacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 DepositarioId,Int64 SectorId,Int64 SucursalId,Int64 MonedaId,Int64 UsuarioId,Int64 CuentaId,Int64 ContenedorId,Int64 SesionId,Int64 TurnoId,Int64 CierreDiarioId,Double TotalValidado,Double TotalAValidar,DateTime Fecha,Boolean Finalizada,Boolean EsDepositoAutomatico,Int64 OrigenValorId,String CodigoOperacion)
            {
                 Entities.Tables.Operacion.Transaccion item = new Entities.Tables.Operacion.Transaccion();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.DepositarioId = DepositarioId;
                 item.SectorId = SectorId;
                 item.SucursalId = SucursalId;
                 item.MonedaId = MonedaId;
                 item.UsuarioId = UsuarioId;
                 item.CuentaId = CuentaId;
                 item.ContenedorId = ContenedorId;
                 item.SesionId = SesionId;
                 item.TurnoId = TurnoId;
                 item.CierreDiarioId = CierreDiarioId;
                 item.TotalValidado = TotalValidado;
                 item.TotalAValidar = TotalAValidar;
                 item.Fecha = Fecha;
                 item.Finalizada = Finalizada;
                 item.EsDepositoAutomatico = EsDepositoAutomatico;
                 item.OrigenValorId = OrigenValorId;
                 item.CodigoOperacion = CodigoOperacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Transaccion
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TransaccionId,
					DenominacionId,
					CantidadUnidades,
					Fecha
				}
			   protected List<Entities.Relations.Operacion.TransaccionDetalle> _cacheItemList = new List<Entities.Relations.Operacion.TransaccionDetalle>();
			   protected List<Entities.Relations.Operacion.TransaccionDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TransaccionDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TransaccionDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TransaccionDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionDetalle Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Transaccion TransaccionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Denominacion DenominacionId'></param>
         /// <param name='CantidadUnidades'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Relations.Operacion.TransaccionDetalle</returns>
			public Entities.Relations.Operacion.TransaccionDetalle Add(DefaultNamespace.Entities.Relations.Operacion.Transaccion TransaccionId,DefaultNamespace.Entities.Relations.Valor.Denominacion DenominacionId,Int64 CantidadUnidades,DateTime Fecha) 
			{
			  return (Entities.Relations.Operacion.TransaccionDetalle)base.Add(new Entities.Relations.Operacion.TransaccionDetalle(TransaccionId,DenominacionId,CantidadUnidades,Fecha));
			}
            public new List<Entities.Relations.Operacion.TransaccionDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TransaccionDetalle>().ToList<Entities.Relations.Operacion.TransaccionDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TransaccionDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="DenominacionId"></param>
            /// <param name="CantidadUnidades"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionDetalle> Items(Int64? Id,Int64? TransaccionId,Int64? DenominacionId,Int64? CantidadUnidades,DateTime? Fecha)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TransaccionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TransaccionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TransaccionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                   
                }
                if (DenominacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DenominacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DenominacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DenominacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DenominacionId);
                    }
                   
                }
                if (CantidadUnidades != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadUnidades, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadUnidades);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CantidadUnidades, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadUnidades);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TransaccionDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TransaccionDetalle Add(Entities.Relations.Operacion.TransaccionDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TransaccionDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TransaccionDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TransaccionDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TransaccionDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="DenominacionId"></param>
            /// <param name="CantidadUnidades"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TransaccionId,Int64 DenominacionId,Int64 CantidadUnidades,DateTime Fecha)
            {
                 Entities.Tables.Operacion.TransaccionDetalle item = new Entities.Tables.Operacion.TransaccionDetalle();
                 item.Id = Id;
                 item.TransaccionId = TransaccionId;
                 item.DenominacionId = DenominacionId;
                 item.CantidadUnidades = CantidadUnidades;
                 item.Fecha = Fecha;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionDetalle
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionSobre : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TransaccionId,
					CodigoSobre,
					Fecha
				}
			   protected List<Entities.Relations.Operacion.TransaccionSobre> _cacheItemList = new List<Entities.Relations.Operacion.TransaccionSobre>();
			   protected List<Entities.Relations.Operacion.TransaccionSobre> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TransaccionSobre() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TransaccionSobre();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TransaccionSobre item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionSobre Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.Transaccion TransaccionId'></param>
         /// <param name='CodigoSobre'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Relations.Operacion.TransaccionSobre</returns>
			public Entities.Relations.Operacion.TransaccionSobre Add(DefaultNamespace.Entities.Relations.Operacion.Transaccion TransaccionId,String CodigoSobre,DateTime Fecha) 
			{
			  return (Entities.Relations.Operacion.TransaccionSobre)base.Add(new Entities.Relations.Operacion.TransaccionSobre(TransaccionId,CodigoSobre,Fecha));
			}
            public new List<Entities.Relations.Operacion.TransaccionSobre> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TransaccionSobre>().ToList<Entities.Relations.Operacion.TransaccionSobre>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TransaccionSobre items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionSobre> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="CodigoSobre"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionSobre> Items(Int64? Id,Int64? TransaccionId,String CodigoSobre,DateTime? Fecha)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TransaccionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TransaccionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TransaccionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TransaccionId);
                    }
                   
                }
                if (CodigoSobre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoSobre, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoSobre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoSobre, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoSobre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TransaccionSobre> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TransaccionSobre Add(Entities.Relations.Operacion.TransaccionSobre item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TransaccionSobre)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TransaccionSobre item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TransaccionSobre item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TransaccionSobre with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TransaccionId"></param>
            /// <param name="CodigoSobre"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TransaccionId,String CodigoSobre,DateTime Fecha)
            {
                 Entities.Tables.Operacion.TransaccionSobre item = new Entities.Tables.Operacion.TransaccionSobre();
                 item.Id = Id;
                 item.TransaccionId = TransaccionId;
                 item.CodigoSobre = CodigoSobre;
                 item.Fecha = Fecha;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionSobre
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TransaccionSobreDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					SobreId,
					RelacionMonedaTipoValorId,
					CantidadDeclarada,
					ValorDeclarado,
					Fecha
				}
			   protected List<Entities.Relations.Operacion.TransaccionSobreDetalle> _cacheItemList = new List<Entities.Relations.Operacion.TransaccionSobreDetalle>();
			   protected List<Entities.Relations.Operacion.TransaccionSobreDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TransaccionSobreDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TransaccionSobreDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TransaccionSobreDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TransaccionSobreDetalle Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.TransaccionSobre SobreId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.RelacionMonedaTipoValor RelacionMonedaTipoValorId'></param>
         /// <param name='CantidadDeclarada'></param>
         /// <param name='ValorDeclarado'></param>
         /// <param name='Fecha'></param>
         /// <returns>Entities.Relations.Operacion.TransaccionSobreDetalle</returns>
			public Entities.Relations.Operacion.TransaccionSobreDetalle Add(DefaultNamespace.Entities.Relations.Operacion.TransaccionSobre SobreId,DefaultNamespace.Entities.Relations.Valor.RelacionMonedaTipoValor RelacionMonedaTipoValorId,Int64 CantidadDeclarada,Double ValorDeclarado,DateTime Fecha) 
			{
			  return (Entities.Relations.Operacion.TransaccionSobreDetalle)base.Add(new Entities.Relations.Operacion.TransaccionSobreDetalle(SobreId,RelacionMonedaTipoValorId,CantidadDeclarada,ValorDeclarado,Fecha));
			}
            public new List<Entities.Relations.Operacion.TransaccionSobreDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TransaccionSobreDetalle>().ToList<Entities.Relations.Operacion.TransaccionSobreDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TransaccionSobreDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionSobreDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SobreId"></param>
            /// <param name="RelacionMonedaTipoValorId"></param>
            /// <param name="CantidadDeclarada"></param>
            /// <param name="ValorDeclarado"></param>
            /// <param name="Fecha"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TransaccionSobreDetalle> Items(Int64? Id,Int64? SobreId,Int64? RelacionMonedaTipoValorId,Int64? CantidadDeclarada,Double? ValorDeclarado,DateTime? Fecha)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (SobreId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SobreId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SobreId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SobreId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SobreId);
                    }
                   
                }
                if (RelacionMonedaTipoValorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RelacionMonedaTipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RelacionMonedaTipoValorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RelacionMonedaTipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RelacionMonedaTipoValorId);
                    }
                   
                }
                if (CantidadDeclarada != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadDeclarada, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadDeclarada);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CantidadDeclarada, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadDeclarada);
                    }
                   
                }
                if (ValorDeclarado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ValorDeclarado, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValorDeclarado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ValorDeclarado, DefaultNamespace.sqlEnum.OperandEnum.Equal, ValorDeclarado);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TransaccionSobreDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TransaccionSobreDetalle Add(Entities.Relations.Operacion.TransaccionSobreDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TransaccionSobreDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TransaccionSobreDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TransaccionSobreDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TransaccionSobreDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="SobreId"></param>
            /// <param name="RelacionMonedaTipoValorId"></param>
            /// <param name="CantidadDeclarada"></param>
            /// <param name="ValorDeclarado"></param>
            /// <param name="Fecha"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 SobreId,Int64 RelacionMonedaTipoValorId,Int64 CantidadDeclarada,Double ValorDeclarado,DateTime Fecha)
            {
                 Entities.Tables.Operacion.TransaccionSobreDetalle item = new Entities.Tables.Operacion.TransaccionSobreDetalle();
                 item.Id = Id;
                 item.SobreId = SobreId;
                 item.RelacionMonedaTipoValorId = RelacionMonedaTipoValorId;
                 item.CantidadDeclarada = CantidadDeclarada;
                 item.ValorDeclarado = ValorDeclarado;
                 item.Fecha = Fecha;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TransaccionSobreDetalle
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Turno : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TurnoDepositarioId,
					DepositarioId,
					SectorId,
					FechaApertura,
					FechaCierre,
					Fecha,
					Secuencia,
					CierreDiarioId,
					Observaciones,
					CodigoTurno,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
			   protected List<Entities.Relations.Operacion.Turno> _cacheItemList = new List<Entities.Relations.Operacion.Turno>();
			   protected List<Entities.Relations.Operacion.Turno> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Turno() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.Turno();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.Turno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Turno Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Turno.AgendaTurno TurnoDepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sector SectorId'></param>
         /// <param name='FechaApertura'></param>
         /// <param name='FechaCierre'></param>
         /// <param name='Fecha'></param>
         /// <param name='Secuencia'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Operacion.CierreDiario CierreDiarioId'></param>
         /// <param name='Observaciones'></param>
         /// <param name='CodigoTurno'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Relations.Operacion.Turno</returns>
			public Entities.Relations.Operacion.Turno Add(DefaultNamespace.Entities.Relations.Turno.AgendaTurno TurnoDepositarioId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,DefaultNamespace.Entities.Relations.Directorio.Sector SectorId,DateTime FechaApertura,DateTime FechaCierre,DateTime Fecha,Int32 Secuencia,DefaultNamespace.Entities.Relations.Operacion.CierreDiario CierreDiarioId,String Observaciones,String CodigoTurno,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Relations.Operacion.Turno)base.Add(new Entities.Relations.Operacion.Turno(TurnoDepositarioId,DepositarioId,SectorId,FechaApertura,FechaCierre,Fecha,Secuencia,CierreDiarioId,Observaciones,CodigoTurno,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Relations.Operacion.Turno> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.Turno>().ToList<Entities.Relations.Operacion.Turno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.Turno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Turno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TurnoDepositarioId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Fecha"></param>
            /// <param name="Secuencia"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="Observaciones"></param>
            /// <param name="CodigoTurno"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.Turno> Items(Int64? Id,Int64? TurnoDepositarioId,Int64? DepositarioId,Int64? SectorId,DateTime? FechaApertura,DateTime? FechaCierre,DateTime? Fecha,Int32? Secuencia,Int64? CierreDiarioId,String Observaciones,String CodigoTurno,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TurnoDepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoDepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoDepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TurnoDepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoDepositarioId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (FechaApertura != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaApertura, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaApertura, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaApertura);
                    }
                   
                }
                if (FechaCierre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCierre, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCierre);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (CierreDiarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CierreDiarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CierreDiarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, CierreDiarioId);
                    }
                   
                }
                if (Observaciones != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Observaciones, DefaultNamespace.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Observaciones, DefaultNamespace.sqlEnum.OperandEnum.Equal, Observaciones);
                    }
                   
                }
                if (CodigoTurno != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoTurno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoTurno);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoTurno, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoTurno);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.Turno> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.Turno Add(Entities.Relations.Operacion.Turno item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.Turno)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.Turno item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.Turno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.Turno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TurnoDepositarioId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="FechaApertura"></param>
            /// <param name="FechaCierre"></param>
            /// <param name="Fecha"></param>
            /// <param name="Secuencia"></param>
            /// <param name="CierreDiarioId"></param>
            /// <param name="Observaciones"></param>
            /// <param name="CodigoTurno"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TurnoDepositarioId,Int64 DepositarioId,Int64 SectorId,DateTime FechaApertura,DateTime FechaCierre,DateTime Fecha,Int32 Secuencia,Int64 CierreDiarioId,String Observaciones,String CodigoTurno,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado)
            {
                 Entities.Tables.Operacion.Turno item = new Entities.Tables.Operacion.Turno();
                 item.Id = Id;
                 item.TurnoDepositarioId = TurnoDepositarioId;
                 item.DepositarioId = DepositarioId;
                 item.SectorId = SectorId;
                 item.FechaApertura = FechaApertura;
                 item.FechaCierre = FechaCierre;
                 item.Fecha = Fecha;
                 item.Secuencia = Secuencia;
                 item.CierreDiarioId = CierreDiarioId;
                 item.Observaciones = Observaciones;
                 item.CodigoTurno = CodigoTurno;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;
                 item.Habilitado = Habilitado;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Turno
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Operacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TurnoUsuario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					TurnoId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Operacion.TurnoUsuario> _cacheItemList = new List<Entities.Relations.Operacion.TurnoUsuario>();
			   protected List<Entities.Relations.Operacion.TurnoUsuario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TurnoUsuario() : base()
            {
                base._dataItem = new Entities.Relations.Operacion.TurnoUsuario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Operacion.TurnoUsuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TurnoUsuario Add Method
         /// </summary>
         /// <param name='UsuarioId'></param>
         /// <param name='TurnoId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Operacion.TurnoUsuario</returns>
			public Entities.Relations.Operacion.TurnoUsuario Add(Int64 UsuarioId,Int64 TurnoId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Operacion.TurnoUsuario)base.Add(new Entities.Relations.Operacion.TurnoUsuario(UsuarioId,TurnoId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Operacion.TurnoUsuario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Operacion.TurnoUsuario>().ToList<Entities.Relations.Operacion.TurnoUsuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Operacion.TurnoUsuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TurnoUsuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Operacion.TurnoUsuario> Items(Int64? Id,Int64? UsuarioId,Int64? TurnoId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (TurnoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TurnoId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Operacion.TurnoUsuario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Operacion.TurnoUsuario Add(Entities.Relations.Operacion.TurnoUsuario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Operacion.TurnoUsuario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Operacion.TurnoUsuario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Operacion.TurnoUsuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Operacion.TurnoUsuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="TurnoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 UsuarioId,Int64 TurnoId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Operacion.TurnoUsuario item = new Entities.Tables.Operacion.TurnoUsuario();
                 item.Id = Id;
                 item.UsuarioId = UsuarioId;
                 item.TurnoId = TurnoId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TurnoUsuario
	} //namespace DefaultNamespace.Business.Relations.Operacion
	namespace DefaultNamespace.Business.Relations.Regionalizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Lenguaje : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Cultura,
					EsDefault,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Regionalizacion.Lenguaje> _cacheItemList = new List<Entities.Relations.Regionalizacion.Lenguaje>();
			   protected List<Entities.Relations.Regionalizacion.Lenguaje> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Lenguaje() : base()
            {
                base._dataItem = new Entities.Relations.Regionalizacion.Lenguaje();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Regionalizacion.Lenguaje item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Lenguaje Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Cultura'></param>
         /// <param name='EsDefault'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Regionalizacion.Lenguaje</returns>
			public Entities.Relations.Regionalizacion.Lenguaje Add(String Nombre,String Descripcion,String Cultura,Boolean EsDefault,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Regionalizacion.Lenguaje)base.Add(new Entities.Relations.Regionalizacion.Lenguaje(Nombre,Descripcion,Cultura,EsDefault,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Regionalizacion.Lenguaje> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Regionalizacion.Lenguaje>().ToList<Entities.Relations.Regionalizacion.Lenguaje>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Regionalizacion.Lenguaje items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Regionalizacion.Lenguaje> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Cultura"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Regionalizacion.Lenguaje> Items(Int64? Id,String Nombre,String Descripcion,String Cultura,Boolean? EsDefault,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Cultura != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Cultura, DefaultNamespace.sqlEnum.OperandEnum.Equal, Cultura);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Cultura, DefaultNamespace.sqlEnum.OperandEnum.Equal, Cultura);
                    }
                   
                }
                if (EsDefault != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsDefault, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsDefault);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Regionalizacion.Lenguaje> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Regionalizacion.Lenguaje Add(Entities.Relations.Regionalizacion.Lenguaje item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Regionalizacion.Lenguaje)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Regionalizacion.Lenguaje item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Regionalizacion.Lenguaje item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Regionalizacion.Lenguaje with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Cultura"></param>
            /// <param name="EsDefault"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Cultura,Boolean EsDefault,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Regionalizacion.Lenguaje item = new Entities.Tables.Regionalizacion.Lenguaje();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Cultura = Cultura;
                 item.EsDefault = EsDefault;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Lenguaje
	} //namespace DefaultNamespace.Business.Relations.Regionalizacion
	namespace DefaultNamespace.Business.Relations.Regionalizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class LenguajeItem : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					LenguajeId,
					Clave,
					Texto,
					Habilitado,
					LargoMaximo,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Regionalizacion.LenguajeItem> _cacheItemList = new List<Entities.Relations.Regionalizacion.LenguajeItem>();
			   protected List<Entities.Relations.Regionalizacion.LenguajeItem> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public LenguajeItem() : base()
            {
                base._dataItem = new Entities.Relations.Regionalizacion.LenguajeItem();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Regionalizacion.LenguajeItem item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// LenguajeItem Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId'></param>
         /// <param name='Clave'></param>
         /// <param name='Texto'></param>
         /// <param name='Habilitado'></param>
         /// <param name='LargoMaximo'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Regionalizacion.LenguajeItem</returns>
			public Entities.Relations.Regionalizacion.LenguajeItem Add(DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId,String Clave,String Texto,Boolean Habilitado,Int32 LargoMaximo,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Regionalizacion.LenguajeItem)base.Add(new Entities.Relations.Regionalizacion.LenguajeItem(LenguajeId,Clave,Texto,Habilitado,LargoMaximo,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Regionalizacion.LenguajeItem> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Regionalizacion.LenguajeItem>().ToList<Entities.Relations.Regionalizacion.LenguajeItem>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Regionalizacion.LenguajeItem items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Regionalizacion.LenguajeItem> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Clave"></param>
            /// <param name="Texto"></param>
            /// <param name="Habilitado"></param>
            /// <param name="LargoMaximo"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Regionalizacion.LenguajeItem> Items(Int64? Id,Int64? LenguajeId,String Clave,String Texto,Boolean? Habilitado,Int32? LargoMaximo,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (Clave != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Clave, DefaultNamespace.sqlEnum.OperandEnum.Equal, Clave);
                    }
                   
                }
                if (Texto != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Texto, DefaultNamespace.sqlEnum.OperandEnum.Equal, Texto);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Texto, DefaultNamespace.sqlEnum.OperandEnum.Equal, Texto);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (LargoMaximo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LargoMaximo, DefaultNamespace.sqlEnum.OperandEnum.Equal, LargoMaximo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LargoMaximo, DefaultNamespace.sqlEnum.OperandEnum.Equal, LargoMaximo);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Regionalizacion.LenguajeItem> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Regionalizacion.LenguajeItem Add(Entities.Relations.Regionalizacion.LenguajeItem item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Regionalizacion.LenguajeItem)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Regionalizacion.LenguajeItem item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Regionalizacion.LenguajeItem item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Regionalizacion.LenguajeItem with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="Clave"></param>
            /// <param name="Texto"></param>
            /// <param name="Habilitado"></param>
            /// <param name="LargoMaximo"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 LenguajeId,String Clave,String Texto,Boolean Habilitado,Int32 LargoMaximo,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Regionalizacion.LenguajeItem item = new Entities.Tables.Regionalizacion.LenguajeItem();
                 item.Id = Id;
                 item.LenguajeId = LenguajeId;
                 item.Clave = Clave;
                 item.Texto = Texto;
                 item.Habilitado = Habilitado;
                 item.LargoMaximo = LargoMaximo;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class LenguajeItem
	} //namespace DefaultNamespace.Business.Relations.Regionalizacion
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Aplicacion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.Aplicacion> _cacheItemList = new List<Entities.Relations.Seguridad.Aplicacion>();
			   protected List<Entities.Relations.Seguridad.Aplicacion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Aplicacion() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.Aplicacion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.Aplicacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Aplicacion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.TipoAplicacion TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.Aplicacion</returns>
			public Entities.Relations.Seguridad.Aplicacion Add(DefaultNamespace.Entities.Relations.Seguridad.TipoAplicacion TipoId,String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.Aplicacion)base.Add(new Entities.Relations.Seguridad.Aplicacion(TipoId,Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.Aplicacion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.Aplicacion>().ToList<Entities.Relations.Seguridad.Aplicacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.Aplicacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Aplicacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Aplicacion> Items(Int64? Id,Int64? TipoId,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.Aplicacion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.Aplicacion Add(Entities.Relations.Seguridad.Aplicacion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.Aplicacion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.Aplicacion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.Aplicacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.Aplicacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.Aplicacion item = new Entities.Tables.Seguridad.Aplicacion();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Aplicacion
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AplicacionParametro : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					Nombre,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.AplicacionParametro> _cacheItemList = new List<Entities.Relations.Seguridad.AplicacionParametro>();
			   protected List<Entities.Relations.Seguridad.AplicacionParametro> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public AplicacionParametro() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.AplicacionParametro();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.AplicacionParametro item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AplicacionParametro Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.AplicacionParametro</returns>
			public Entities.Relations.Seguridad.AplicacionParametro Add(DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,String Nombre,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.AplicacionParametro)base.Add(new Entities.Relations.Seguridad.AplicacionParametro(AplicacionId,Nombre,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.AplicacionParametro> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.AplicacionParametro>().ToList<Entities.Relations.Seguridad.AplicacionParametro>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.AplicacionParametro items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.AplicacionParametro> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.AplicacionParametro> Items(Int64? Id,Int64? AplicacionId,String Nombre,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.AplicacionParametro> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.AplicacionParametro Add(Entities.Relations.Seguridad.AplicacionParametro item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.AplicacionParametro)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.AplicacionParametro item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.AplicacionParametro item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.AplicacionParametro with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 AplicacionId,String Nombre,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.AplicacionParametro item = new Entities.Tables.Seguridad.AplicacionParametro();
                 item.Id = Id;
                 item.AplicacionId = AplicacionId;
                 item.Nombre = Nombre;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AplicacionParametro
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AplicacionParametroValor : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					ParametroId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.AplicacionParametroValor> _cacheItemList = new List<Entities.Relations.Seguridad.AplicacionParametroValor>();
			   protected List<Entities.Relations.Seguridad.AplicacionParametroValor> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public AplicacionParametroValor() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.AplicacionParametroValor();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.AplicacionParametroValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AplicacionParametroValor Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.AplicacionParametro ParametroId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.AplicacionParametroValor</returns>
			public Entities.Relations.Seguridad.AplicacionParametroValor Add(DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,DefaultNamespace.Entities.Relations.Seguridad.AplicacionParametro ParametroId,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.AplicacionParametroValor)base.Add(new Entities.Relations.Seguridad.AplicacionParametroValor(AplicacionId,ParametroId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.AplicacionParametroValor> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.AplicacionParametroValor>().ToList<Entities.Relations.Seguridad.AplicacionParametroValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.AplicacionParametroValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.AplicacionParametroValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ParametroId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.AplicacionParametroValor> Items(Int64? Id,Int64? AplicacionId,Int64? ParametroId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (ParametroId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.ParametroId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ParametroId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.ParametroId, DefaultNamespace.sqlEnum.OperandEnum.Equal, ParametroId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.AplicacionParametroValor> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.AplicacionParametroValor Add(Entities.Relations.Seguridad.AplicacionParametroValor item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.AplicacionParametroValor)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.AplicacionParametroValor item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.AplicacionParametroValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.AplicacionParametroValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="ParametroId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 AplicacionId,Int64 ParametroId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.AplicacionParametroValor item = new Entities.Tables.Seguridad.AplicacionParametroValor();
                 item.Id = Id;
                 item.AplicacionId = AplicacionId;
                 item.ParametroId = ParametroId;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AplicacionParametroValor
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Funcion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					TipoId,
					Nombre,
					Descripcion,
					Referencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.Funcion> _cacheItemList = new List<Entities.Relations.Seguridad.Funcion>();
			   protected List<Entities.Relations.Seguridad.Funcion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Funcion() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.Funcion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.Funcion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Funcion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.TipoFuncion TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Referencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.Funcion</returns>
			public Entities.Relations.Seguridad.Funcion Add(DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,DefaultNamespace.Entities.Relations.Seguridad.TipoFuncion TipoId,String Nombre,String Descripcion,String Referencia,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.Funcion)base.Add(new Entities.Relations.Seguridad.Funcion(AplicacionId,TipoId,Nombre,Descripcion,Referencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.Funcion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.Funcion>().ToList<Entities.Relations.Seguridad.Funcion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.Funcion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Funcion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Referencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Funcion> Items(Int64? Id,Int64? AplicacionId,Int64? TipoId,String Nombre,String Descripcion,String Referencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Referencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Referencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Referencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Referencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Referencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.Funcion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.Funcion Add(Entities.Relations.Seguridad.Funcion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.Funcion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.Funcion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.Funcion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.Funcion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Referencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 AplicacionId,Int64 TipoId,String Nombre,String Descripcion,String Referencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.Funcion item = new Entities.Tables.Seguridad.Funcion();
                 item.Id = Id;
                 item.AplicacionId = AplicacionId;
                 item.TipoId = TipoId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Referencia = Referencia;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Funcion
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class IdentificadorUsuario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					UsuarioId,
					Valor,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.IdentificadorUsuario> _cacheItemList = new List<Entities.Relations.Seguridad.IdentificadorUsuario>();
			   protected List<Entities.Relations.Seguridad.IdentificadorUsuario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public IdentificadorUsuario() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.IdentificadorUsuario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.IdentificadorUsuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// IdentificadorUsuario Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.TipoIdentificador TipoId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.IdentificadorUsuario</returns>
			public Entities.Relations.Seguridad.IdentificadorUsuario Add(DefaultNamespace.Entities.Relations.Seguridad.TipoIdentificador TipoId,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId,String Valor,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.IdentificadorUsuario)base.Add(new Entities.Relations.Seguridad.IdentificadorUsuario(TipoId,UsuarioId,Valor,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.IdentificadorUsuario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.IdentificadorUsuario>().ToList<Entities.Relations.Seguridad.IdentificadorUsuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.IdentificadorUsuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.IdentificadorUsuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.IdentificadorUsuario> Items(Int64? Id,Int64? TipoId,Int64? UsuarioId,String Valor,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.IdentificadorUsuario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.IdentificadorUsuario Add(Entities.Relations.Seguridad.IdentificadorUsuario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.IdentificadorUsuario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.IdentificadorUsuario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.IdentificadorUsuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.IdentificadorUsuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,Int64 UsuarioId,String Valor,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.IdentificadorUsuario item = new Entities.Tables.Seguridad.IdentificadorUsuario();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.UsuarioId = UsuarioId;
                 item.Valor = Valor;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class IdentificadorUsuario
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Menu : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					TipoId,
					Nombre,
					Descripcion,
					FuncionId,
					Imagen,
					DependeDe,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.Menu> _cacheItemList = new List<Entities.Relations.Seguridad.Menu>();
			   protected List<Entities.Relations.Seguridad.Menu> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Menu() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.Menu();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.Menu item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Menu Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.TipoMenu TipoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Funcion FuncionId'></param>
         /// <param name='Imagen'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Menu DependeDe'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.Menu</returns>
			public Entities.Relations.Seguridad.Menu Add(DefaultNamespace.Entities.Relations.Seguridad.TipoMenu TipoId,String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Seguridad.Funcion FuncionId,String Imagen,DefaultNamespace.Entities.Relations.Seguridad.Menu DependeDe,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.Menu)base.Add(new Entities.Relations.Seguridad.Menu(TipoId,Nombre,Descripcion,FuncionId,Imagen,DependeDe,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.Menu> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.Menu>().ToList<Entities.Relations.Seguridad.Menu>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.Menu items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Menu> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Imagen"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Menu> Items(Int64? Id,Int64? TipoId,String Nombre,String Descripcion,Int64? FuncionId,String Imagen,Int64? DependeDe,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (TipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (DependeDe != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DependeDe, DefaultNamespace.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DependeDe, DefaultNamespace.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.Menu> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.Menu Add(Entities.Relations.Seguridad.Menu item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.Menu)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.Menu item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.Menu item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.Menu with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="TipoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="FuncionId"></param>
            /// <param name="Imagen"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 TipoId,String Nombre,String Descripcion,Int64 FuncionId,String Imagen,Int64 DependeDe,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.Menu item = new Entities.Tables.Seguridad.Menu();
                 item.Id = Id;
                 item.TipoId = TipoId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.FuncionId = FuncionId;
                 item.Imagen = Imagen;
                 item.DependeDe = DependeDe;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Menu
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Rol : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					AplicacionId,
					Nombre,
					Descripcion,
					DependeDe,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.Rol> _cacheItemList = new List<Entities.Relations.Seguridad.Rol>();
			   protected List<Entities.Relations.Seguridad.Rol> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Rol() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.Rol();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.Rol item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Rol Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Rol DependeDe'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.Rol</returns>
			public Entities.Relations.Seguridad.Rol Add(DefaultNamespace.Entities.Relations.Seguridad.Aplicacion AplicacionId,String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Seguridad.Rol DependeDe,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.Rol)base.Add(new Entities.Relations.Seguridad.Rol(AplicacionId,Nombre,Descripcion,DependeDe,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.Rol> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.Rol>().ToList<Entities.Relations.Seguridad.Rol>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.Rol items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Rol> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Rol> Items(Int64? Id,Int64? AplicacionId,String Nombre,String Descripcion,Int64? DependeDe,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (AplicacionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.AplicacionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, AplicacionId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (DependeDe != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DependeDe, DefaultNamespace.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DependeDe, DefaultNamespace.sqlEnum.OperandEnum.Equal, DependeDe);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.Rol> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.Rol Add(Entities.Relations.Seguridad.Rol item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.Rol)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.Rol item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.Rol item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.Rol with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="AplicacionId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="DependeDe"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 AplicacionId,String Nombre,String Descripcion,Int64 DependeDe,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.Rol item = new Entities.Tables.Seguridad.Rol();
                 item.Id = Id;
                 item.AplicacionId = AplicacionId;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.DependeDe = DependeDe;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Rol
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RolFuncion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					FuncionId,
					RolId,
					Descripcion,
					PuedeAgregar,
					PuedeModificar,
					PuedeEliminar,
					PuedeVisualizar,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.RolFuncion> _cacheItemList = new List<Entities.Relations.Seguridad.RolFuncion>();
			   protected List<Entities.Relations.Seguridad.RolFuncion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public RolFuncion() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.RolFuncion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.RolFuncion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RolFuncion Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Funcion FuncionId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Rol RolId'></param>
         /// <param name='Descripcion'></param>
         /// <param name='PuedeAgregar'></param>
         /// <param name='PuedeModificar'></param>
         /// <param name='PuedeEliminar'></param>
         /// <param name='PuedeVisualizar'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.RolFuncion</returns>
			public Entities.Relations.Seguridad.RolFuncion Add(DefaultNamespace.Entities.Relations.Seguridad.Funcion FuncionId,DefaultNamespace.Entities.Relations.Seguridad.Rol RolId,String Descripcion,Boolean PuedeAgregar,Boolean PuedeModificar,Boolean PuedeEliminar,Boolean PuedeVisualizar,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.RolFuncion)base.Add(new Entities.Relations.Seguridad.RolFuncion(FuncionId,RolId,Descripcion,PuedeAgregar,PuedeModificar,PuedeEliminar,PuedeVisualizar,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.RolFuncion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.RolFuncion>().ToList<Entities.Relations.Seguridad.RolFuncion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.RolFuncion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.RolFuncion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="FuncionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PuedeAgregar"></param>
            /// <param name="PuedeModificar"></param>
            /// <param name="PuedeEliminar"></param>
            /// <param name="PuedeVisualizar"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.RolFuncion> Items(Int64? Id,Int64? FuncionId,Int64? RolId,String Descripcion,Boolean? PuedeAgregar,Boolean? PuedeModificar,Boolean? PuedeEliminar,Boolean? PuedeVisualizar,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (FuncionId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FuncionId, DefaultNamespace.sqlEnum.OperandEnum.Equal, FuncionId);
                    }
                   
                }
                if (RolId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RolId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RolId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RolId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RolId);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PuedeAgregar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeAgregar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeAgregar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PuedeAgregar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeAgregar);
                    }
                   
                }
                if (PuedeModificar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeModificar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeModificar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PuedeModificar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeModificar);
                    }
                   
                }
                if (PuedeEliminar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeEliminar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeEliminar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PuedeEliminar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeEliminar);
                    }
                   
                }
                if (PuedeVisualizar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PuedeVisualizar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeVisualizar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PuedeVisualizar, DefaultNamespace.sqlEnum.OperandEnum.Equal, PuedeVisualizar);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.RolFuncion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.RolFuncion Add(Entities.Relations.Seguridad.RolFuncion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.RolFuncion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.RolFuncion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.RolFuncion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.RolFuncion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="FuncionId"></param>
            /// <param name="RolId"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PuedeAgregar"></param>
            /// <param name="PuedeModificar"></param>
            /// <param name="PuedeEliminar"></param>
            /// <param name="PuedeVisualizar"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 FuncionId,Int64 RolId,String Descripcion,Boolean PuedeAgregar,Boolean PuedeModificar,Boolean PuedeEliminar,Boolean PuedeVisualizar,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.RolFuncion item = new Entities.Tables.Seguridad.RolFuncion();
                 item.Id = Id;
                 item.FuncionId = FuncionId;
                 item.RolId = RolId;
                 item.Descripcion = Descripcion;
                 item.PuedeAgregar = PuedeAgregar;
                 item.PuedeModificar = PuedeModificar;
                 item.PuedeEliminar = PuedeEliminar;
                 item.PuedeVisualizar = PuedeVisualizar;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RolFuncion
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoAplicacion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.TipoAplicacion> _cacheItemList = new List<Entities.Relations.Seguridad.TipoAplicacion>();
			   protected List<Entities.Relations.Seguridad.TipoAplicacion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoAplicacion() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.TipoAplicacion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.TipoAplicacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoAplicacion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.TipoAplicacion</returns>
			public Entities.Relations.Seguridad.TipoAplicacion Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.TipoAplicacion)base.Add(new Entities.Relations.Seguridad.TipoAplicacion(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.TipoAplicacion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.TipoAplicacion>().ToList<Entities.Relations.Seguridad.TipoAplicacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.TipoAplicacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoAplicacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoAplicacion> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.TipoAplicacion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.TipoAplicacion Add(Entities.Relations.Seguridad.TipoAplicacion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.TipoAplicacion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.TipoAplicacion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.TipoAplicacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.TipoAplicacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.TipoAplicacion item = new Entities.Tables.Seguridad.TipoAplicacion();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoAplicacion
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoFuncion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.TipoFuncion> _cacheItemList = new List<Entities.Relations.Seguridad.TipoFuncion>();
			   protected List<Entities.Relations.Seguridad.TipoFuncion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoFuncion() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.TipoFuncion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.TipoFuncion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoFuncion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.TipoFuncion</returns>
			public Entities.Relations.Seguridad.TipoFuncion Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.TipoFuncion)base.Add(new Entities.Relations.Seguridad.TipoFuncion(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.TipoFuncion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.TipoFuncion>().ToList<Entities.Relations.Seguridad.TipoFuncion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.TipoFuncion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoFuncion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoFuncion> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.TipoFuncion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.TipoFuncion Add(Entities.Relations.Seguridad.TipoFuncion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.TipoFuncion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.TipoFuncion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.TipoFuncion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.TipoFuncion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.TipoFuncion item = new Entities.Tables.Seguridad.TipoFuncion();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoFuncion
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoIdentificador : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Mascara,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.TipoIdentificador> _cacheItemList = new List<Entities.Relations.Seguridad.TipoIdentificador>();
			   protected List<Entities.Relations.Seguridad.TipoIdentificador> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoIdentificador() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.TipoIdentificador();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.TipoIdentificador item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoIdentificador Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Mascara'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.TipoIdentificador</returns>
			public Entities.Relations.Seguridad.TipoIdentificador Add(String Nombre,String Descripcion,String Mascara,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.TipoIdentificador)base.Add(new Entities.Relations.Seguridad.TipoIdentificador(Nombre,Descripcion,Mascara,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.TipoIdentificador> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.TipoIdentificador>().ToList<Entities.Relations.Seguridad.TipoIdentificador>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.TipoIdentificador items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoIdentificador> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Mascara"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoIdentificador> Items(Int64? Id,String Nombre,String Descripcion,String Mascara,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Mascara != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mascara, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mascara);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Mascara, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mascara);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.TipoIdentificador> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.TipoIdentificador Add(Entities.Relations.Seguridad.TipoIdentificador item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.TipoIdentificador)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.TipoIdentificador item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.TipoIdentificador item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.TipoIdentificador with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Mascara"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Mascara,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.TipoIdentificador item = new Entities.Tables.Seguridad.TipoIdentificador();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Mascara = Mascara;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoIdentificador
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class TipoMenu : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.TipoMenu> _cacheItemList = new List<Entities.Relations.Seguridad.TipoMenu>();
			   protected List<Entities.Relations.Seguridad.TipoMenu> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public TipoMenu() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.TipoMenu();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.TipoMenu item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// TipoMenu Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.TipoMenu</returns>
			public Entities.Relations.Seguridad.TipoMenu Add(String Nombre,String Descripcion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.TipoMenu)base.Add(new Entities.Relations.Seguridad.TipoMenu(Nombre,Descripcion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.TipoMenu> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.TipoMenu>().ToList<Entities.Relations.Seguridad.TipoMenu>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.TipoMenu items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoMenu> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.TipoMenu> Items(Int64? Id,String Nombre,String Descripcion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.TipoMenu> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.TipoMenu Add(Entities.Relations.Seguridad.TipoMenu item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.TipoMenu)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.TipoMenu item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.TipoMenu item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.TipoMenu with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.TipoMenu item = new Entities.Tables.Seguridad.TipoMenu();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class TipoMenu
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Usuario : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EmpresaId,
					LenguajeId,
					PerfilId,
					Nombre,
					Apellido,
					NombreApellido,
					Documento,
					Legajo,
					Mail,
					FechaIngreso,
					NickName,
					Password,
					Token,
					Avatar,
					FechaUltimoLogin,
					DebeCambiarPassword,
					Habilitado,
					CantidadLogueosIncorrectos,
					Bloqueado,
					FechaExpiracion,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.Usuario> _cacheItemList = new List<Entities.Relations.Seguridad.Usuario>();
			   protected List<Entities.Relations.Seguridad.Usuario> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Usuario() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.Usuario();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.Usuario item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Usuario Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Visualizacion.Perfil PerfilId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Apellido'></param>
         /// <param name='NombreApellido'></param>
         /// <param name='Documento'></param>
         /// <param name='Legajo'></param>
         /// <param name='Mail'></param>
         /// <param name='FechaIngreso'></param>
         /// <param name='NickName'></param>
         /// <param name='Password'></param>
         /// <param name='Token'></param>
         /// <param name='Avatar'></param>
         /// <param name='FechaUltimoLogin'></param>
         /// <param name='DebeCambiarPassword'></param>
         /// <param name='Habilitado'></param>
         /// <param name='CantidadLogueosIncorrectos'></param>
         /// <param name='Bloqueado'></param>
         /// <param name='FechaExpiracion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.Usuario</returns>
			public Entities.Relations.Seguridad.Usuario Add(DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,DefaultNamespace.Entities.Relations.Regionalizacion.Lenguaje LenguajeId,DefaultNamespace.Entities.Relations.Visualizacion.Perfil PerfilId,String Nombre,String Apellido,String NombreApellido,String Documento,String Legajo,String Mail,DateTime FechaIngreso,String NickName,String Password,String Token,String Avatar,DateTime FechaUltimoLogin,Boolean DebeCambiarPassword,Boolean Habilitado,Int32 CantidadLogueosIncorrectos,Boolean Bloqueado,DateTime FechaExpiracion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.Usuario)base.Add(new Entities.Relations.Seguridad.Usuario(EmpresaId,LenguajeId,PerfilId,Nombre,Apellido,NombreApellido,Documento,Legajo,Mail,FechaIngreso,NickName,Password,Token,Avatar,FechaUltimoLogin,DebeCambiarPassword,Habilitado,CantidadLogueosIncorrectos,Bloqueado,FechaExpiracion,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.Usuario> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.Usuario>().ToList<Entities.Relations.Seguridad.Usuario>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.Usuario items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Usuario> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="PerfilId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Apellido"></param>
            /// <param name="NombreApellido"></param>
            /// <param name="Documento"></param>
            /// <param name="Legajo"></param>
            /// <param name="Mail"></param>
            /// <param name="FechaIngreso"></param>
            /// <param name="NickName"></param>
            /// <param name="Password"></param>
            /// <param name="Token"></param>
            /// <param name="Avatar"></param>
            /// <param name="FechaUltimoLogin"></param>
            /// <param name="DebeCambiarPassword"></param>
            /// <param name="Habilitado"></param>
            /// <param name="CantidadLogueosIncorrectos"></param>
            /// <param name="Bloqueado"></param>
            /// <param name="FechaExpiracion"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.Usuario> Items(Int64? Id,Int64? EmpresaId,Int64? LenguajeId,Int64? PerfilId,String Nombre,String Apellido,String NombreApellido,String Documento,String Legajo,String Mail,DateTime? FechaIngreso,String NickName,String Password,String Token,String Avatar,DateTime? FechaUltimoLogin,Boolean? DebeCambiarPassword,Boolean? Habilitado,Int32? CantidadLogueosIncorrectos,Boolean? Bloqueado,DateTime? FechaExpiracion,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (LenguajeId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.LenguajeId, DefaultNamespace.sqlEnum.OperandEnum.Equal, LenguajeId);
                    }
                   
                }
                if (PerfilId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PerfilId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Apellido != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Apellido, DefaultNamespace.sqlEnum.OperandEnum.Equal, Apellido);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Apellido, DefaultNamespace.sqlEnum.OperandEnum.Equal, Apellido);
                    }
                   
                }
                if (NombreApellido != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NombreApellido, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreApellido);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NombreApellido, DefaultNamespace.sqlEnum.OperandEnum.Equal, NombreApellido);
                    }
                   
                }
                if (Documento != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Documento, DefaultNamespace.sqlEnum.OperandEnum.Equal, Documento);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Documento, DefaultNamespace.sqlEnum.OperandEnum.Equal, Documento);
                    }
                   
                }
                if (Legajo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Legajo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Legajo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Legajo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Legajo);
                    }
                   
                }
                if (Mail != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Mail, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mail);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Mail, DefaultNamespace.sqlEnum.OperandEnum.Equal, Mail);
                    }
                   
                }
                if (FechaIngreso != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaIngreso, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaIngreso);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaIngreso, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaIngreso);
                    }
                   
                }
                if (NickName != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.NickName, DefaultNamespace.sqlEnum.OperandEnum.Equal, NickName);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.NickName, DefaultNamespace.sqlEnum.OperandEnum.Equal, NickName);
                    }
                   
                }
                if (Password != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Password, DefaultNamespace.sqlEnum.OperandEnum.Equal, Password);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Password, DefaultNamespace.sqlEnum.OperandEnum.Equal, Password);
                    }
                   
                }
                if (Token != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Token, DefaultNamespace.sqlEnum.OperandEnum.Equal, Token);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Token, DefaultNamespace.sqlEnum.OperandEnum.Equal, Token);
                    }
                   
                }
                if (Avatar != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Avatar, DefaultNamespace.sqlEnum.OperandEnum.Equal, Avatar);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Avatar, DefaultNamespace.sqlEnum.OperandEnum.Equal, Avatar);
                    }
                   
                }
                if (FechaUltimoLogin != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaUltimoLogin, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaUltimoLogin);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaUltimoLogin, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaUltimoLogin);
                    }
                   
                }
                if (DebeCambiarPassword != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DebeCambiarPassword, DefaultNamespace.sqlEnum.OperandEnum.Equal, DebeCambiarPassword);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DebeCambiarPassword, DefaultNamespace.sqlEnum.OperandEnum.Equal, DebeCambiarPassword);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (CantidadLogueosIncorrectos != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CantidadLogueosIncorrectos, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadLogueosIncorrectos);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CantidadLogueosIncorrectos, DefaultNamespace.sqlEnum.OperandEnum.Equal, CantidadLogueosIncorrectos);
                    }
                   
                }
                if (Bloqueado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Bloqueado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Bloqueado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Bloqueado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Bloqueado);
                    }
                   
                }
                if (FechaExpiracion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaExpiracion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaExpiracion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaExpiracion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaExpiracion);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.Usuario> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.Usuario Add(Entities.Relations.Seguridad.Usuario item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.Usuario)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.Usuario item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.Usuario item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.Usuario with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="LenguajeId"></param>
            /// <param name="PerfilId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Apellido"></param>
            /// <param name="NombreApellido"></param>
            /// <param name="Documento"></param>
            /// <param name="Legajo"></param>
            /// <param name="Mail"></param>
            /// <param name="FechaIngreso"></param>
            /// <param name="NickName"></param>
            /// <param name="Password"></param>
            /// <param name="Token"></param>
            /// <param name="Avatar"></param>
            /// <param name="FechaUltimoLogin"></param>
            /// <param name="DebeCambiarPassword"></param>
            /// <param name="Habilitado"></param>
            /// <param name="CantidadLogueosIncorrectos"></param>
            /// <param name="Bloqueado"></param>
            /// <param name="FechaExpiracion"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EmpresaId,Int64 LenguajeId,Int64 PerfilId,String Nombre,String Apellido,String NombreApellido,String Documento,String Legajo,String Mail,DateTime FechaIngreso,String NickName,String Password,String Token,String Avatar,DateTime FechaUltimoLogin,Boolean DebeCambiarPassword,Boolean Habilitado,Int32 CantidadLogueosIncorrectos,Boolean Bloqueado,DateTime FechaExpiracion,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.Usuario item = new Entities.Tables.Seguridad.Usuario();
                 item.Id = Id;
                 item.EmpresaId = EmpresaId;
                 item.LenguajeId = LenguajeId;
                 item.PerfilId = PerfilId;
                 item.Nombre = Nombre;
                 item.Apellido = Apellido;
                 item.NombreApellido = NombreApellido;
                 item.Documento = Documento;
                 item.Legajo = Legajo;
                 item.Mail = Mail;
                 item.FechaIngreso = FechaIngreso;
                 item.NickName = NickName;
                 item.Password = Password;
                 item.Token = Token;
                 item.Avatar = Avatar;
                 item.FechaUltimoLogin = FechaUltimoLogin;
                 item.DebeCambiarPassword = DebeCambiarPassword;
                 item.Habilitado = Habilitado;
                 item.CantidadLogueosIncorrectos = CantidadLogueosIncorrectos;
                 item.Bloqueado = Bloqueado;
                 item.FechaExpiracion = FechaExpiracion;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Usuario
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioRol : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					RolId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.UsuarioRol> _cacheItemList = new List<Entities.Relations.Seguridad.UsuarioRol>();
			   protected List<Entities.Relations.Seguridad.UsuarioRol> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public UsuarioRol() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.UsuarioRol();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.UsuarioRol item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioRol Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Rol RolId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.UsuarioRol</returns>
			public Entities.Relations.Seguridad.UsuarioRol Add(DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId,DefaultNamespace.Entities.Relations.Seguridad.Rol RolId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.UsuarioRol)base.Add(new Entities.Relations.Seguridad.UsuarioRol(UsuarioId,RolId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.UsuarioRol> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.UsuarioRol>().ToList<Entities.Relations.Seguridad.UsuarioRol>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.UsuarioRol items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.UsuarioRol> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="RolId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.UsuarioRol> Items(Int64? Id,Int64? UsuarioId,Int64? RolId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (RolId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.RolId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RolId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.RolId, DefaultNamespace.sqlEnum.OperandEnum.Equal, RolId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.UsuarioRol> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.UsuarioRol Add(Entities.Relations.Seguridad.UsuarioRol item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.UsuarioRol)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.UsuarioRol item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.UsuarioRol item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.UsuarioRol with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="RolId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 UsuarioId,Int64 RolId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.UsuarioRol item = new Entities.Tables.Seguridad.UsuarioRol();
                 item.Id = Id;
                 item.UsuarioId = UsuarioId;
                 item.RolId = RolId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioRol
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Seguridad {
	    /// <summary>
	    /// 
	    /// </summary>
		public class UsuarioSector : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					UsuarioId,
					SectorId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Seguridad.UsuarioSector> _cacheItemList = new List<Entities.Relations.Seguridad.UsuarioSector>();
			   protected List<Entities.Relations.Seguridad.UsuarioSector> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public UsuarioSector() : base()
            {
                base._dataItem = new Entities.Relations.Seguridad.UsuarioSector();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Seguridad.UsuarioSector item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// UsuarioSector Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sector SectorId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Seguridad.UsuarioSector</returns>
			public Entities.Relations.Seguridad.UsuarioSector Add(DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioId,DefaultNamespace.Entities.Relations.Directorio.Sector SectorId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Seguridad.UsuarioSector)base.Add(new Entities.Relations.Seguridad.UsuarioSector(UsuarioId,SectorId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Seguridad.UsuarioSector> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Seguridad.UsuarioSector>().ToList<Entities.Relations.Seguridad.UsuarioSector>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Seguridad.UsuarioSector items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.UsuarioSector> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Seguridad.UsuarioSector> Items(Int64? Id,Int64? UsuarioId,Int64? SectorId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (UsuarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioId);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Seguridad.UsuarioSector> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Seguridad.UsuarioSector Add(Entities.Relations.Seguridad.UsuarioSector item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Seguridad.UsuarioSector)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Seguridad.UsuarioSector item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Seguridad.UsuarioSector item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Seguridad.UsuarioSector with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="UsuarioId"></param>
            /// <param name="SectorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 UsuarioId,Int64 SectorId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Seguridad.UsuarioSector item = new Entities.Tables.Seguridad.UsuarioSector();
                 item.Id = Id;
                 item.UsuarioId = UsuarioId;
                 item.SectorId = SectorId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class UsuarioSector
	} //namespace DefaultNamespace.Business.Relations.Seguridad
	namespace DefaultNamespace.Business.Relations.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Configuracion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadId,
					Segundos,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Sincronizacion.Configuracion> _cacheItemList = new List<Entities.Relations.Sincronizacion.Configuracion>();
			   protected List<Entities.Relations.Sincronizacion.Configuracion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Configuracion() : base()
            {
                base._dataItem = new Entities.Relations.Sincronizacion.Configuracion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Sincronizacion.Configuracion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Configuracion Add Method
         /// </summary>
         /// <param name='EntidadId'></param>
         /// <param name='Segundos'></param>
         /// <param name='Habilitado'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Sincronizacion.Configuracion</returns>
			public Entities.Relations.Sincronizacion.Configuracion Add(Int64 EntidadId,Int64 Segundos,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Sincronizacion.Configuracion)base.Add(new Entities.Relations.Sincronizacion.Configuracion(EntidadId,Segundos,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Sincronizacion.Configuracion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Sincronizacion.Configuracion>().ToList<Entities.Relations.Sincronizacion.Configuracion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Sincronizacion.Configuracion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.Configuracion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Segundos"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.Configuracion> Items(Int64? Id,Int64? EntidadId,Int64? Segundos,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                   
                }
                if (Segundos != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Segundos, DefaultNamespace.sqlEnum.OperandEnum.Equal, Segundos);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Segundos, DefaultNamespace.sqlEnum.OperandEnum.Equal, Segundos);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Sincronizacion.Configuracion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Sincronizacion.Configuracion Add(Entities.Relations.Sincronizacion.Configuracion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Sincronizacion.Configuracion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Sincronizacion.Configuracion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Sincronizacion.Configuracion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Sincronizacion.Configuracion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="Segundos"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EntidadId,Int64 Segundos,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Sincronizacion.Configuracion item = new Entities.Tables.Sincronizacion.Configuracion();
                 item.Id = Id;
                 item.EntidadId = EntidadId;
                 item.Segundos = Segundos;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Configuracion
	} //namespace DefaultNamespace.Business.Relations.Sincronizacion
	namespace DefaultNamespace.Business.Relations.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Entidad : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
			   protected List<Entities.Relations.Sincronizacion.Entidad> _cacheItemList = new List<Entities.Relations.Sincronizacion.Entidad>();
			   protected List<Entities.Relations.Sincronizacion.Entidad> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Entidad() : base()
            {
                base._dataItem = new Entities.Relations.Sincronizacion.Entidad();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Sincronizacion.Entidad item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Entidad Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Relations.Sincronizacion.Entidad</returns>
			public Entities.Relations.Sincronizacion.Entidad Add(String Nombre,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Relations.Sincronizacion.Entidad)base.Add(new Entities.Relations.Sincronizacion.Entidad(Nombre,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Relations.Sincronizacion.Entidad> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Sincronizacion.Entidad>().ToList<Entities.Relations.Sincronizacion.Entidad>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Sincronizacion.Entidad items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.Entidad> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.Entidad> Items(Int64? Id,String Nombre,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Sincronizacion.Entidad> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Sincronizacion.Entidad Add(Entities.Relations.Sincronizacion.Entidad item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Sincronizacion.Entidad)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Sincronizacion.Entidad item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Sincronizacion.Entidad item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Sincronizacion.Entidad with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado)
            {
                 Entities.Tables.Sincronizacion.Entidad item = new Entities.Tables.Sincronizacion.Entidad();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;
                 item.Habilitado = Habilitado;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Entidad
	} //namespace DefaultNamespace.Business.Relations.Sincronizacion
	namespace DefaultNamespace.Business.Relations.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EntidadCabecera : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadId,
					DepositarioId,
					Valor,
					Fechainicio,
					Fechafin
				}
			   protected List<Entities.Relations.Sincronizacion.EntidadCabecera> _cacheItemList = new List<Entities.Relations.Sincronizacion.EntidadCabecera>();
			   protected List<Entities.Relations.Sincronizacion.EntidadCabecera> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EntidadCabecera() : base()
            {
                base._dataItem = new Entities.Relations.Sincronizacion.EntidadCabecera();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Sincronizacion.EntidadCabecera item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EntidadCabecera Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Customizador.Entidad EntidadId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId'></param>
         /// <param name='Valor'></param>
         /// <param name='Fechainicio'></param>
         /// <param name='Fechafin'></param>
         /// <returns>Entities.Relations.Sincronizacion.EntidadCabecera</returns>
			public Entities.Relations.Sincronizacion.EntidadCabecera Add(DefaultNamespace.Entities.Relations.Customizador.Entidad EntidadId,DefaultNamespace.Entities.Relations.Dispositivo.Depositario DepositarioId,String Valor,DateTime Fechainicio,DateTime Fechafin) 
			{
			  return (Entities.Relations.Sincronizacion.EntidadCabecera)base.Add(new Entities.Relations.Sincronizacion.EntidadCabecera(EntidadId,DepositarioId,Valor,Fechainicio,Fechafin));
			}
            public new List<Entities.Relations.Sincronizacion.EntidadCabecera> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Sincronizacion.EntidadCabecera>().ToList<Entities.Relations.Sincronizacion.EntidadCabecera>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Sincronizacion.EntidadCabecera items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.EntidadCabecera> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Fechainicio"></param>
            /// <param name="Fechafin"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.EntidadCabecera> Items(Int64? Id,Int64? EntidadId,Int64? DepositarioId,String Valor,DateTime? Fechainicio,DateTime? Fechafin)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EntidadId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadId);
                    }
                   
                }
                if (DepositarioId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DepositarioId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DepositarioId);
                    }
                   
                }
                if (Valor != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Valor, DefaultNamespace.sqlEnum.OperandEnum.Equal, Valor);
                    }
                   
                }
                if (Fechainicio != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fechainicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fechainicio);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fechainicio, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fechainicio);
                    }
                   
                }
                if (Fechafin != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fechafin, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fechafin);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fechafin, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fechafin);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Sincronizacion.EntidadCabecera> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Sincronizacion.EntidadCabecera Add(Entities.Relations.Sincronizacion.EntidadCabecera item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Sincronizacion.EntidadCabecera)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Sincronizacion.EntidadCabecera item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Sincronizacion.EntidadCabecera item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Sincronizacion.EntidadCabecera with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadId"></param>
            /// <param name="DepositarioId"></param>
            /// <param name="Valor"></param>
            /// <param name="Fechainicio"></param>
            /// <param name="Fechafin"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EntidadId,Int64 DepositarioId,String Valor,DateTime Fechainicio,DateTime Fechafin)
            {
                 Entities.Tables.Sincronizacion.EntidadCabecera item = new Entities.Tables.Sincronizacion.EntidadCabecera();
                 item.Id = Id;
                 item.EntidadId = EntidadId;
                 item.DepositarioId = DepositarioId;
                 item.Valor = Valor;
                 item.Fechainicio = Fechainicio;
                 item.Fechafin = Fechafin;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EntidadCabecera
	} //namespace DefaultNamespace.Business.Relations.Sincronizacion
	namespace DefaultNamespace.Business.Relations.Sincronizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EntidadDetalle : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EntidadCabeceraId,
					FechaCreacion,
					OrigenId,
					DestinoId
				}
			   protected List<Entities.Relations.Sincronizacion.EntidadDetalle> _cacheItemList = new List<Entities.Relations.Sincronizacion.EntidadDetalle>();
			   protected List<Entities.Relations.Sincronizacion.EntidadDetalle> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EntidadDetalle() : base()
            {
                base._dataItem = new Entities.Relations.Sincronizacion.EntidadDetalle();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Sincronizacion.EntidadDetalle item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EntidadDetalle Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Sincronizacion.EntidadCabecera EntidadCabeceraId'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='OrigenId'></param>
         /// <param name='DestinoId'></param>
         /// <returns>Entities.Relations.Sincronizacion.EntidadDetalle</returns>
			public Entities.Relations.Sincronizacion.EntidadDetalle Add(DefaultNamespace.Entities.Relations.Sincronizacion.EntidadCabecera EntidadCabeceraId,DateTime FechaCreacion,Int64 OrigenId,Int64 DestinoId) 
			{
			  return (Entities.Relations.Sincronizacion.EntidadDetalle)base.Add(new Entities.Relations.Sincronizacion.EntidadDetalle(EntidadCabeceraId,FechaCreacion,OrigenId,DestinoId));
			}
            public new List<Entities.Relations.Sincronizacion.EntidadDetalle> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Sincronizacion.EntidadDetalle>().ToList<Entities.Relations.Sincronizacion.EntidadDetalle>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Sincronizacion.EntidadDetalle items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.EntidadDetalle> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadCabeceraId"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="OrigenId"></param>
            /// <param name="DestinoId"></param>
            /// <returns></returns>
            public List<Entities.Relations.Sincronizacion.EntidadDetalle> Items(Int64? Id,Int64? EntidadCabeceraId,DateTime? FechaCreacion,Int64? OrigenId,Int64? DestinoId)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EntidadCabeceraId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EntidadCabeceraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadCabeceraId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EntidadCabeceraId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EntidadCabeceraId);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (OrigenId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.OrigenId, DefaultNamespace.sqlEnum.OperandEnum.Equal, OrigenId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.OrigenId, DefaultNamespace.sqlEnum.OperandEnum.Equal, OrigenId);
                    }
                   
                }
                if (DestinoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.DestinoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DestinoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.DestinoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, DestinoId);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Sincronizacion.EntidadDetalle> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Sincronizacion.EntidadDetalle Add(Entities.Relations.Sincronizacion.EntidadDetalle item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Sincronizacion.EntidadDetalle)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Sincronizacion.EntidadDetalle item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Sincronizacion.EntidadDetalle item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Sincronizacion.EntidadDetalle with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EntidadCabeceraId"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="OrigenId"></param>
            /// <param name="DestinoId"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EntidadCabeceraId,DateTime FechaCreacion,Int64 OrigenId,Int64 DestinoId)
            {
                 Entities.Tables.Sincronizacion.EntidadDetalle item = new Entities.Tables.Sincronizacion.EntidadDetalle();
                 item.Id = Id;
                 item.EntidadCabeceraId = EntidadCabeceraId;
                 item.FechaCreacion = FechaCreacion;
                 item.OrigenId = OrigenId;
                 item.DestinoId = DestinoId;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EntidadDetalle
	} //namespace DefaultNamespace.Business.Relations.Sincronizacion
	namespace DefaultNamespace.Business.Relations.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class AgendaTurno : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					EsquemaDetalleTurnoId,
					Fecha,
					SectorId,
					Secuencia,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion,
					Habilitado
				}
			   protected List<Entities.Relations.Turno.AgendaTurno> _cacheItemList = new List<Entities.Relations.Turno.AgendaTurno>();
			   protected List<Entities.Relations.Turno.AgendaTurno> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public AgendaTurno() : base()
            {
                base._dataItem = new Entities.Relations.Turno.AgendaTurno();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Turno.AgendaTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// AgendaTurno Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Turno.EsquemaDetalleTurno EsquemaDetalleTurnoId'></param>
         /// <param name='Fecha'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Sector SectorId'></param>
         /// <param name='Secuencia'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <param name='Habilitado'></param>
         /// <returns>Entities.Relations.Turno.AgendaTurno</returns>
			public Entities.Relations.Turno.AgendaTurno Add(String Nombre,DefaultNamespace.Entities.Relations.Turno.EsquemaDetalleTurno EsquemaDetalleTurnoId,DateTime Fecha,DefaultNamespace.Entities.Relations.Directorio.Sector SectorId,Int32 Secuencia,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado) 
			{
			  return (Entities.Relations.Turno.AgendaTurno)base.Add(new Entities.Relations.Turno.AgendaTurno(Nombre,EsquemaDetalleTurnoId,Fecha,SectorId,Secuencia,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion,Habilitado));
			}
            public new List<Entities.Relations.Turno.AgendaTurno> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Turno.AgendaTurno>().ToList<Entities.Relations.Turno.AgendaTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Turno.AgendaTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.AgendaTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="EsquemaDetalleTurnoId"></param>
            /// <param name="Fecha"></param>
            /// <param name="SectorId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.AgendaTurno> Items(Int64? Id,String Nombre,Int64? EsquemaDetalleTurnoId,DateTime? Fecha,Int64? SectorId,Int32? Secuencia,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion,Boolean? Habilitado)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (EsquemaDetalleTurnoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaDetalleTurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaDetalleTurnoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsquemaDetalleTurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaDetalleTurnoId);
                    }
                   
                }
                if (Fecha != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Fecha, DefaultNamespace.sqlEnum.OperandEnum.Equal, Fecha);
                    }
                   
                }
                if (SectorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.SectorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, SectorId);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Turno.AgendaTurno> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Turno.AgendaTurno Add(Entities.Relations.Turno.AgendaTurno item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Turno.AgendaTurno)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Turno.AgendaTurno item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Turno.AgendaTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Turno.AgendaTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="EsquemaDetalleTurnoId"></param>
            /// <param name="Fecha"></param>
            /// <param name="SectorId"></param>
            /// <param name="Secuencia"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <param name="Habilitado"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Int64 EsquemaDetalleTurnoId,DateTime Fecha,Int64 SectorId,Int32 Secuencia,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion,Boolean Habilitado)
            {
                 Entities.Tables.Turno.AgendaTurno item = new Entities.Tables.Turno.AgendaTurno();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.EsquemaDetalleTurnoId = EsquemaDetalleTurnoId;
                 item.Fecha = Fecha;
                 item.SectorId = SectorId;
                 item.Secuencia = Secuencia;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;
                 item.Habilitado = Habilitado;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class AgendaTurno
	} //namespace DefaultNamespace.Business.Relations.Turno
	namespace DefaultNamespace.Business.Relations.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaDetalleTurno : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					EsquemaTurnoId,
					Nombre,
					Secuencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Turno.EsquemaDetalleTurno> _cacheItemList = new List<Entities.Relations.Turno.EsquemaDetalleTurno>();
			   protected List<Entities.Relations.Turno.EsquemaDetalleTurno> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EsquemaDetalleTurno() : base()
            {
                base._dataItem = new Entities.Relations.Turno.EsquemaDetalleTurno();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Turno.EsquemaDetalleTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaDetalleTurno Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Turno.EsquemaTurno EsquemaTurnoId'></param>
         /// <param name='Nombre'></param>
         /// <param name='Secuencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Turno.EsquemaDetalleTurno</returns>
			public Entities.Relations.Turno.EsquemaDetalleTurno Add(DefaultNamespace.Entities.Relations.Turno.EsquemaTurno EsquemaTurnoId,String Nombre,Int32 Secuencia,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Turno.EsquemaDetalleTurno)base.Add(new Entities.Relations.Turno.EsquemaDetalleTurno(EsquemaTurnoId,Nombre,Secuencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Turno.EsquemaDetalleTurno> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Turno.EsquemaDetalleTurno>().ToList<Entities.Relations.Turno.EsquemaDetalleTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Turno.EsquemaDetalleTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.EsquemaDetalleTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaTurnoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.EsquemaDetalleTurno> Items(Int64? Id,Int64? EsquemaTurnoId,String Nombre,Int32? Secuencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (EsquemaTurnoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsquemaTurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaTurnoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsquemaTurnoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsquemaTurnoId);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Secuencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Secuencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, Secuencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Turno.EsquemaDetalleTurno> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Turno.EsquemaDetalleTurno Add(Entities.Relations.Turno.EsquemaDetalleTurno item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Turno.EsquemaDetalleTurno)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Turno.EsquemaDetalleTurno item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Turno.EsquemaDetalleTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Turno.EsquemaDetalleTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="EsquemaTurnoId"></param>
            /// <param name="Nombre"></param>
            /// <param name="Secuencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 EsquemaTurnoId,String Nombre,Int32 Secuencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Turno.EsquemaDetalleTurno item = new Entities.Tables.Turno.EsquemaDetalleTurno();
                 item.Id = Id;
                 item.EsquemaTurnoId = EsquemaTurnoId;
                 item.Nombre = Nombre;
                 item.Secuencia = Secuencia;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaDetalleTurno
	} //namespace DefaultNamespace.Business.Relations.Turno
	namespace DefaultNamespace.Business.Relations.Turno {
	    /// <summary>
	    /// 
	    /// </summary>
		public class EsquemaTurno : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Turno.EsquemaTurno> _cacheItemList = new List<Entities.Relations.Turno.EsquemaTurno>();
			   protected List<Entities.Relations.Turno.EsquemaTurno> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public EsquemaTurno() : base()
            {
                base._dataItem = new Entities.Relations.Turno.EsquemaTurno();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Turno.EsquemaTurno item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// EsquemaTurno Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Turno.EsquemaTurno</returns>
			public Entities.Relations.Turno.EsquemaTurno Add(String Nombre,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Turno.EsquemaTurno)base.Add(new Entities.Relations.Turno.EsquemaTurno(Nombre,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Turno.EsquemaTurno> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Turno.EsquemaTurno>().ToList<Entities.Relations.Turno.EsquemaTurno>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Turno.EsquemaTurno items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.EsquemaTurno> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Turno.EsquemaTurno> Items(Int64? Id,String Nombre,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Turno.EsquemaTurno> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Turno.EsquemaTurno Add(Entities.Relations.Turno.EsquemaTurno item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Turno.EsquemaTurno)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Turno.EsquemaTurno item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Turno.EsquemaTurno item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Turno.EsquemaTurno with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Turno.EsquemaTurno item = new Entities.Tables.Turno.EsquemaTurno();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class EsquemaTurno
	} //namespace DefaultNamespace.Business.Relations.Turno
	namespace DefaultNamespace.Business.Relations.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Denominacion : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					TipoValorId,
					MonedaId,
					Unidades,
					Imagen,
					CodigoCcTalk,
					Posicion,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Valor.Denominacion> _cacheItemList = new List<Entities.Relations.Valor.Denominacion>();
			   protected List<Entities.Relations.Valor.Denominacion> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Denominacion() : base()
            {
                base._dataItem = new Entities.Relations.Valor.Denominacion();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Valor.Denominacion item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Denominacion Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Tipo TipoValorId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='Unidades'></param>
         /// <param name='Imagen'></param>
         /// <param name='CodigoCcTalk'></param>
         /// <param name='Posicion'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Valor.Denominacion</returns>
			public Entities.Relations.Valor.Denominacion Add(String Nombre,DefaultNamespace.Entities.Relations.Valor.Tipo TipoValorId,DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,Decimal Unidades,String Imagen,String CodigoCcTalk,Int32 Posicion,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Valor.Denominacion)base.Add(new Entities.Relations.Valor.Denominacion(Nombre,TipoValorId,MonedaId,Unidades,Imagen,CodigoCcTalk,Posicion,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Valor.Denominacion> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Valor.Denominacion>().ToList<Entities.Relations.Valor.Denominacion>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Valor.Denominacion items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Denominacion> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Unidades"></param>
            /// <param name="Imagen"></param>
            /// <param name="CodigoCcTalk"></param>
            /// <param name="Posicion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Denominacion> Items(Int64? Id,String Nombre,Int64? TipoValorId,Int64? MonedaId,Decimal? Unidades,String Imagen,String CodigoCcTalk,Int32? Posicion,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (TipoValorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (Unidades != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Unidades, DefaultNamespace.sqlEnum.OperandEnum.Equal, Unidades);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Unidades, DefaultNamespace.sqlEnum.OperandEnum.Equal, Unidades);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (CodigoCcTalk != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.CodigoCcTalk, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoCcTalk);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.CodigoCcTalk, DefaultNamespace.sqlEnum.OperandEnum.Equal, CodigoCcTalk);
                    }
                   
                }
                if (Posicion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Posicion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Posicion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Posicion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Posicion);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Valor.Denominacion> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Valor.Denominacion Add(Entities.Relations.Valor.Denominacion item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Valor.Denominacion)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Valor.Denominacion item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Valor.Denominacion item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Valor.Denominacion with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="MonedaId"></param>
            /// <param name="Unidades"></param>
            /// <param name="Imagen"></param>
            /// <param name="CodigoCcTalk"></param>
            /// <param name="Posicion"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Int64 TipoValorId,Int64 MonedaId,Decimal Unidades,String Imagen,String CodigoCcTalk,Int32 Posicion,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Valor.Denominacion item = new Entities.Tables.Valor.Denominacion();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.TipoValorId = TipoValorId;
                 item.MonedaId = MonedaId;
                 item.Unidades = Unidades;
                 item.Imagen = Imagen;
                 item.CodigoCcTalk = CodigoCcTalk;
                 item.Posicion = Posicion;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Denominacion
	} //namespace DefaultNamespace.Business.Relations.Valor
	namespace DefaultNamespace.Business.Relations.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Moneda : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					PaisId,
					Codigo,
					Simbolo,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Valor.Moneda> _cacheItemList = new List<Entities.Relations.Valor.Moneda>();
			   protected List<Entities.Relations.Valor.Moneda> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Moneda() : base()
            {
                base._dataItem = new Entities.Relations.Valor.Moneda();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Valor.Moneda item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Moneda Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Geografia.Pais PaisId'></param>
         /// <param name='Codigo'></param>
         /// <param name='Simbolo'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Valor.Moneda</returns>
			public Entities.Relations.Valor.Moneda Add(String Nombre,DefaultNamespace.Entities.Relations.Geografia.Pais PaisId,String Codigo,String Simbolo,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Valor.Moneda)base.Add(new Entities.Relations.Valor.Moneda(Nombre,PaisId,Codigo,Simbolo,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Valor.Moneda> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Valor.Moneda>().ToList<Entities.Relations.Valor.Moneda>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Valor.Moneda items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Moneda> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="PaisId"></param>
            /// <param name="Codigo"></param>
            /// <param name="Simbolo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Moneda> Items(Int64? Id,String Nombre,Int64? PaisId,String Codigo,String Simbolo,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (PaisId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PaisId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PaisId);
                    }
                   
                }
                if (Codigo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Codigo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Codigo);
                    }
                   
                }
                if (Simbolo != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Simbolo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Simbolo);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Simbolo, DefaultNamespace.sqlEnum.OperandEnum.Equal, Simbolo);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Valor.Moneda> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Valor.Moneda Add(Entities.Relations.Valor.Moneda item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Valor.Moneda)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Valor.Moneda item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Valor.Moneda item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Valor.Moneda with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="PaisId"></param>
            /// <param name="Codigo"></param>
            /// <param name="Simbolo"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,Int64 PaisId,String Codigo,String Simbolo,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Valor.Moneda item = new Entities.Tables.Valor.Moneda();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.PaisId = PaisId;
                 item.Codigo = Codigo;
                 item.Simbolo = Simbolo;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Moneda
	} //namespace DefaultNamespace.Business.Relations.Valor
	namespace DefaultNamespace.Business.Relations.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class OrigenValor : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EmpresaId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Valor.OrigenValor> _cacheItemList = new List<Entities.Relations.Valor.OrigenValor>();
			   protected List<Entities.Relations.Valor.OrigenValor> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public OrigenValor() : base()
            {
                base._dataItem = new Entities.Relations.Valor.OrigenValor();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Valor.OrigenValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// OrigenValor Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Valor.OrigenValor</returns>
			public Entities.Relations.Valor.OrigenValor Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Directorio.Empresa EmpresaId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Valor.OrigenValor)base.Add(new Entities.Relations.Valor.OrigenValor(Nombre,Descripcion,EmpresaId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Valor.OrigenValor> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Valor.OrigenValor>().ToList<Entities.Relations.Valor.OrigenValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Valor.OrigenValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.OrigenValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.OrigenValor> Items(Int64? Id,String Nombre,String Descripcion,Int64? EmpresaId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EmpresaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EmpresaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, EmpresaId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Valor.OrigenValor> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Valor.OrigenValor Add(Entities.Relations.Valor.OrigenValor item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Valor.OrigenValor)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Valor.OrigenValor item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Valor.OrigenValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Valor.OrigenValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EmpresaId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 EmpresaId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Valor.OrigenValor item = new Entities.Tables.Valor.OrigenValor();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.EmpresaId = EmpresaId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class OrigenValor
	} //namespace DefaultNamespace.Business.Relations.Valor
	namespace DefaultNamespace.Business.Relations.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class RelacionMonedaTipoValor : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					MonedaId,
					TipoValorId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Valor.RelacionMonedaTipoValor> _cacheItemList = new List<Entities.Relations.Valor.RelacionMonedaTipoValor>();
			   protected List<Entities.Relations.Valor.RelacionMonedaTipoValor> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public RelacionMonedaTipoValor() : base()
            {
                base._dataItem = new Entities.Relations.Valor.RelacionMonedaTipoValor();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Valor.RelacionMonedaTipoValor item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// RelacionMonedaTipoValor Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Valor.Tipo TipoValorId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Valor.RelacionMonedaTipoValor</returns>
			public Entities.Relations.Valor.RelacionMonedaTipoValor Add(DefaultNamespace.Entities.Relations.Valor.Moneda MonedaId,DefaultNamespace.Entities.Relations.Valor.Tipo TipoValorId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Valor.RelacionMonedaTipoValor)base.Add(new Entities.Relations.Valor.RelacionMonedaTipoValor(MonedaId,TipoValorId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Valor.RelacionMonedaTipoValor> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Valor.RelacionMonedaTipoValor>().ToList<Entities.Relations.Valor.RelacionMonedaTipoValor>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Valor.RelacionMonedaTipoValor items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.RelacionMonedaTipoValor> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.RelacionMonedaTipoValor> Items(Int64? Id,Int64? MonedaId,Int64? TipoValorId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (MonedaId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.MonedaId, DefaultNamespace.sqlEnum.OperandEnum.Equal, MonedaId);
                    }
                   
                }
                if (TipoValorId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.TipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.TipoValorId, DefaultNamespace.sqlEnum.OperandEnum.Equal, TipoValorId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Valor.RelacionMonedaTipoValor> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Valor.RelacionMonedaTipoValor Add(Entities.Relations.Valor.RelacionMonedaTipoValor item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Valor.RelacionMonedaTipoValor)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Valor.RelacionMonedaTipoValor item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Valor.RelacionMonedaTipoValor item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Valor.RelacionMonedaTipoValor with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="MonedaId"></param>
            /// <param name="TipoValorId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 MonedaId,Int64 TipoValorId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Valor.RelacionMonedaTipoValor item = new Entities.Tables.Valor.RelacionMonedaTipoValor();
                 item.Id = Id;
                 item.MonedaId = MonedaId;
                 item.TipoValorId = TipoValorId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class RelacionMonedaTipoValor
	} //namespace DefaultNamespace.Business.Relations.Valor
	namespace DefaultNamespace.Business.Relations.Valor {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Tipo : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					Imagen,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Valor.Tipo> _cacheItemList = new List<Entities.Relations.Valor.Tipo>();
			   protected List<Entities.Relations.Valor.Tipo> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Tipo() : base()
            {
                base._dataItem = new Entities.Relations.Valor.Tipo();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Valor.Tipo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Tipo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='Imagen'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Valor.Tipo</returns>
			public Entities.Relations.Valor.Tipo Add(String Nombre,String Descripcion,String Imagen,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Valor.Tipo)base.Add(new Entities.Relations.Valor.Tipo(Nombre,Descripcion,Imagen,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Valor.Tipo> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Valor.Tipo>().ToList<Entities.Relations.Valor.Tipo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Valor.Tipo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Tipo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Valor.Tipo> Items(Int64? Id,String Nombre,String Descripcion,String Imagen,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (Imagen != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Imagen, DefaultNamespace.sqlEnum.OperandEnum.Equal, Imagen);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Valor.Tipo> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Valor.Tipo Add(Entities.Relations.Valor.Tipo item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Valor.Tipo)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Valor.Tipo item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Valor.Tipo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Valor.Tipo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="Imagen"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,String Imagen,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Valor.Tipo item = new Entities.Tables.Valor.Tipo();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.Imagen = Imagen;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Tipo
	} //namespace DefaultNamespace.Business.Relations.Valor
	namespace DefaultNamespace.Business.Relations.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class Perfil : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					PerfilTipoId,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Visualizacion.Perfil> _cacheItemList = new List<Entities.Relations.Visualizacion.Perfil>();
			   protected List<Entities.Relations.Visualizacion.Perfil> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public Perfil() : base()
            {
                base._dataItem = new Entities.Relations.Visualizacion.Perfil();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Visualizacion.Perfil item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// Perfil Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Visualizacion.PerfilTipo PerfilTipoId'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Visualizacion.Perfil</returns>
			public Entities.Relations.Visualizacion.Perfil Add(String Nombre,String Descripcion,DefaultNamespace.Entities.Relations.Visualizacion.PerfilTipo PerfilTipoId,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Visualizacion.Perfil)base.Add(new Entities.Relations.Visualizacion.Perfil(Nombre,Descripcion,PerfilTipoId,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Visualizacion.Perfil> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Visualizacion.Perfil>().ToList<Entities.Relations.Visualizacion.Perfil>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Visualizacion.Perfil items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.Perfil> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PerfilTipoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.Perfil> Items(Int64? Id,String Nombre,String Descripcion,Int64? PerfilTipoId,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (PerfilTipoId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilTipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilTipoId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PerfilTipoId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilTipoId);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Visualizacion.Perfil> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Visualizacion.Perfil Add(Entities.Relations.Visualizacion.Perfil item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Visualizacion.Perfil)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Visualizacion.Perfil item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Visualizacion.Perfil item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Visualizacion.Perfil with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="PerfilTipoId"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Int64 PerfilTipoId,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Visualizacion.Perfil item = new Entities.Tables.Visualizacion.Perfil();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.PerfilTipoId = PerfilTipoId;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class Perfil
	} //namespace DefaultNamespace.Business.Relations.Visualizacion
	namespace DefaultNamespace.Business.Relations.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PerfilItem : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					PerfilId,
					IdTablaReferencia,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Visualizacion.PerfilItem> _cacheItemList = new List<Entities.Relations.Visualizacion.PerfilItem>();
			   protected List<Entities.Relations.Visualizacion.PerfilItem> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public PerfilItem() : base()
            {
                base._dataItem = new Entities.Relations.Visualizacion.PerfilItem();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Visualizacion.PerfilItem item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PerfilItem Add Method
         /// </summary>
         /// <param name='DefaultNamespace.Entities.Relations.Visualizacion.Perfil PerfilId'></param>
         /// <param name='IdTablaReferencia'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Visualizacion.PerfilItem</returns>
			public Entities.Relations.Visualizacion.PerfilItem Add(DefaultNamespace.Entities.Relations.Visualizacion.Perfil PerfilId,Int64 IdTablaReferencia,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Visualizacion.PerfilItem)base.Add(new Entities.Relations.Visualizacion.PerfilItem(PerfilId,IdTablaReferencia,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Visualizacion.PerfilItem> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Visualizacion.PerfilItem>().ToList<Entities.Relations.Visualizacion.PerfilItem>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Visualizacion.PerfilItem items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.PerfilItem> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PerfilId"></param>
            /// <param name="IdTablaReferencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.PerfilItem> Items(Int64? Id,Int64? PerfilId,Int64? IdTablaReferencia,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (PerfilId != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.PerfilId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.PerfilId, DefaultNamespace.sqlEnum.OperandEnum.Equal, PerfilId);
                    }
                   
                }
                if (IdTablaReferencia != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.IdTablaReferencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, IdTablaReferencia);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.IdTablaReferencia, DefaultNamespace.sqlEnum.OperandEnum.Equal, IdTablaReferencia);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Visualizacion.PerfilItem> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Visualizacion.PerfilItem Add(Entities.Relations.Visualizacion.PerfilItem item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Visualizacion.PerfilItem)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Visualizacion.PerfilItem item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Visualizacion.PerfilItem item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Visualizacion.PerfilItem with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="PerfilId"></param>
            /// <param name="IdTablaReferencia"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,Int64 PerfilId,Int64 IdTablaReferencia,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Visualizacion.PerfilItem item = new Entities.Tables.Visualizacion.PerfilItem();
                 item.Id = Id;
                 item.PerfilId = PerfilId;
                 item.IdTablaReferencia = IdTablaReferencia;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PerfilItem
	} //namespace DefaultNamespace.Business.Relations.Visualizacion
	namespace DefaultNamespace.Business.Relations.Visualizacion {
	    /// <summary>
	    /// 
	    /// </summary>
		public class PerfilTipo : RelationsDataHandler
		{
				public enum ColumnEnum : int
                {
					Id,
					Nombre,
					Descripcion,
					EsAdministrador,
					Habilitado,
					UsuarioCreacion,
					FechaCreacion,
					UsuarioModificacion,
					FechaModificacion
				}
			   protected List<Entities.Relations.Visualizacion.PerfilTipo> _cacheItemList = new List<Entities.Relations.Visualizacion.PerfilTipo>();
			   protected List<Entities.Relations.Visualizacion.PerfilTipo> _entities = null;
            public new CustomWhereParameter Where { get; set; }
            public new CustomOrderByParameter OrderByParameter { get; set; }
            public new CustomGroupByParameter GroupByParameter { get; set; }
            public new CustomAggregateParameter AggregateParameter { get; set; }
            public PerfilTipo() : base()
            {
                base._dataItem = new Entities.Relations.Visualizacion.PerfilTipo();
                Where = new CustomWhereParameter();
                OrderByParameter = new CustomOrderByParameter();
                GroupByParameter = new CustomGroupByParameter();
            }
            public class CustomAggregateParameter : AggregateParameter
            {
                 internal AggregateParameter aggregateParameter = new AggregateParameter();
                 public void Add(DefaultNamespace.sqlEnum.FunctionEnum functionEnum, ColumnEnum column)
                     {
                         this.aggregateParameter.Add(functionEnum, Enum.GetName(typeof(ColumnEnum), column));
                     }
            }
			// Adds to a memory cache to hold pending transactions
			public void AddToCache(Entities.Relations.Visualizacion.PerfilTipo item)
			{
				_cacheItemList.Add(item);
			}
			public void UpdateCache()
			{
                this.BeginTransaction();
				foreach(IDataItem item in _cacheItemList)
					base.Add(item);
				this.EndTransaction(true);
			}
			// Method that accepts arguments corresponding to fields (Those wich arenÂ´t identity.)
         /// <summary>
         /// PerfilTipo Add Method
         /// </summary>
         /// <param name='Nombre'></param>
         /// <param name='Descripcion'></param>
         /// <param name='EsAdministrador'></param>
         /// <param name='Habilitado'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion'></param>
         /// <param name='FechaCreacion'></param>
         /// <param name='DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion'></param>
         /// <param name='FechaModificacion'></param>
         /// <returns>Entities.Relations.Visualizacion.PerfilTipo</returns>
			public Entities.Relations.Visualizacion.PerfilTipo Add(String Nombre,String Descripcion,Boolean EsAdministrador,Boolean Habilitado,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioCreacion,DateTime FechaCreacion,DefaultNamespace.Entities.Relations.Seguridad.Usuario UsuarioModificacion,DateTime FechaModificacion) 
			{
			  return (Entities.Relations.Visualizacion.PerfilTipo)base.Add(new Entities.Relations.Visualizacion.PerfilTipo(Nombre,Descripcion,EsAdministrador,Habilitado,UsuarioCreacion,FechaCreacion,UsuarioModificacion,FechaModificacion));
			}
            public new List<Entities.Relations.Visualizacion.PerfilTipo> Items()
            {
                this.WhereParameter = this.Where.whereParameter;
                this.OrderByParameter.orderByParameter = this.OrderByParameter.orderByParameter;
                this.GroupByParameter.groupByParameter = this.GroupByParameter.groupByParameter;
                this.TopQuantity = this.TopQuantity;
                base.AnalizeIDataItem();
                _entities = base.Items().Cast<Entities.Relations.Visualizacion.PerfilTipo>().ToList<Entities.Relations.Visualizacion.PerfilTipo>();
                return _entities;
            }
            /// <summary>
            /// Gets Entities.Relations.Visualizacion.PerfilTipo items by Pk
            /// </summary>
            /// <param name="Id"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.PerfilTipo> Items(Int64 Id)
            {
                this.Where.Clear();
                    if (this.Where.whereParameter.Count == 0)
                    {
                         this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                         this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND,ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                return this.Items();
            }
            /// <summary>
            /// Gets items with all fields
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsAdministrador"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns></returns>
            public List<Entities.Relations.Visualizacion.PerfilTipo> Items(Int64? Id,String Nombre,String Descripcion,Boolean? EsAdministrador,Boolean? Habilitado,Int64? UsuarioCreacion,DateTime? FechaCreacion,Int64? UsuarioModificacion,DateTime? FechaModificacion)
            {
                this.Where.whereParameter.Clear();
                if (Id != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Id, DefaultNamespace.sqlEnum.OperandEnum.Equal, Id);
                    }
                   
                }
                if (Nombre != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Nombre, DefaultNamespace.sqlEnum.OperandEnum.Equal, Nombre);
                    }
                   
                }
                if (Descripcion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Descripcion, DefaultNamespace.sqlEnum.OperandEnum.Equal, Descripcion);
                    }
                   
                }
                if (EsAdministrador != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.EsAdministrador, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsAdministrador);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.EsAdministrador, DefaultNamespace.sqlEnum.OperandEnum.Equal, EsAdministrador);
                    }
                   
                }
                if (Habilitado != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.Habilitado, DefaultNamespace.sqlEnum.OperandEnum.Equal, Habilitado);
                    }
                   
                }
                if (UsuarioCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioCreacion);
                    }
                   
                }
                if (FechaCreacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaCreacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaCreacion);
                    }
                   
                }
                if (UsuarioModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.UsuarioModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, UsuarioModificacion);
                    }
                   
                }
                if (FechaModificacion != null)
                {
                    if (this.Where.whereParameter.Count == 0)
                    {
                        this.Where.Add(ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                    else
                    {
                        this.Where.Add(DefaultNamespace.sqlEnum.ConjunctionEnum.AND, ColumnEnum.FechaModificacion, DefaultNamespace.sqlEnum.OperandEnum.Equal, FechaModificacion);
                    }
                   
                }
                return this.Items();
            }
            public List<Entities.Relations.Visualizacion.PerfilTipo> Result 
            {
                get { return _entities; }
            }
            public Entities.Relations.Visualizacion.PerfilTipo Add(Entities.Relations.Visualizacion.PerfilTipo item)
            {
                RelationsDataHandler dh = new RelationsDataHandler(this._dataItem);
                return (Entities.Relations.Visualizacion.PerfilTipo)base.Add((IDataItem)item);
            }
            public Int64 Update(Entities.Relations.Visualizacion.PerfilTipo item)
            {
                return base.Update((IDataItem)item);
            }
            public Int64 Delete(Entities.Relations.Visualizacion.PerfilTipo item)
            {
                return base.DeleteItem((IDataItem)item);
            }
            /// Updates an instance of Entities.Relations.Visualizacion.PerfilTipo with parameters
            /// </summary>
            /// <param name="Id"></param>
            /// <param name="Nombre"></param>
            /// <param name="Descripcion"></param>
            /// <param name="EsAdministrador"></param>
            /// <param name="Habilitado"></param>
            /// <param name="UsuarioCreacion"></param>
            /// <param name="FechaCreacion"></param>
            /// <param name="UsuarioModificacion"></param>
            /// <param name="FechaModificacion"></param>
            /// <returns>Int64</returns>
            public Int64 Update(Int64 Id,String Nombre,String Descripcion,Boolean EsAdministrador,Boolean Habilitado,Int64 UsuarioCreacion,DateTime FechaCreacion,Int64 UsuarioModificacion,DateTime FechaModificacion)
            {
                 Entities.Tables.Visualizacion.PerfilTipo item = new Entities.Tables.Visualizacion.PerfilTipo();
                 item.Id = Id;
                 item.Nombre = Nombre;
                 item.Descripcion = Descripcion;
                 item.EsAdministrador = EsAdministrador;
                 item.Habilitado = Habilitado;
                 item.UsuarioCreacion = UsuarioCreacion;
                 item.FechaCreacion = FechaCreacion;
                 item.UsuarioModificacion = UsuarioModificacion;
                 item.FechaModificacion = FechaModificacion;

                return base.Update((IDataItem)item);
            }
            public class CustomWhereParameter : WhereParameter {
                 internal WhereParameter whereParameter = new WhereParameter();
                 public void Add(ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void  Add(ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand,object value)
                 {
                     this.whereParameter.Add(Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum betweenColumn, DefaultNamespace.sqlEnum.OperandEnum operand, object valueFrom, object valueTo)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), betweenColumn), valueFrom, valueTo);
                 }
                 public void Add(DefaultNamespace.sqlEnum.ConjunctionEnum conjunction,ColumnEnum column, DefaultNamespace.sqlEnum.OperandEnum operand, object value)
                 {
                     this.whereParameter.Add(conjunction, Enum.GetName(typeof(ColumnEnum), column), operand, value);
                 }
                 public void Clear()
                 {
                     this.whereParameter.Clear();
                 }
                 public long Count
                 {
                     get {
                         return this.whereParameter.Count;
                     }
                 }
            }
            public class CustomOrderByParameter : OrderByParameter {
                 internal OrderByParameter orderByParameter = new OrderByParameter();
                 public void Add(ColumnEnum column, DefaultNamespace.sqlEnum.DirEnum direction = DefaultNamespace.sqlEnum.DirEnum.ASC)
                 {
                     this.orderByParameter.Add(Enum.GetName(typeof(ColumnEnum), column), direction);
                 }
            }
            public class CustomGroupByParameter : GroupByParameter {
                 internal GroupByParameter groupByParameter = new GroupByParameter();
                 public void Add(ColumnEnum column)
                 {
                     this.groupByParameter.Add(Enum.GetName(typeof(ColumnEnum), column));
                 }
            }
        } // class PerfilTipo
	} //namespace DefaultNamespace.Business.Relations.Visualizacion
